{
  "url": "https://api.github.com/repos/kemu3007/portal/issues/10",
  "repository_url": "https://api.github.com/repos/kemu3007/portal",
  "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/10/labels{/name}",
  "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/10/comments",
  "events_url": "https://api.github.com/repos/kemu3007/portal/issues/10/events",
  "html_url": "https://github.com/kemu3007/portal/issues/10",
  "id": 1160543378,
  "node_id": "I_kwDOG7qoq85FLHyS",
  "number": 10,
  "title": "使用Gmail API推送通知",
  "user": {
    "login": "kemu3007",
    "id": 29157528,
    "node_id": "MDQ6VXNlcjI5MTU3NTI4",
    "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kemu3007",
    "html_url": "https://github.com/kemu3007",
    "followers_url": "https://api.github.com/users/kemu3007/followers",
    "following_url": "https://api.github.com/users/kemu3007/following{/other_user}",
    "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions",
    "organizations_url": "https://api.github.com/users/kemu3007/orgs",
    "repos_url": "https://api.github.com/users/kemu3007/repos",
    "events_url": "https://api.github.com/users/kemu3007/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kemu3007/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3898939400,
      "node_id": "LA_kwDOG7qoq87oZRgI",
      "url": "https://api.github.com/repos/kemu3007/portal/labels/article",
      "name": "article",
      "color": "C200E5",
      "default": false,
      "description": ""
    },
    {
      "id": 3900073969,
      "node_id": "LA_kwDOG7qoq87odmfx",
      "url": "https://api.github.com/repos/kemu3007/portal/labels/GCP",
      "name": "GCP",
      "color": "FBCA04",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [],
  "milestone": null,
  "comments": 0,
  "created_at": "2022-03-06T07:47:32Z",
  "updated_at": "2022-03-06T15:19:57Z",
  "closed_at": null,
  "author_association": "OWNER",
  "active_lock_reason": null,
  "body": "它允许将该过程与电子邮件挂钩，并与处理过程穿插进行。\n\n###环境。\n-  Python 3.10\n-  google- api- python- client==2.36.0\n-  google_auth_oauthlib=0.4.6\n-  google- cloud- pubsub==2.9.0\n\n\n###程序。\n①从GCP控制台创建一个项目并激活[Gmail API](https://console.cloud.google.com/apis/api/gmail.googleapis.com/)\n\n(2) 点击Gmail API - > 认证信息 - > 创建认证信息，并创建一个OAuth客户端ID（选择桌面应用很方便，因为如果你只想随手玩玩，就不用考虑重定向URI的问题）。\n\n(iii) 创建一个OAuth客户端ID后，点击访问并下载JSON。\n\n(iv) 由于下载的JSON没有被赋予令牌，执行以下代码，点击控制台显示的URL并同意，将生成的代码粘贴到控制台，并以pickle的形式保存认证信息。(该描述是基于djnago的，但没有必要意识到这一点)。\n\n- - - \n\n```py\nimport json\nimport pickle\nfrom pathlib import Path\n\nfrom django.conf import settings\nfrom django.core.management.base import BaseCommand\nfrom google_auth_oauthlib.flow import InstalledAppFlow\n\n\nclass Command(BaseCommand):\n    def handle(self, *args, **options):\n        credential_path: Path = settings.BASE_DIR.parent / \"auth.json\"\n        credential_scopes = [\"https://mail.google.com/\"]\n        raw_credentials = json.loads(credential_path.read_text())\n        flow = InstalledAppFlow.from_client_config(raw_credentials, credential_scopes)\n        credentials = flow.run_console()\n        with open(\"token.pickle\", \"wb\") as token:\n            pickle.dump(credentials, token)\n```\n\n- - - \n\n5) 创建一个[pub/sub](https://console.cloud.google.com/cloudpubsub/)，这是GCP控制台的Gmail推送通知所需要的。首先创建主题，这时你不需要勾选任何复选框。\n\n6) 为该主题设置PUBLISHER。在屏幕右侧信息面板的权限部分点击 \"添加负责人\"，添加 \"gmail- api- push@system.gserviceaccount.com \"作为 \"Pub/Sub Publisher \"角色。\n\n(vii) 创建一个订阅。选择 \"拉动 \"作为交付类型。该主题将是步骤5中创建的主题。\n\n8) 根据第4步创建的认证信息，运行`users.watch`。在这种情况下，通过指定labelIds为INBOX，通知控制了事件的触发。\n\n- - - \n\n```py\nfrom googleapiclient.discovery import build\n\nwith open(settings.BASE_DIR / \"mail/token.pickle\", \"rb\") as token:\n    credentials = pickle.load(token)\nservice = build(\"gmail\", \"v1\", credentials=self.credentials)\n# settings.PUBSUB_TOPICには  projects/{project_name}-{project_id}/topics/{topic_name} のような値が入ります。\nservice.users().watch(userId=\"me\", body={\"labelIds\": [\"INBOX\"], \"topicName\": settings.PUBSUB_TOPIC}).execute()\n```\n\n- - - \n\n(ix) 设置回调函数和订阅。\n\n- - - \n\n```py\nfrom google.cloud.pubsub_v1 import SubscriberClient\n\n# settings.PUBSUB_SUBSCRIPTIONにはprojects/{project_name}-{project_id}/subscriptions/{topic_name} のような値が入ります\nSubscriberClient(credentials=credentials).subscribe(settings.PUBSUB_SUBSCRIPTION, callback=callback)\n```\n\n- - - \n\n⑩通过订阅获得的数据格式如下。\nhttps://developers.google.com/gmail/api/guides/push#receiving_notifications\n\n请注意，本例中的 \"messageId \"与gmail ID无关。\n\n(11) 根据historyId获取信息。\n\n如果使用步骤10中获得的historyId，由于使用startHistoryId查询的方便，可能不会获得。因此，有必要使用之前的值，如果不存在，则使用`user.watch`时的historyId。\n\n- - - \n\n```py\nhistories = service.users().history().list(userId=\"me\", historyTypes=[\"messageAdded\"], labelId=\"INBOX\", startHistoryId=past_history_id).execute(num_retries=5)\nmessage_id = histories[\"history\"][0][\"messagesAdded\"][0][\"message\"][\"id\"]\nmessage = self.service.users().messages().get(userId=\"me\", id=message_id).execute(num_retries=5)\n```\n\n- - - \n\n⑫由于在第12步中检索到了信息，所以通知slack，保存到DB，或做任何其他你喜欢的处理。\n\n该文本以base64编码，应该由`base64.urlsafe_b64decode`或类似的方法处理。\n\n###注意。\n\n-  请不要将您的证书上传到如github，因为它涉及到GCP的访问权。\n-  `user.watch`需要定期运行。如果能把它变成一个命令，并通过oferia或cron定期执行，那就更好了。\n\n###一般评论。\n\n有很多更简单的方法可以将邮件发送至slack本身，但我认为如果你想穿插其他进程或想将邮件信息存储在一个易于使用的DB中，这将是非常有用的。\n\n我们经历了一段艰难的时期，因为周围很少有日语文件，但我们在一天之内成功地将它变成了一个可以工作的slackbot，所以我对此感到高兴。",
  "reactions": {
    "url": "https://api.github.com/repos/kemu3007/portal/issues/10/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/10/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
