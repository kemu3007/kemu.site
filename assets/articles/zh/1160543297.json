{
    "url": "https://api.github.com/repos/kemu3007/portal/issues/9",
    "repository_url": "https://api.github.com/repos/kemu3007/portal",
    "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/9/labels{/name}",
    "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/9/comments",
    "events_url": "https://api.github.com/repos/kemu3007/portal/issues/9/events",
    "html_url": "https://github.com/kemu3007/portal/issues/9",
    "id": 1160543297,
    "node_id": "I_kwDOG7qoq85FLHxB",
    "number": 9,
    "title": "编写前端测试（快照测试部分）。",
    "user": {
        "login": "kemu3007",
        "id": 29157528,
        "node_id": "MDQ6VXNlcjI5MTU3NTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kemu3007",
        "html_url": "https://github.com/kemu3007",
        "followers_url": "https://api.github.com/users/kemu3007/followers",
        "following_url": "https://api.github.com/users/kemu3007/following{/other_user}",
        "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions",
        "organizations_url": "https://api.github.com/users/kemu3007/orgs",
        "repos_url": "https://api.github.com/users/kemu3007/repos",
        "events_url": "https://api.github.com/users/kemu3007/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kemu3007/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 3898939400,
            "node_id": "LA_kwDOG7qoq87oZRgI",
            "url": "https://api.github.com/repos/kemu3007/portal/labels/article",
            "name": "article",
            "color": "C200E5",
            "default": false,
            "description": ""
        },
        {
            "id": 3900074882,
            "node_id": "LA_kwDOG7qoq87odmuC",
            "url": "https://api.github.com/repos/kemu3007/portal/labels/Angular",
            "name": "Angular",
            "color": "D93F0B",
            "default": false,
            "description": ""
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-03-06T07:47:02Z",
    "updated_at": "2022-03-06T15:20:21Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "body": "###环境。\n角度13，节点16\n\n删除默认包含的Karma，以便这次使用jest。\n```sh\nnpm run ng add @briebug/jest-schematic\n```\n\n参考资料: https://github.com/briebug/jest- schematic\n\n### 写作测试。\n-  app.component.spec.ts\n\n```ts\n  it('snapshot test', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const compiled = fixture.nativeElement;\n    expect(compiled).toMatchSnapshot();\n  })\n```\n\n###执行。\n\n当使用`npm run test`运行测试时，如果没有现有的快照或`- update- sapshot`选项，将创建`snapshots`目录。下面是一个例子。\n\n-  `__snapshots__/app.component.spec.ts.sap`。\n\n```ts\n// Jest Snapshot v1, https://goo.gl/fbAQLP\n\nexports[`AppComponent snapshot test 1`] = `\n<div\n  id=\"root2\"\n>\n  <mat-toolbar>\n    <mat-toolbar-row\n      style=\"padding: 0 16px 0 0;\"\n    >\n      <button\n        mat-button=\"\"\n      >\n...\n```\n在测试失败的情况下，会显示以下内容。\n\n```bash\n    expect(received).toMatchSnapshot()\n\n    Snapshot name: `AppComponent snapshot test 1`\n\n    - Snapshot  - 1\n    + Received  + 1\n\n    @@ -1,11 +1,11 @@\n      <div\n        id=\"root2\"\n      >\n        <mat-toolbar>\n          <mat-toolbar-row\n    -       style=\"padding: 0 16px 0 0;\"\n    +       style=\"padding: 1 16px 0 0;\"\n          >\n            <button\n              mat-button=\"\"\n            >\n              <mat-icon>\n\n      33 |     fixture.detectChanges();\n      34 |     const compiled = fixture.nativeElement;\n    > 35 |     expect(compiled).toMatchSnapshot();\n         |                      ^\n      36 |   })\n      37 | });\n      38 |\n\n      at src/app/app.component.spec.ts:35:22\n      at ZoneDelegate.Object.<anonymous>.ZoneDelegate.invoke (node_modules/zone.js/bundles/zone-testing-bundle.umd.js:407:30)\n      at ProxyZoneSpec.Object.<anonymous>.ProxyZoneSpec.onInvoke (node_modules/zone.js/bundles/zone-testing-bundle.umd.js:3765:43)\n      at ZoneDelegate.Object.<anonymous>.ZoneDelegate.invoke (node_modules/zone.js/bundles/zone-testing-bundle.umd.js:406:56)\n      at Zone.Object.<anonymous>.Zone.run (node_modules/zone.js/bundles/zone-testing-bundle.umd.js:167:47)\n      at Object.wrappedFunc (node_modules/zone.js/bundles/zone-testing-bundle.umd.js:4250:34)\n\n › 1 snapshot failed.\nSnapshot Summary\n › 1 snapshot failed from 1 test suite. Inspect your code changes or re-run jest with `-u` to update them.\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 2 passed, 3 total\nSnapshots:   1 failed, 1 total\nTime:        1.667 s, estimated 2 s\nRan all test suites.\n```\n\n###测试的意义。\n\n当对前端进行修改时，可以轻率地断言修改的影响。\n\n问题包括。\n\n-  不能断言，除非css在样式格式中被写入内联。\n-  根据条件显示的组件需要单独进行修补和断言（因为每次都进行快照很慢）。\n\n这种困境对于css来说尤其严重，因为css需要内联书写才能在测试中看到，但css的可读性并不会因为内联书写而降低。\n\n##注意到。\n\n`__snapshots__`目录可能看起来不大，但它需要由git管理。\n\n###一般评论。\n\n好吧，测试是在轻度理解的水平上，没有过多的期望。",
    "reactions": {
        "url": "https://api.github.com/repos/kemu3007/portal/issues/9/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/9/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}