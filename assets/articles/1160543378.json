{"url": "https://api.github.com/repos/kemu3007/portal/issues/10", "repository_url": "https://api.github.com/repos/kemu3007/portal", "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/10/comments", "events_url": "https://api.github.com/repos/kemu3007/portal/issues/10/events", "html_url": "https://github.com/kemu3007/portal/issues/10", "id": 1160543378, "node_id": "I_kwDOG7qoq85FLHyS", "number": 10, "title": "Gmail API push notificationを利用する", "user": {"login": "kemu3007", "id": 29157528, "node_id": "MDQ6VXNlcjI5MTU3NTI4", "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kemu3007", "html_url": "https://github.com/kemu3007", "followers_url": "https://api.github.com/users/kemu3007/followers", "following_url": "https://api.github.com/users/kemu3007/following{/other_user}", "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}", "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions", "organizations_url": "https://api.github.com/users/kemu3007/orgs", "repos_url": "https://api.github.com/users/kemu3007/repos", "events_url": "https://api.github.com/users/kemu3007/events{/privacy}", "received_events_url": "https://api.github.com/users/kemu3007/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3898939400, "node_id": "LA_kwDOG7qoq87oZRgI", "url": "https://api.github.com/repos/kemu3007/portal/labels/article", "name": "article", "color": "C200E5", "default": false, "description": ""}, {"id": 3900073969, "node_id": "LA_kwDOG7qoq87odmfx", "url": "https://api.github.com/repos/kemu3007/portal/labels/GCP", "name": "GCP", "color": "FBCA04", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-03-06T07:47:32Z", "updated_at": "2022-03-06T15:19:57Z", "closed_at": null, "author_association": "OWNER", "active_lock_reason": null, "body": "メールにフックして処理を挟むことができるようになります。\r\n\r\n### 環境\r\n- Python 3.10\r\n- google-api-python-client==2.36.0\r\n- google_auth_oauthlib==0.4.6\r\n- google-cloud-pubsub==2.9.0\r\n\r\n\r\n### 手順\r\n① GCPコンソールからプロジェクトを作成し、[Gmail API](https://console.cloud.google.com/apis/api/gmail.googleapis.com/)を有効化\r\n\r\n② Gmail API -> 認証情報 -> 認証情報を作成をクリックし、OAuth クライアント IDを作成する(手元で遊ぶだけであればリダイレクトURIについて考えなくて良いのでデスクトップアプリを選択するのが便利です。)\r\n\r\n③ OAuth クライアント IDを作成後、クリックしてアクセスし、JSONをダウンロード\r\n\r\n④ ダウンロードしてきたJSONにはtokenが付与されていないため、以下のコードを実行し、コンソールに表示されたURLをクリックし同意を行ったうえで生成されたコードをコンソールにペーストし、認証情報をpickleの形式で保存します。(説明ではdjnagoをベースにしていますが特に意識する必要はないです。)\r\n\r\n---\r\n\r\n```py\r\nimport json\r\nimport pickle\r\nfrom pathlib import Path\r\n\r\nfrom django.conf import settings\r\nfrom django.core.management.base import BaseCommand\r\nfrom google_auth_oauthlib.flow import InstalledAppFlow\r\n\r\n\r\nclass Command(BaseCommand):\r\n    def handle(self, *args, **options):\r\n        credential_path: Path = settings.BASE_DIR.parent / \"auth.json\"\r\n        credential_scopes = [\"https://mail.google.com/\"]\r\n        raw_credentials = json.loads(credential_path.read_text())\r\n        flow = InstalledAppFlow.from_client_config(raw_credentials, credential_scopes)\r\n        credentials = flow.run_console()\r\n        with open(\"token.pickle\", \"wb\") as token:\r\n            pickle.dump(credentials, token)\r\n```\r\n\r\n---\r\n\r\n⑤ GCPのコンソールからGmailのpush notificationに必要となる[pub/sub](https://console.cloud.google.com/cloudpubsub/)を作成します。トピックをまず作成します、この際チェックボックスにチェックを入れる必要はありません。\r\n\r\n⑥ トピックに対するpublisherを設定します。画面右側情報パネル権限欄から`プリンシパルを追加`をクリックし、 `gmail-api-push@system.gserviceaccount.com` をロール `Pub/Sub パブリッシャー` として追加します。\r\n\r\n⑦ サブスクリプションを作成します。配信タイプは`pull`を選択してください。トピックは手順5で作成したものになります。\r\n\r\n⑧ 手順4で作成した認証情報を元に `users.watch` を実行します。この際labelIdsをINBOXと指定することで通知がイベント発火を制御しています。\r\n\r\n---\r\n\r\n```py\r\nfrom googleapiclient.discovery import build\r\n\r\nwith open(settings.BASE_DIR / \"mail/token.pickle\", \"rb\") as token:\r\n    credentials = pickle.load(token)\r\nservice = build(\"gmail\", \"v1\", credentials=self.credentials)\r\n# settings.PUBSUB_TOPICには  projects/{project_name}-{project_id}/topics/{topic_name} のような値が入ります。\r\nservice.users().watch(userId=\"me\", body={\"labelIds\": [\"INBOX\"], \"topicName\": settings.PUBSUB_TOPIC}).execute()\r\n```\r\n\r\n---\r\n\r\n⑨ callback関数を設定し、subscribeする\r\n\r\n---\r\n\r\n```py\r\nfrom google.cloud.pubsub_v1 import SubscriberClient\r\n\r\n# settings.PUBSUB_SUBSCRIPTIONにはprojects/{project_name}-{project_id}/subscriptions/{topic_name} のような値が入ります\r\nSubscriberClient(credentials=credentials).subscribe(settings.PUBSUB_SUBSCRIPTION, callback=callback)\r\n```\r\n\r\n---\r\n\r\n⑩ subscribeして得られたデータは以下の形式です。\r\nhttps://developers.google.com/gmail/api/guides/push#receiving_notifications\r\n\r\nこの時の\"messageId\"はgmailのIDとは一切関係がないので注意する必要があります。\r\n\r\n⑪ historyIdを元にメッセージを取得する\r\n\r\n手順10で取得したhistoryIdを利用した場合startHistoryIdクエリを利用する都合上取得できない場合があります。そのため、ひとつ前の値、存在しない場合は `user.watch` を利用した際のhistoryIdを利用する必要があります。\r\n\r\n---\r\n\r\n```py\r\nhistories = service.users().history().list(userId=\"me\", historyTypes=[\"messageAdded\"], labelId=\"INBOX\", startHistoryId=past_history_id).execute(num_retries=5)\r\nmessage_id = histories[\"history\"][0][\"messagesAdded\"][0][\"message\"][\"id\"]\r\nmessage = self.service.users().messages().get(userId=\"me\", id=message_id).execute(num_retries=5)\r\n```\r\n\r\n---\r\n\r\n⑫ 手順12でメッセージが取得できたため、slackに通知、DBに保存など好きな処理を行う。\r\n\r\n本文はbase64でエンコードされているため、 `base64.urlsafe_b64decode` するなどして取り扱ってください。\r\n\r\n### 注意\r\n\r\n- GCPのアクセス権を扱うためくれぐれもgithubなどに認証情報をアップロードしないようにしてください。\r\n- `user.watch` は定期的に実行する必要があります。コマンド化してoferiaやcronなどで定期実行をかけるのが良いかなと思います。\r\n\r\n### 総評\r\n\r\nslackにメールを流し込むこと自体はもっと簡単な方法がいくらでも存在していますが、ほかの処理を挟み込みたい、使いやすいDBにメール情報を蓄積しておきたいなど思った場合に便利だなと思いました。\r\n\r\n日本語の資料がほとんど転がっておらず苦労しましたがなんとか1日で動くslackbotまで持っていけたのでよかったなと思っています。", "reactions": {"url": "https://api.github.com/repos/kemu3007/portal/issues/10/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/10/timeline", "performed_via_github_app": null, "state_reason": null}