{"url": "https://api.github.com/repos/kemu3007/portal/issues/10", "repository_url": "https://api.github.com/repos/kemu3007/portal", "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/10/comments", "events_url": "https://api.github.com/repos/kemu3007/portal/issues/10/events", "html_url": "https://github.com/kemu3007/portal/issues/10", "id": 1160543378, "node_id": "I_kwDOG7qoq85FLHyS", "number": 10, "title": "使用Gmail API推送通知", "user": {"login": "kemu3007", "id": 29157528, "node_id": "MDQ6VXNlcjI5MTU3NTI4", "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kemu3007", "html_url": "https://github.com/kemu3007", "followers_url": "https://api.github.com/users/kemu3007/followers", "following_url": "https://api.github.com/users/kemu3007/following{/other_user}", "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}", "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions", "organizations_url": "https://api.github.com/users/kemu3007/orgs", "repos_url": "https://api.github.com/users/kemu3007/repos", "events_url": "https://api.github.com/users/kemu3007/events{/privacy}", "received_events_url": "https://api.github.com/users/kemu3007/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3898939400, "node_id": "LA_kwDOG7qoq87oZRgI", "url": "https://api.github.com/repos/kemu3007/portal/labels/article", "name": "article", "color": "C200E5", "default": false, "description": ""}, {"id": 3900073969, "node_id": "LA_kwDOG7qoq87odmfx", "url": "https://api.github.com/repos/kemu3007/portal/labels/GCP", "name": "GCP", "color": "FBCA04", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-03-06T07:47:32Z", "updated_at": "2022-03-06T15:19:57Z", "closed_at": null, "author_association": "OWNER", "active_lock_reason": null, "body": "您将能够连接电子邮件并放置处理。\r\n\r\n＃＃＃ 环境\r\n-Python 3.10\r\n-google-api-python-client == 2.36.0\r\n-google_auth_oauthlib == 0.4.6\r\n-google-cloud-pubsub == 2.9.0\r\n\r\n\r\n＃＃＃ 程序\r\n①从GCP控制台创建一个项目，并启用[Gmail API]（https://console.cloud.google.com/apis/api/gmail/gmail.googleapis.com/）\r\n\r\n②gmail api->身份验证信息 - >创建身份验证信息并创建OAuth客户端ID（如果您只需要播放，则无需考虑重定向URI，因此选择桌面应用程序很方便。\r\n\r\n③创建OAuth客户端ID后，单击以访问并下载JSON\r\n\r\n④由于下载的JSON尚未给出令牌，执行以下代码，请单击控制台上显示的URL，将生成的代码粘贴到控制台上，然后粘贴身份验证信息。以腌制格式除外。 （在解释中，它是基于djnago的，但没有必要特别有意识。）\r\n\r\n---\r\n\r\n````py\r\n导入JSON\r\n进口泡菜\r\n从pathlib导入路径\r\n\r\n来自django.conf导入设置\r\n来自django.core.management.Base Import BaseCommand\r\n来自Google_auth_oauthlib.flow import installedappflow\r\n\r\n\r\n类命令（BaseCommand）：\r\n    def hander（self， *args，**选项）：\r\n        recredential_path：path = settings.base_dir.parent /“ auth.json”\r\n        recredential_scopes = [“ https://mail.google.com/”]\r\n        raw_credentials = json.loads（recretential_path.read_text（））\r\n        flow = installedappflow.from_client_config（raw_credentials，recredential_scopes）\r\n        凭据= flow.run_console（）\r\n        带有打开的（“ tokyon.pickle”，“ wb”）作为token：\r\n            pickle.dump（凭证，令牌）\r\n````````\r\n\r\n---\r\n\r\n创建[pub/sub]（https://console.cloud.google.com/cloudpubsub/）GMAIL从GCP控制台发出的推送通知所需的。首先创建一个主题，目前您无需选中复选框。\r\n\r\n⑥设置该主题的发布者。单击屏幕右侧的信息面板权限列中的“ principal”，然后添加``gmail-api-push@system.gserviceaccount.com''作为roll` pub/sub Publisher'。\r\n\r\n⑦创建订阅。请选择“拉动”以进行分配类型。该主题是根据步骤5创建的。\r\n\r\n⑧基于步骤4中创建的身份验证信息，运行`用户.watch`。此时，通知通过将标记为收件箱来控制事件火灾。\r\n\r\n---\r\n\r\n````py\r\n从googleapiclient.discovery Import Build\r\n\r\n使用打开（settings.base_dir /“ mail / tokyo”，“ rb”）作为token：\r\n    凭据= pickle.load（token）\r\nservice = build（“ gmail”，“ v1”，recertentials = self.credentials）\r\n＃settings.pubsub_topic具有一个值，例如project/{project_name}  -  {project_id}/topics/{topic_name}。\r\nservice.users（）。观看（userId =“ me”，body = {“ labelids”：[“ inbox”]，“ topicname”：settings.pubsub_topic}）。execute（）\r\n````````\r\n\r\n---\r\n\r\n⑨设置回调功能并订阅\r\n\r\n---\r\n\r\n````py\r\n来自Google.cloud.pubsub_v1导入订户\r\n\r\n＃settings.pubsub_subscription包含诸如project/{project_name}  -  {project_id}/subpcriptions/{topic_name}之类的值。\r\nsubscriperClient（recertentials =凭据）.subscript（settings.pubsub_subscription，callback = callback）\r\n````````\r\n\r\n---\r\n\r\n⑩通过订阅获得的数据是以下格式。\r\nhttps://developers.google.com/gmail/api/guides/push#receiving_notifications\r\n\r\n重要的是要注意，“ messageID”与Gmail ID无关。\r\n\r\n⑪获得基于历史ID的消息\r\n\r\n如果您使用步骤10中获得的历史ID，则由于使用StarthistoryId查询的便利性，您可能无法获得它。因此，如果不存在以前的值，则必须在使用`user.watch'时使用historyID。\r\n\r\n---\r\n\r\n````py\r\n历史= service.users（）。history（）。列表（userId =“ me”，historyTypes = [“ messageaded”]，labelid =“ inbox”，starthistoryId = past_history_id）.execute（num_retries = 5）\r\nmessage_id =历史[“历史”] [0] [messagesAdded“] [0] [message] [id“]\r\nmessages = self.service.users（）。消息（）。get（userId =“ me”，id = message_id）.execute（num_retrees = 5）\r\n````````\r\n\r\n---\r\n\r\n⑫由于该消息已在步骤12中获得，因此我们将通知Slack并将其保存到DB。\r\n\r\n由于文本是在base64中编码的，因此请通过`base64.urlsafe_b64decode`处理。\r\n\r\n＃＃＃ 笔记\r\n\r\n - 不将身份验证信息上传到GITHUB等，以处理GCP访问权限。\r\n必须定期执行``user.watch'。我认为最好用Oferia或Cron执行定期执行。\r\n\r\n###一般评论\r\n\r\n有许多更简单的方法可以将电子邮件倒入Slack中，但是我认为如果您想插入其他流程并将电子邮件信息累积在易于 - 使用db。RiceField中，这很有用。\r\n\r\n我很难过，因为日本材料几乎没有滚动，但是我很高兴能将其带到一天之内的Slackbot。", "reactions": {"url": "https://api.github.com/repos/kemu3007/portal/issues/10/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/10/timeline", "performed_via_github_app": null, "state_reason": null}