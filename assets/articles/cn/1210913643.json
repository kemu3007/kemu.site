{"url": "https://api.github.com/repos/kemu3007/portal/issues/34", "repository_url": "https://api.github.com/repos/kemu3007/portal", "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/34/comments", "events_url": "https://api.github.com/repos/kemu3007/portal/issues/34/events", "html_url": "https://github.com/kemu3007/portal/issues/34", "id": 1210913643, "node_id": "I_kwDOG7qoq85ILRNr", "number": 34, "title": "使用Django JWT身份验证", "user": {"login": "kemu3007", "id": 29157528, "node_id": "MDQ6VXNlcjI5MTU3NTI4", "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kemu3007", "html_url": "https://github.com/kemu3007", "followers_url": "https://api.github.com/users/kemu3007/followers", "following_url": "https://api.github.com/users/kemu3007/following{/other_user}", "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}", "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions", "organizations_url": "https://api.github.com/users/kemu3007/orgs", "repos_url": "https://api.github.com/users/kemu3007/repos", "events_url": "https://api.github.com/users/kemu3007/events{/privacy}", "received_events_url": "https://api.github.com/users/kemu3007/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3898939400, "node_id": "LA_kwDOG7qoq87oZRgI", "url": "https://api.github.com/repos/kemu3007/portal/labels/article", "name": "article", "color": "C200E5", "default": false, "description": ""}, {"id": 3900075763, "node_id": "LA_kwDOG7qoq87odm7z", "url": "https://api.github.com/repos/kemu3007/portal/labels/Django", "name": "Django", "color": "5FC353", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-04-21T11:40:05Z", "updated_at": "2022-04-22T09:48:26Z", "closed_at": null, "author_association": "OWNER", "active_lock_reason": null, "body": "＃＃ 介绍\r\n\r\n- 安装\r\n\r\n````ZSH\r\n$ pip安装djangorestframework djangorestframework-simplejwt\r\n````````\r\n\r\n-settings.py\r\n\r\n``python\r\ninported_apps = [\r\n    ...\r\n    “ REST_FRAMEWORK”，\r\n    “ REST_FRAMEWORK_SIMPLEJWT”，\r\n这是给予的\r\nREST_FRAMEWORK = {\r\n    ...\r\n    “ default_authentication_classes”：（\r\n        ...\r\n        “ Rest_framework_simplejwt.authentication.jwtauthentication”，\r\n    ）\r\n}\r\n````````\r\n\r\n-urls.py\r\n\r\n - 对于基本的API视图，暂时介绍了\r\n-tokenobtainpairview`：代币的生产\r\n-tokenrefreshview`：令牌重新发行\r\n-tokenverifyview`：令牌的有效性\r\n - 此外，还可以使用黑名单。\r\n\r\n``python\r\n从django.urls导入，包括路径\r\n来自REST_FRAMEWORK_SIMPLEJWT.VIEWS导入导入TokenoBtainPairView，Tokenrefreshview，tokenverifyview\r\n\r\njwt_urls = [\r\n    路径（“”，tokenobtainpairview.as_view（）），\r\n    路径（“ refresh/”，tokenrefreshview.as_view（）），\r\n    路径（“ verify/”，tokenverifyview.as_view（）），\r\n这是给予的\r\n\r\nurlpatterns = [\r\n    路径（“ token/”，include（jwt_urls））\r\n这是给予的\r\n````````\r\n\r\n##操作确认\r\n\r\n###发行令牌\r\n\r\n适当地创建用户，然后将用户名和密码发布到``令牌/'\r\n\r\n-回复\r\n`Access'是授权的代币：使用API​​时{AccessKey}`\r\n - “ refresh”是为重新发行访问令牌的令牌\r\n\r\n``JSON\r\n{\r\n    \"refresh\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY1MDYyNTc2MiwiaWF0IjoxNjUwNTM5MzYyLCJqdGkiOiJmYjg3M2QzY2RjZTc0YTYzYmQ3ZTQ1OTQ5YjdiN2MxOSIsInVzZXJfaWQiOjJ9.8djfRV1zYHUyVFp5gelG2pTWWmT_QE1gqlLQLb1A2rw\",\r\n    \"access\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjUwNTM5NjYyLCJpYXQiOjE2NTA1MzkzNjIsImp0aSI6ImI4NDU0YTdiMDM3YzRhOWRiMmRjYWRmNTMwMjkwNDMxIiwidXNlcl9pZCI6Mn0.TwIRKSO-Pi6ZZMrJ10DOHTrdVoZtLRasB9vjvdBANIQ\"\r\n}\r\n````````\r\n\r\n###刷新令牌\r\n\r\n在上一个过程中获得“刷新”令牌的“刷新”令牌，以“东京/刷新/``\r\n\r\n-回复\r\n\r\n``JSON\r\n{\r\n    \"access\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjUwNTM5OTMwLCJpYXQiOjE2NTA1MzkzNjIsImp0aSI6IjQ2YzI2OThmOTFmYjQ0ZjY5OWVkNzk4NTY1MmY5MGNmIiwidXNlcl9pZCI6Mn0.IsNvx4DFhZoeW48fShWpwNRoO7_JZ69ws-1XhGuDx3I\"\r\n}\r\n````````\r\n\r\n###有效确认令牌\r\n\r\n将令牌发布到`token/verify/``''\r\n\r\n-回复\r\n   - 仅返回200个\r\n   - 访问令牌和刷新令牌可以确认是有效的\r\n   - 即使默认情况下将令牌刷新，如果在到期日内刷新之前的令牌，则可以使用它。\r\n     - 我需要制作`blacklist_after_rotation` true\r\n   - 默认值可以创建与一个用户链接的多个令牌，因此似乎需要根据安全性进行调整。\r\n     - 需要确认该方法（我认为这似乎是一种设置）\r\n\r\n``JSON\r\n{}\r\n````````\r\n\r\n###给出一个令牌以访问需要登录的页面\r\n - `curl`\r\n\r\n````bash\r\n$ curl localhost：8080/api/v1/user/-h“授权：bearer {accessKey}”\r\n````````\r\n\r\n - “ REST_FRAMEWORK.TEST.APICLIENT”\r\n\r\n``python\r\nclient = apiclient（）。凭据（http_authorization = f“ bearer {accessKey}）\r\nclient.get（“ localhost：8080/api/v1/user/”）\r\n````````\r\n\r\n如果令牌有效，则如果有欺诈性，将返回200个。\r\n\r\n＃＃ 在最后\r\n\r\n令牌身份验证易于使用，而不必担心CORS，但是在安全性方面，我感到有些可怕。\r\n我应该在哪里有一个令牌http http只有cookie？localstorage/sessionstorage？\r\n\r\n有必要回应令牌被盗并设置功能/到期日期的事实。\r\n\r\n此代码：https：//github.com/kemu3007/django-jwt-sample", "reactions": {"url": "https://api.github.com/repos/kemu3007/portal/issues/34/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/34/timeline", "performed_via_github_app": null, "state_reason": null}