{"url": "https://api.github.com/repos/kemu3007/portal/issues/7", "repository_url": "https://api.github.com/repos/kemu3007/portal", "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/7/comments", "events_url": "https://api.github.com/repos/kemu3007/portal/issues/7/events", "html_url": "https://github.com/kemu3007/portal/issues/7", "id": 1160543074, "node_id": "I_kwDOG7qoq85FLHti", "number": 7, "title": "Type safeにAngularのformを扱う", "user": {"login": "kemu3007", "id": 29157528, "node_id": "MDQ6VXNlcjI5MTU3NTI4", "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kemu3007", "html_url": "https://github.com/kemu3007", "followers_url": "https://api.github.com/users/kemu3007/followers", "following_url": "https://api.github.com/users/kemu3007/following{/other_user}", "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}", "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions", "organizations_url": "https://api.github.com/users/kemu3007/orgs", "repos_url": "https://api.github.com/users/kemu3007/repos", "events_url": "https://api.github.com/users/kemu3007/events{/privacy}", "received_events_url": "https://api.github.com/users/kemu3007/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3898939400, "node_id": "LA_kwDOG7qoq87oZRgI", "url": "https://api.github.com/repos/kemu3007/portal/labels/article", "name": "article", "color": "C200E5", "default": false, "description": ""}, {"id": 3900074882, "node_id": "LA_kwDOG7qoq87odmuC", "url": "https://api.github.com/repos/kemu3007/portal/labels/Angular", "name": "Angular", "color": "D93F0B", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-03-06T07:45:35Z", "updated_at": "2022-03-26T09:31:18Z", "closed_at": null, "author_association": "OWNER", "active_lock_reason": null, "body": "@ngneat/reactive-formsを利用するとtype safeにformを書くことができます。\r\n\r\n---\r\n#### 通常のAngularのform\r\n\r\n```ts\r\nimport { FormBuilder } from '@angular/forms';\r\n\r\nconstructor(private fb: FormBuilder){}\r\n\r\nform = this.fb.group({\r\n    firstName: '',\r\n    lastName: ''\r\n})\r\n```\r\n通常のAngularのformでは`form.controls`を参照した際の型は`{[key: string]: AbstractControl;}`です。そのため、`form.controls.firstName`と参照した場合、型システム上`firstName`が存在しているのかわからないということになります。\r\n\r\nまた、`form.valueChanges.subscribe(value => )`とした際のvalueの型は`any`となります。\r\n\r\n---\r\n#### @ngneat/reactive-forms\r\n```ts\r\nimport { FormBuilder, FormGroup, ControlsOf } from '@ngneat/reactive-forms';\r\n\r\nconstructor(private nfb: FormBuilder){}\r\n\r\ninterface sampleForm {\r\n  firstName: string;\r\n  lastName: string;\r\n}\r\n\r\nneatForm = this.nfb.group<sampleForm>({\r\n  firstName: \"\",\r\n  lastName: \"\"\r\n})\r\n\r\nneatForm = new FormGroup<ControlsOf<sampleForm>>({\r\n  firstName: new FormControl(\"\"),\r\n  lastName: new FormControl(\"\")\r\n})\r\n```\r\n@ngneat/reactive-formsを利用した場合上記のようなコードになります。  \r\n`sampleForm`でフォーム項目をinterfaceとして定義することで`group({})`内のコードを書く際にもintellisenseが働き、ヒューマンエラーを防ぐことができます。\r\n\r\nこの場合の`neatForm.controls`の型は`GroupResolverFormBuilder<sampleForm>`となり、`neatForm.controls.firstName`と直接参照してもエラーが発生しません。\r\n\r\n`form.valueChanges.subscribe(value => )`とした際、valueの型は`ValuesOf<GroupResolverFormBuilder<sampleForm>>`となり、type safeに参照を行うことができます。\r\n\r\nまた、テンプレート側で以下のように記述する際にも`formControlName`に対してintellisenseが働きます。:sugoine:\r\n\r\n```html\r\n<form [formGroup]=\"form\">\r\n  <input formControlName=\"firstName\" />\r\n  <input formControlName=\"lastName\" />\r\n</form>\r\n```\r\n\r\n注意点としてはFormBuilderに関しては完全にサポートされていないようです。また、初期値はnullが入るけれど`Validators.required` があるためformがvalidな場合はnon nullなどといった型推論も不可能なため気をつける必要があります。\r\n\r\n---\r\n\r\n#### @ngneat/reactive-forms 便利機能\r\n\r\n- `value$`  \r\n\r\n`formGroup`の`valueChanges`を利用した際、disabledなcontrol、フォーム生成時の値はstreamに流れてこないという特徴があります。  \r\n`value$`をsubscribeするとrawValue、つまりdisableなcontrolの値も流れ、生成時の値も流れてきます。\r\n\r\n- `persistControl`  \r\n\r\n```ts\r\n{ persistControl } from '@ngneat/reactive-forms'\r\n\r\npersistControl(this.neatForm, \"neatForm\", {}).subscribe()\r\n```\r\n\r\n自動的にストレージにフォームの値を保存し、再描画されたタイミングでフォームに値をいれてくれます。\r\n自分でsessionStorageなどに独自実装しなくてよいのがとても楽です。\r\n\r\n---\r\n\r\n[@ngneat/reactive-forms](https://github.com/ngneat/reactive-forms)\r\n\r\n今回のコードは[こちら](https://github.com/kemu3007/ngneat-reactive_forms-test/blob/master/test/src/app/app.component.ts)", "reactions": {"url": "https://api.github.com/repos/kemu3007/portal/issues/7/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/7/timeline", "performed_via_github_app": null, "state_reason": null}