{"url": "https://api.github.com/repos/kemu3007/portal/issues/68", "repository_url": "https://api.github.com/repos/kemu3007/portal", "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/68/labels{/name}", "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/68/comments", "events_url": "https://api.github.com/repos/kemu3007/portal/issues/68/events", "html_url": "https://github.com/kemu3007/portal/issues/68", "id": 1890360188, "node_id": "I_kwDOG7qoq85wrJt8", "number": 68, "title": "サーバーレスに ChatGPT Discord Bot を作成する", "user": {"login": "kemu3007", "id": 29157528, "node_id": "MDQ6VXNlcjI5MTU3NTI4", "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kemu3007", "html_url": "https://github.com/kemu3007", "followers_url": "https://api.github.com/users/kemu3007/followers", "following_url": "https://api.github.com/users/kemu3007/following{/other_user}", "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}", "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions", "organizations_url": "https://api.github.com/users/kemu3007/orgs", "repos_url": "https://api.github.com/users/kemu3007/repos", "events_url": "https://api.github.com/users/kemu3007/events{/privacy}", "received_events_url": "https://api.github.com/users/kemu3007/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3898939400, "node_id": "LA_kwDOG7qoq87oZRgI", "url": "https://api.github.com/repos/kemu3007/portal/labels/article", "name": "article", "color": "C200E5", "default": false, "description": ""}, {"id": 3900078597, "node_id": "LA_kwDOG7qoq87odnoF", "url": "https://api.github.com/repos/kemu3007/portal/labels/Python", "name": "Python", "color": "1D76DB", "default": false, "description": ""}, {"id": 3951278401, "node_id": "LA_kwDOG7qoq87rg7lB", "url": "https://api.github.com/repos/kemu3007/portal/labels/AWS", "name": "AWS", "color": "EE0471", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2023-09-11T12:04:34Z", "updated_at": "2023-09-11T12:04:59Z", "closed_at": null, "author_association": "OWNER", "active_lock_reason": null, "body": "Discord にて Slash Command 実行時に Lambda 関数へアクセスし、OpenAI API を叩く Bot を作成します。\r\n今回は Lambda を利用しているため、サーバー上で Discord Bot を常時待機状態にする必要がありません。\r\n\r\n<img width=\"967\" alt=\"スクリーンショット 2023-09-11 21 00 35\" src=\"https://github.com/kemu3007/portal/assets/29157528/ecf8ae7d-dd4a-4ef2-a072-a5020654bbfb\">\r\n\r\n## Bot フロー\r\n\r\n1. Discord 上でユーザーにより Slash Command が実行\r\n2. Discord Interaction Endpoint に登録されたエンドポイント (Lambda エンドポイント) へ POST リクエストが送信\r\n3. Lambda 上でヘッダー内の署名を検証し、Discord より正規にリクエストされたものか確認\r\n4. Discord Callback Endpoint へ、一旦 ack を送信\r\n5. OpenAI API を叩き、レスポンス内容を作成、Discord Followup Endpoint へリクエスト\r\n\r\n## Discord Slash Command の登録\r\n\r\n`applications/{app_id}/guilds/{guild_id}/commands` へ POST しコマンドを送信します。\r\n※ 事前に Command 追加が可能な権限について Developper Portal から認可しておく必要があります。\r\n\r\nhttps://discord.com/developers/docs/interactions/application-commands#making-a-guild-command\r\n\r\n```python\r\nimport json\r\nimport os\r\n\r\nimport requests\r\nfrom dotenv import load_dotenv\r\n\r\nload_dotenv()\r\n\r\napp_id = os.getenv(\"DISCORD_APP_ID\")\r\nguild_id = os.getenv(\"DISCORD_GUILD_ID\")\r\nendpoint_url = (\r\n    f\"https://discord.com/api/v8/applications/{app_id}/guilds/{guild_id}/commands\"\r\n)\r\nbot_token = os.getenv(\"DISCORD_BOT_TOKEN\")\r\n\r\npayload = {\r\n    \"name\": \"chatgpt\",\r\n    \"description\": \"command for chatgpt\",\r\n    \"options\": [\r\n        {\"name\": \"message\", \"description\": \"message\", \"type\": 3, \"required\": True}\r\n    ],\r\n}\r\n\r\nresponse = requests.post(\r\n    endpoint_url,\r\n    json.dumps(payload),\r\n    headers={\"Authorization\": f\"Bot {bot_token}\", \"Content-Type\": \"application/json\"},\r\n)\r\nprint(response.text)\r\n\r\n```\r\n\r\n## Lambda ソースコード\r\n\r\n```python\r\nimport json\r\nimport os\r\n\r\nimport openai\r\nimport requests\r\nfrom dotenv import load_dotenv\r\nfrom nacl.exceptions import BadSignatureError\r\nfrom nacl.signing import VerifyKey\r\n\r\nload_dotenv()\r\n\r\nDISCORD_APP_ID = os.getenv(\"DISCORD_APP_ID\")\r\n\r\n\r\ndef verify_signature(event):\r\n    try:\r\n        signature = event[\"headers\"][\"x-signature-ed25519\"]\r\n        timestamp = event[\"headers\"][\"x-signature-timestamp\"]\r\n        body = event[\"body\"]\r\n    except KeyError:\r\n        raise Exception(\"Invalid Request\")\r\n    verify_key = VerifyKey(bytes.fromhex(os.getenv(\"DISCORD_PUBLIC_KEY\")))\r\n    verify_key.verify(f\"{timestamp}{body}\".encode(), bytes.fromhex(signature))\r\n\r\n\r\ndef generate_response(body: dict):\r\n    openai.api_key = os.getenv(\"OPENAI_SECRET_KEY\")\r\n    question = body[\"data\"][\"options\"][0][\"value\"]\r\n    openai_response = openai.ChatCompletion.create(\r\n        model=\"gpt-3.5-turbo\",\r\n        messages=[\r\n            {\"role\": \"user\", \"content\": question},\r\n        ],\r\n    )\r\n    message = openai_response[\"choices\"][0][\"message\"][\"content\"].encode().decode()\r\n    print(question, message)\r\n    response = f\"Q. {question}\\nA. {message}\"\r\n    return response\r\n\r\n\r\ndef lambda_handler(event, context):\r\n    request_data = json.loads(event[\"body\"])\r\n    try:\r\n        verify_signature(event)\r\n        callback_url = f\"https://discord.com/api/v10/interactions/{request_data['id']}/{request_data['token']}/callback\"\r\n        print(\r\n            requests.post(\r\n                callback_url,\r\n                json.dumps({\"type\": 5}),\r\n                headers={\"Content-Type\": \"application/json\"},\r\n            ).text\r\n        )\r\n        print(json.dumps(request_data))\r\n        if request_data[\"type\"] == 1:\r\n            return {\"statusCode\": 200, \"body\": {\"type\": 1}}\r\n        followup_url = f\"https://discord.com/api/v10/webhooks/{DISCORD_APP_ID}/{request_data['token']}\"\r\n        print(\r\n            requests.post(\r\n                followup_url,\r\n                json.dumps({\"content\": generate_response(request_data)}),\r\n                headers={\"Content-Type\": \"application/json\"},\r\n            ).text\r\n        )\r\n        return {\r\n            \"statusCode\": 200,\r\n        }\r\n    except BadSignatureError:\r\n        pass\r\n    except Exception as e:\r\n        print(e)\r\n    print(json.dumps(event))\r\n    if request_data[\"type\"] == 1:\r\n        return {\"statusCode\": 405, \"body\": \"Bad Signature\"}\r\n    return {\r\n        \"statusCode\": 200,\r\n        \"body\": json.dumps({\"type\": 4, \"data\": {\"content\": \"ダメみたい...\"}}),\r\n    }\r\n```\r\n\r\n## 所感\r\n\r\n時代遅れ感溢れる Bot 作成でしたが、意外といい感じに作れるもんですね。\r\nOpenAI API の料金も個人利用なら大したものではないですし、Lambda の実行料金もさほど気になりません。\r\n\r\nDiscord の個人サーバーで無駄に叩いてはええとなっている日々\r\n\r\nソースコード及び再利用可能なようデプロイ方法も Github の方に置いてあるので興味のある方は是非ー\r\n\r\nhttps://github.com/kemu3007/chatgpt-func", "reactions": {"url": "https://api.github.com/repos/kemu3007/portal/issues/68/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/68/timeline", "performed_via_github_app": null, "state_reason": null}