{"url": "https://api.github.com/repos/kemu3007/portal/issues/31", "repository_url": "https://api.github.com/repos/kemu3007/portal", "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/31/labels{/name}", "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/31/comments", "events_url": "https://api.github.com/repos/kemu3007/portal/issues/31/events", "html_url": "https://github.com/kemu3007/portal/issues/31", "id": 1206271863, "node_id": "I_kwDOG7qoq85H5j93", "number": 31, "title": "GitHub ActionsとGitHub Pagesで健康管理アプリを作成する", "user": {"login": "kemu3007", "id": 29157528, "node_id": "MDQ6VXNlcjI5MTU3NTI4", "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kemu3007", "html_url": "https://github.com/kemu3007", "followers_url": "https://api.github.com/users/kemu3007/followers", "following_url": "https://api.github.com/users/kemu3007/following{/other_user}", "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}", "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions", "organizations_url": "https://api.github.com/users/kemu3007/orgs", "repos_url": "https://api.github.com/users/kemu3007/repos", "events_url": "https://api.github.com/users/kemu3007/events{/privacy}", "received_events_url": "https://api.github.com/users/kemu3007/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3898939400, "node_id": "LA_kwDOG7qoq87oZRgI", "url": "https://api.github.com/repos/kemu3007/portal/labels/article", "name": "article", "color": "C200E5", "default": false, "description": ""}, {"id": 3972772995, "node_id": "LA_kwDOG7qoq87sy7SD", "url": "https://api.github.com/repos/kemu3007/portal/labels/GitHub", "name": "GitHub", "color": "5866BF", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-04-17T03:44:20Z", "updated_at": "2022-04-26T15:33:27Z", "closed_at": null, "author_association": "OWNER", "active_lock_reason": null, "body": "\r\n## 元々の構想\r\n\r\n- オンラインでどの端末でも確認できる形式にしたいがEC2などを立ててデプロイまではちょっとしたくない。\r\n- データの入力は一日一回。\r\n- 登録するデータは最低血圧, 最高血圧, 脈拍, 脈圧, 体重。\r\n- 日々のデータをチャートでわかりやすく表示。\r\n\r\n## アプリケーション仕様\r\n\r\n- データは一日一回 GitHub Actionsを利用して入力する。\r\n- GitHub Actions上でデータをJSON形式で保存し、レポジトリにpushする。\r\n- 配信はGitHub Pagesを利用し、Chart.jsでデータを可視化する。\r\n\r\n## アプリケーション構成\r\n<img width=\"752\" alt=\"スクリーンショット 2022-04-17 12 17 04\" src=\"https://user-images.githubusercontent.com/29157528/163698719-2141b3d6-b45f-435a-bab0-8e92e5bc6cc2.png\">\r\n\r\n## GitHub Actionsでデータを入力する\r\n\r\n以下のyml形式でGitHub Actionsに任意の値を入れることができます。\r\n\r\n```yml\r\nname: write-data\r\n\r\non:\r\n  workflow_dispatch:\r\n    inputs:\r\n      blood_min:\r\n        default: 0\r\n        required: true\r\n      blood_max:\r\n        default: 0\r\n        required: true\r\n      heart_rate:\r\n        default: 0\r\n        required: true\r\n      heart_pulse:\r\n        default: 0\r\n        required: true\r\n      weight:\r\n        default: 0\r\n        required: true\r\n```\r\n実際のUIは以下の通り\r\n\r\n<img width=\"257\" alt=\"スクリーンショット 2022-04-17 12 25 14\" src=\"https://user-images.githubusercontent.com/29157528/163698957-6fc1b74e-f799-4823-ad85-68f96edc211d.png\">\r\n\r\n入力値は `{{ github.event.inputs.blood_min }}` という形式で利用することができます。\r\n\r\n## データをJSON形式で保存する\r\n\r\nデータをJavaScriptで読みやすくするため、GitHub Actionsに渡した値をPythonスクリプトで加工します。(サンプルコードはZoneInfoを利用しているため、Python3.9以降を利用する必要があります。)\r\n\r\n```python\r\nimport argparse\r\nfrom datetime import datetime\r\nimport json\r\nfrom pathlib import Path\r\nfrom zoneinfo import ZoneInfo\r\n\r\n\r\nparser = argparse.ArgumentParser()\r\n\r\nparser.add_argument(\"blood_min\", type=int)\r\nparser.add_argument(\"blood_max\", type=int)\r\nparser.add_argument(\"heart_rate\", type=int)\r\nparser.add_argument(\"heart_pulse\", type=int)\r\nparser.add_argument(\"weight\", type=float)\r\n\r\n\r\nblood_json = Path(\"docs/blood.json\")\r\nweight_json = Path(\"docs/weight.json\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    today = datetime.now(ZoneInfo(\"Asia/Tokyo\")).date()\r\n    arguments = parser.parse_args()\r\n    blood = json.loads(blood_json.read_text())\r\n    blood[str(today)] = {\r\n        \"min\": arguments.blood_min,\r\n        \"max\": arguments.blood_max,\r\n        \"heart_rate\": arguments.heart_rate,\r\n        \"heart_pulse\": arguments.heart_pulse,\r\n    }\r\n    blood_json.write_text(json.dumps(blood))\r\n    weight = json.loads(weight_json.read_text())\r\n    weight[str(today)] = {\"weight\": arguments.weight}\r\n    weight_json.write_text(json.dumps(weight))\r\n``` \r\n\r\n今回はレポジトリmainブランチの `docs/` を配信するため、`docs/blood.json`, `docs/weight.json` を用意し、JSONデータを保存します。\r\n\r\nこれにより、日付と身体データを持ったJSONファイルを配信する準備ができました。\r\n\r\n## JSONデータを可視化する\r\n\r\nJSONそのままの形式では人間が読む際に不都合があるため、グラフ形式に可視化します。\r\n\r\n利用したライブラリは[Chart.js](https://www.chartjs.org/)です。\r\n\r\n### index.html\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"ja\">\r\n  <head>\r\n    <title>Health Logger</title>\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\">\r\n  </head>\r\n  <body>\r\n    <div class=\"container mt-5\">\r\n      <h2>Blood</h2>\r\n      <canvas id=\"blood\" height=\"80px\"></canvas>\r\n      <h2>Weight</h2>\r\n      <canvas id=\"weight\" height=\"80px\"></canvas>\r\n    </div>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js\"></script>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM\" crossorigin=\"anonymous\"></script>\r\n    <script>\r\n      const bloodCtx = document.getElementById(\"blood\").getContext('2d');\r\n      fetch(\"blood.json\").then(response => {\r\n        response.json().then(blood => {\r\n          console.log(blood)\r\n          const bloodChart = new Chart(bloodCtx, {\r\n            type: 'line',\r\n            data: {\r\n              datasets: [\r\n                {\r\n                  label: \"最高血圧\",\r\n                  data: Object.values(blood).map(item => item.max),\r\n                  borderColor: 'rgb(255, 0, 0)'\r\n                },\r\n                {\r\n                  label: \"最低血圧\",\r\n                  data: Object.values(blood).map(item => item.min),\r\n                  borderColor: 'rgb(0, 0, 255)'\r\n                },\r\n                {\r\n                  label: \"脈拍\",\r\n                  data: Object.values(blood).map(item => item.heart_rate),\r\n                  borderColor: 'rgb(255, 0, 255)'\r\n                },\r\n                {\r\n                  label: \"脈圧\",\r\n                  data: Object.values(blood).map(item => item.heart_pulse),\r\n                  borderColor: 'rgb(128, 128, 128)'\r\n                },\r\n              ],\r\n              labels: Object.keys(blood)\r\n            }\r\n          })\r\n        })\r\n      })\r\n      const weightCtx = document.getElementById(\"weight\").getContext('2d');\r\n      fetch(\"weight.json\").then(response => {\r\n        response.json().then(weight => {\r\n          const weightChart = new Chart(weightCtx, {\r\n            type: 'line',\r\n            data: {\r\n              datasets: [{\r\n                label: \"体重\",\r\n                data: Object.values(weight).map(item => item.weight),\r\n                borderColor: 'rgb(0, 0, 0)'\r\n              }],\r\n              labels: Object.keys(weight)\r\n            }\r\n          })\r\n        })\r\n      })\r\n    </script>\r\n  </body>\r\n</html>\r\n```\r\n\r\n同一階層に存在しているJSONファイルを `fetch` で取得します。この際、ローカルで動かす場合CORSで失敗するため、以下のコマンドライン引数を与える必要があります。\r\n\r\n`--allow-file-access-from-files`\r\n\r\nmac OSの場合は以下のコマンドでChromeを終了させてから起動させてください。(Windowsでこの引数の動作確認は行なっていません。)\r\n\r\n動作確認を行ったChrome version: 100.0.4896.127\r\n\r\n```zsh\r\n$ open \"/Applications/Google Chrome.app\" --args --allow-file-access-from-files\r\n```\r\n\r\n## 結果\r\n\r\nこのようにデータの可視化を行うことができます。\r\n\r\n<img width=\"841\" alt=\"スクリーンショット 2022-04-17 12 40 16\" src=\"https://user-images.githubusercontent.com/29157528/163699318-74bcb2b4-951f-4efd-ace8-57bcc1228745.png\">\r\n\r\n## 問題点\r\n\r\nGitHub Pagesを利用する場合、GitHub EnterpriseでなければGitHub Pagesに対する閲覧制限を付与することができません。\r\n\r\nそのため、全世界に公開することになってしまうため、URLの煩雑化、数値以外の個人と紐付ける要素をアップロードしない、Googleにインデックス登録されないようにnoindexメタを追加するなどといった対応が必要です。\r\n\r\nあとモバイルアプリ版からActions起動ができたらいいなという思いがちょっとあります。（現状だとアプリ版だとActions起動できない&Web版はUIが最適化されていないので...API叩くのもトークン管理が面倒なのでなんとかしてくれないかなあ）\r\n\r\n## 最後に\r\n\r\ntemplate repositoryを公開しました。画面右上の`Use this template`を選択して利用してください。\r\n\r\n-> https://github.com/kemu3007/health-logger-template", "reactions": {"url": "https://api.github.com/repos/kemu3007/portal/issues/31/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/31/timeline", "performed_via_github_app": null, "state_reason": null}