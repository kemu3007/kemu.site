{"1160526026": {"title": "Google Adsenseで詰まった話、サイト構成など", "created_at": "2022-03-06T05:51:34Z", "updated_at": "2022-04-04T05:16:06Z", "body": "このサイトの構成は     お名前ドットコム -> Route 53 -> AWS ALB - > AWS EC2     という形になっています。実装当初は     お名前ドットコム -> AWS ALB - > AWS EC2     となっていたのですがadsenseに登録する&ALBの仕様上", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Utils", "color": "170627"}]}, "1160542827": {"title": "Django shortcutsまとめ\t", "created_at": "2022-03-06T07:44:00Z", "updated_at": "2022-03-12T07:59:29Z", "body": "  [django shortcuts]        render       py  def render(request, template_name, context=None, content_type=None, status=None, using=None):      \"\"\"   ", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Django", "color": "5FC353"}]}, "1160542878": {"title": "MarkdownをHTMLに変換/cssを付与する", "created_at": "2022-03-06T07:44:22Z", "updated_at": "2022-03-06T15:21:56Z", "body": "markdownは以下のライブラリを使うことでHTMLに変換可能です。  [Python-Markdown]         install       bash  > pip install markdown             HTMLへの変換       bash  >>> markdow", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Python", "color": "1D76DB"}]}, "1160542944": {"title": "Django4.0がリリースされたので適当に試してみる", "created_at": "2022-03-06T07:44:51Z", "updated_at": "2022-03-12T07:52:04Z", "body": "[release notes]         依存ライブラリ  - Django 3.2       asgiref==3.4.1  pytz==2021.3  sqlparse==0.4.2       - Django4.0       asgiref==3.4.1  backports.zo", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Django", "color": "5FC353"}]}, "1160543028": {"title": "Django Adminを自動生成する", "created_at": "2022-03-06T07:45:18Z", "updated_at": "2022-03-06T15:21:16Z", "body": "admin登録忘れてめんどくさいな～ということがあったのでメモ代わりに残しておきます。         便利なタイミング  - Django Adminにそれほど力をいれたくないけれど最低限の機能はほしい  - モデル追加時に admin.site.register を忘れてしまうのでなんとかしたい", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Django", "color": "5FC353"}]}, "1160543074": {"title": "Type safeにAngularのformを扱う", "created_at": "2022-03-06T07:45:35Z", "updated_at": "2022-03-26T09:31:18Z", "body": "@ngneat/reactive-formsを利用するとtype safeにformを書くことができます。    ---       通常のAngularのform       ts  import { FormBuilder } from '@angular/forms';    construc", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Angular", "color": "D93F0B"}]}, "1160543248": {"title": "DRF 紐づくモデルの表示件数を制限する", "created_at": "2022-03-06T07:46:40Z", "updated_at": "2022-03-06T15:20:58Z", "body": "djangoには prefetch_related  という機能が存在しており以下のように記載することで発行されるSQLを抑制することができます。       python  Article.objects.prefetch_related(\"tags\")         と記載することでManyT", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Django", "color": "5FC353"}]}, "1160543297": {"title": "フロントエンドのテストを書く(スナップショットテスト編)", "created_at": "2022-03-06T07:47:02Z", "updated_at": "2022-03-06T15:20:21Z", "body": "    環境  Angular 13, node 16    今回はjestを利用するためデフォルトで入っているKarmaを削除します     sh  npm run ng add @briebug/jest-schematic         参考: https://github.com/brie", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Angular", "color": "D93F0B"}]}, "1160543378": {"title": "Gmail API push notificationを利用する", "created_at": "2022-03-06T07:47:32Z", "updated_at": "2022-03-06T15:19:57Z", "body": "メールにフックして処理を挟むことができるようになります。        環境  - Python 3.10  - google-api-python-client==2.36.0  - google_auth_oauthlib==0.4.6  - google-cloud-pubsub==2.9.0", "labels": [{"name": "article", "color": "C200E5"}, {"name": "GCP", "color": "FBCA04"}]}, "1160543419": {"title": "Nuxtでキャッシュとうまくやる", "created_at": "2022-03-06T07:47:51Z", "updated_at": "2022-03-06T15:19:29Z", "body": "自動的に現在のコードが最新かどうかチェックし、キャッシュの更新を行います。         検証環境  - Nuxt: 2.15.8  - @nuxtjs/pwa: 3.3.5         コード   nuxt.config.js        js  {    plugins: ['plugi", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Nuxt", "color": "0E8A16"}]}, "1160653032": {"title": "GitHub ActionとPagesでブログを作る", "created_at": "2022-03-06T16:25:06Z", "updated_at": "2022-03-06T23:44:03Z", "body": "   環境  - npm v8.3.1  - node: v16.14.0  - Angular: v13.2.5  - @ng-bootstrap/ng-bootstrap: 12.0.0    ※  npm run ng add @ng-bootstrap/ng-bootstrap  が失敗する", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Angular", "color": "D93F0B"}]}, "1167241988": {"title": "GitHub PagesでデプロイしたSPAにOGPを表示させる(気合)", "created_at": "2022-03-12T09:56:24Z", "updated_at": "2022-03-12T14:33:09Z", "body": "通常SPAをデプロイさせた場合、twitterなどでOGPが表示されません。    これはOGPを取得するbotがjsを実行しないこと、それとSPAのため該当するリンク先に静的なHTMLファイルが存在していないことが原因です。    そのため、通常はlambda等を利用しbot用のページ表示、それ以", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Angular", "color": "D93F0B"}]}, "1167568913": {"title": "Google AdsenseをAngularで利用する", "created_at": "2022-03-13T12:39:35Z", "updated_at": "2022-03-13T15:28:08Z", "body": "通常のSSRではGoogle Adsense用の自動広告スクリプトを  <head></head>  内に記載するだけで広告を配信し、収益化させることが可能です。    ただし、SPAの場合自動広告のみを利用するとページ遷移によるリロードが発生しないため、ページ下部の固定広告のみになってしまうなど表", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Angular", "color": "D93F0B"}]}, "1169430844": {"title": "Django Rest Framework OpenAPIドキュメントを起こす", "created_at": "2022-03-15T09:53:45Z", "updated_at": "2022-03-28T12:45:19Z", "body": "APIからOpenAPIドキュメントを生成する機会があったのでメモ    DRF自体に  generateschema  というコマンドが存在しているため       zsh  $ python manage.py generateschema > schema.yml         と実行するだ", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Django", "color": "5FC353"}]}, "1169514542": {"title": "Angular component内にscriptタグを設置する", "created_at": "2022-03-15T10:57:47Z", "updated_at": "2022-03-15T10:57:47Z", "body": "scriptタグを  src/index.html  以外に設置した場合、自動的に取り除く挙動を示します。    参考: [angular/angular 4903]     そのため、例えば[Twitter Publish] で取得できるようなボタンを設置した際、ツイートボタンのcssが当たらない", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Angular", "color": "D93F0B"}]}, "1170873471": {"title": "Angular よく書くコード/ライブラリ置き場", "created_at": "2022-03-16T11:09:50Z", "updated_at": "2022-04-03T10:02:58Z", "body": "    ライブラリ  - [@ngneat/reactive-forms]     - 型安全にformGroupを記載    - フォームの入力内容をsession storageに保存しリロードされたタイミング等で保存/ロード    - [@datorama/akita]     - 状態管理ラ", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Angular", "color": "D93F0B"}]}, "1174254849": {"title": "Angular 状態管理を行う @ngneat/elf ", "created_at": "2022-03-19T12:29:12Z", "updated_at": "2022-03-21T14:07:38Z", "body": "[@datorama/akita] を確認してねという以下の記載があったので動作確認     Elf, a newer state management solution, has been published. We recommend checking it out 🚀     ---     ", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Angular", "color": "D93F0B"}]}, "1174435949": {"title": "サイトの構成について", "created_at": "2022-03-20T04:20:38Z", "updated_at": "2022-03-20T13:42:25Z", "body": "     旧サイト[kemu.site]   <img width=\"834\" alt=\"スクリーンショット 2022-03-20 13 11 44\" src=\"https://user- s.githubusercontent.com/29157528/159147797-67a49372-2bf", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Angular", "color": "D93F0B"}, {"name": "Django", "color": "5FC353"}]}, "1174533240": {"title": "Angular reCAPTCHAを利用する", "created_at": "2022-03-20T12:34:43Z", "updated_at": "2022-03-21T12:36:22Z", "body": "reCAPTCHAを用いてbotからのアクセスを防ぐことができるようになります。    通常、reCAPTCHAを利用する場合、scriptタグをHTMLに仕込む必要があります。ただし、index.html上のscriptタグはエスケープされ、消されてしまうため[ng-recaptcha] を利用し", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Angular", "color": "D93F0B"}]}, "1175617296": {"title": "AWS Apex Domainとうまく付き合う", "created_at": "2022-03-21T16:14:23Z", "updated_at": "2022-03-21T16:34:46Z", "body": "サイトをAWS上に置いている場合、ロードバランサにSSL証明書を置き、ターゲットグループにEC2を指定するといった構成がよくある構成として挙げられます。    この構成の場合、ドメインのDNSレコードに通常CNAMEレコードを追加し、ロードバランサのDNS名を記載します。    <img width", "labels": [{"name": "article", "color": "C200E5"}, {"name": "AWS", "color": "EE0471"}]}, "1176713310": {"title": "IP Address Checkerをリリースしました", "created_at": "2022-03-22T12:29:14Z", "updated_at": "2022-03-24T00:44:53Z", "body": "閲覧ユーザのIPアドレス等を確認できる機能をリリースしました。    IPアドレスの収集は行なっておらず、ローカルストレージに前回の記録を残していくだけのため安心してご利用ください。    内部的な構成は以下の通りです。    <img width=\"555\" alt=\"スクリーンショット 2022", "labels": [{"name": "article", "color": "C200E5"}, {"name": "AWS", "color": "EE0471"}]}, "1180653910": {"title": "JSON Typerをリリースしました。", "created_at": "2022-03-25T11:06:44Z", "updated_at": "2022-03-25T11:06:44Z", "body": "JSONデータを読み込ませることでTypeScriptの型を自動生成することができる機能を追加しました。    下記の例のような形でJSONを入力することで生成されます。    リスト型、JSONのキーのエスケープが課題ですがまあ手軽に型を生成したいタイミングでは使いやすいかと思います。    [U", "labels": [{"name": "article", "color": "C200E5"}, {"name": "TypeScript", "color": "bfdadc"}]}, "1182698916": {"title": "GitHub Actionsよく使う設定まとめ", "created_at": "2022-03-27T23:23:38Z", "updated_at": "2022-04-03T10:29:02Z", "body": "   任意のタイミングでテストを回す    pushとpull requestの両方で全てのケースで発火させた場合pull request上で同一の内容のテストが2回発火します。そのためpull requestが作成されたタイミング/pull requestが更新されたタイミング/マージされた(ma", "labels": [{"name": "article", "color": "C200E5"}, {"name": "GitHub", "color": "5866BF"}]}, "1183289291": {"title": "OpenApiのドキュメントから型を自動で生成する", "created_at": "2022-03-28T11:22:17Z", "updated_at": "2022-03-28T14:15:49Z", "body": "以前生成したOpenApiドキュメントから型を生成します。[前回]     型の生成には [@openapitools/openapi-generator-cli] を利用します。       zsh  $ npx @openapitools/openapi-generator-cli genera", "labels": [{"name": "article", "color": "C200E5"}, {"name": "TypeScript", "color": "bfdadc"}]}, "1189790754": {"title": "marked.jsとhighlight.jsでGitHub Flavored Markdownを扱う", "created_at": "2022-04-01T13:22:10Z", "updated_at": "2022-04-03T05:01:14Z", "body": "GitHub上で扱っているMarkdownの正式名称はGitHub Flavored Markdownと言われ、デフォルトのMarkdownを拡張した独自記法になっています。    今回はhighlight.jsのGitHub cssを適用してMarkdownテキストをHTMLに変換します。    ", "labels": [{"name": "article", "color": "C200E5"}, {"name": "TypeScript", "color": "bfdadc"}]}, "1189843692": {"title": "Pillow 日本語フォントを利用する", "created_at": "2022-04-01T14:03:37Z", "updated_at": "2022-04-22T10:18:01Z", "body": "ホストOSのフォントに依存しがちなPillowの日本語フォントで他の環境/ランナーでもフォントのダウンロードが必要ない形で実装する方法を紹介します。\r\n", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Python", "color": "1D76DB"}]}, "1191408274": {"title": "テキストエリアタグ内部でのTabキーの動作を管理する", "created_at": "2022-04-04T08:04:13Z", "updated_at": "2022-04-22T10:16:15Z", "body": "アプリケーション作成時にユースケースとして多いテキストエリア内部でのTabキーの動作の管理方法についてAny型で握りつぶすやり方が他サイト等で散見されたため、型に基づいた書き方を紹介します。\r\n", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Angular", "color": "D93F0B"}]}, "1198885661": {"title": "OpenApiドキュメントを可視化する", "created_at": "2022-04-10T05:29:52Z", "updated_at": "2022-04-22T10:14:03Z", "body": "REST APIから出力されるOpenApiファイルを元にCIで自動でドキュメント化し、GitHub Pagesで公開する手法、Swagger, Redocの違いを紹介しています。また、OpenApiファイルから生成されるドキュメントのビューアーを提供しています。\r\n", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Utils", "color": "170627"}]}, "1206271863": {"title": "GitHub ActionsとGitHub Pagesで健康管理アプリを作成する", "created_at": "2022-04-17T03:44:20Z", "updated_at": "2022-04-26T15:33:27Z", "body": "GitHub ActionsとGitHub Pagesを組み合わせてユーザ入力フィールドを作成し、日々の健康データをグラフで表示することができるようにしたのでそのやり方と導入方法を紹介します。\r\n", "labels": [{"name": "article", "color": "C200E5"}, {"name": "GitHub", "color": "5866BF"}]}, "1206344475": {"title": "Djangoプロジェクトをカスタムテンプレートから作成する", "created_at": "2022-04-17T10:58:05Z", "updated_at": "2022-04-22T09:47:41Z", "body": "いつも使うDjangoの構成をまとめたテンプレートレポジトリを作成したので使い方の紹介です。デフォルトでflake8, mypy, black, isortの設定を行なっており、CIではコードの静的チェック、テストの実行を行うようにしています。\r\n", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Django", "color": "5FC353"}]}, "1206789196": {"title": "Graphene Django Graphql ドキュメントを生成する", "created_at": "2022-04-18T07:59:27Z", "updated_at": "2022-04-25T13:58:19Z", "body": "Grapnene-Djangoを利用したプロジェクトでGraphql スキーマの出力、出力される情報の確認、出力されたスキーマからの自動ドキュメント生成を行います。生成したドキュメントはCIからGitHub Pagesにデプロイしています。\r\n", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Django", "color": "5FC353"}]}, "1210913643": {"title": "Django JWT認証を利用する", "created_at": "2022-04-21T11:40:05Z", "updated_at": "2022-04-22T09:48:26Z", "body": "Django Rest Framework, SimpleJWTのライブラリ動作確認を行ったのでそのメモ書き。トークンの作成 -> トークンの有効性検証 -> トークンの再発行処理 -> トークンを用いたログイン必須ページへのアクセス方法の確認を行っています。\r\n", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Django", "color": "5FC353"}]}, "1215117235": {"title": "RSSの作成 / Chrome Web Feederの動作確認", "created_at": "2022-04-25T22:32:58Z", "updated_at": "2022-04-25T22:41:11Z", "body": "AndroidのChrome 94~にRSS Feeder機能がいつの間にか帰ってきていたのでRSSを作成、配信して見え方のテストを行いました。\r\n", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Python", "color": "1D76DB"}]}, "1217467340": {"title": "MacOS Windowsインストールメディアの作成", "created_at": "2022-04-27T14:46:54Z", "updated_at": "2022-04-28T06:23:51Z", "body": " 手持ちのM1 Macでwindows10のboot mediaを作るタイミングがあったので作成方法を紹介します。\r\n", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Utils", "color": "170627"}]}, "1223579698": {"title": "Pyodide JavaScriptからPythonスクリプトを実行する", "created_at": "2022-05-03T02:57:37Z", "updated_at": "2022-05-05T01:04:38Z", "body": "PyCon US 2022でPyScriptについての発表があったので流れに乗り、とりあえずPyodideを手元で触ったので紹介します。\r\n", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Python", "color": "1D76DB"}]}, "1227975608": {"title": "Cloudflare Pages 認証されたユーザにのみページを表示する", "created_at": "2022-05-06T14:59:25Z", "updated_at": "2022-05-06T15:19:57Z", "body": "GitHub Pagesで静的サイトをホストし、バックエンドを保持しない場合、ユーザ認証をかけることができないためCloudflare Pagesでデプロイを行い、Cloudflare Accessで認証を行い通過したユーザのみサイトを閲覧できるようにします。\r\n", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Utils", "color": "170627"}]}, "1228774700": {"title": "MacOS Clamavでウイルススキャンを行う", "created_at": "2022-05-08T02:31:49Z", "updated_at": "2022-05-08T03:19:55Z", "body": "Clamavを常駐させたくはないが定期的にフルスキャンをかけて安全性を担保しておきたいなと思ったのでやり方を紹介します。\r\n", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Utils", "color": "170627"}]}, "1238798339": {"title": "SEOを考えながらSPAをGitHub Pagesにデプロイする", "created_at": "2022-05-17T15:15:57Z", "updated_at": "2022-05-17T16:00:18Z", "body": "GitHub Pages, Cloudflare PagesにサービスにSPAをデプロイする際、SEOの観点から注意しなくてはいけないこと、Angularデプロイのやり方についても説明します。\r\n", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Angular", "color": "D93F0B"}]}, "1239705698": {"title": "Django 4.1 Async View, Async ORMを試す", "created_at": "2022-05-18T09:48:28Z", "updated_at": "2022-05-18T13:36:03Z", "body": "Django4.1alpha1がリリースされていたので新機能&動作の確認を行いました。\r\n", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Django", "color": "5FC353"}]}, "1244192476": {"title": "mermaid.jsをリアルタイム描画する", "created_at": "2022-05-22T08:54:29Z", "updated_at": "2022-05-22T11:54:51Z", "body": "mermaid.jsを利用したグラフ図を利用したいタイミングが複数回あり、リアルタイム描画方法をまとめ、リアルタイム描画を行うツールを作成しました。\r\n", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Angular", "color": "D93F0B"}]}, "1250315076": {"title": "Angular + Scully Server Side Generate を試す", "created_at": "2022-05-27T04:12:36Z", "updated_at": "2022-06-02T17:34:23Z", "body": "Angular + ScullyでServer Side Generateを行ったのでやり方を共有します。\r\n", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Angular", "color": "D93F0B"}]}, "1251755523": {"title": "Angular Sentry エラートラッキングを行う", "created_at": "2022-05-29T00:46:42Z", "updated_at": "2022-06-02T17:33:40Z", "body": "Angular ApplicationのエラートラッキングとGitHub Actionsによるソースマップ自動アップロード、リリースの作成を行ったのでやり方を紹介します。\r\n", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Angular", "color": "D93F0B"}]}, "1251907198": {"title": "IOS Safari 15.4 リリースされたのでCSS新要素を試す svh, lvh, dvh", "created_at": "2022-05-29T14:40:47Z", "updated_at": "2022-06-02T17:34:04Z", "body": "iPhoneで悩まされてきたURLバーの高さ問題が解決されたようなので新要素を確認します。\r\n", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Utils", "color": "170627"}]}, "1258346492": {"title": "Python オフラインで翻訳を行う argostranslate", "created_at": "2022-06-02T15:27:08Z", "updated_at": "2022-06-02T15:27:08Z", "body": "ブログの多言語対応を行なっている際、argostranslateを利用したオフライン翻訳をおこなったためやり方を共有します。\r\n", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Python", "color": "1D76DB"}]}, "1260904707": {"title": "GraphQL graphene-django n+1問題の対策を行う", "created_at": "2022-06-04T22:26:18Z", "updated_at": "2022-06-04T22:29:44Z", "body": "GraphQLクエリを単純に実装してしまうと他モデルへの参照をフロント側が書いた際にn+1問題が発生してしまいます。その際の対応を記載します。\r\n", "labels": [{"name": "article", "color": "C200E5"}, {"name": "Django", "color": "5FC353"}]}}