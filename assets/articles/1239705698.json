{"url": "https://api.github.com/repos/kemu3007/portal/issues/45", "repository_url": "https://api.github.com/repos/kemu3007/portal", "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/45/labels{/name}", "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/45/comments", "events_url": "https://api.github.com/repos/kemu3007/portal/issues/45/events", "html_url": "https://github.com/kemu3007/portal/issues/45", "id": 1239705698, "node_id": "I_kwDOG7qoq85J5Ghi", "number": 45, "title": "Django 4.1 Async View, Async ORMを試す", "user": {"login": "kemu3007", "id": 29157528, "node_id": "MDQ6VXNlcjI5MTU3NTI4", "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kemu3007", "html_url": "https://github.com/kemu3007", "followers_url": "https://api.github.com/users/kemu3007/followers", "following_url": "https://api.github.com/users/kemu3007/following{/other_user}", "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}", "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions", "organizations_url": "https://api.github.com/users/kemu3007/orgs", "repos_url": "https://api.github.com/users/kemu3007/repos", "events_url": "https://api.github.com/users/kemu3007/events{/privacy}", "received_events_url": "https://api.github.com/users/kemu3007/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3898939400, "node_id": "LA_kwDOG7qoq87oZRgI", "url": "https://api.github.com/repos/kemu3007/portal/labels/article", "name": "article", "color": "C200E5", "default": false, "description": ""}, {"id": 3900075763, "node_id": "LA_kwDOG7qoq87odm7z", "url": "https://api.github.com/repos/kemu3007/portal/labels/Django", "name": "Django", "color": "5FC353", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-05-18T09:48:28Z", "updated_at": "2022-05-18T13:36:03Z", "closed_at": null, "author_association": "OWNER", "active_lock_reason": null, "body": "\r\nDjango4.1alpha1がリリースされていたので新機能&動作の確認を行いました。\r\n\r\n[Django 4.1 alpha 1 released](https://www.djangoproject.com/weblog/2022/may/18/django-41-alpha-1-released/)\r\n[Django 4.1 release note](https://docs.djangoproject.com/en/dev/releases/4.1/)\r\n\r\nDjango4.1での注目点は以下の2つです。\r\n\r\n- Asynchronous handlers for class-based views\r\n- Asynchronous ORM interface\r\n\r\n\r\n## introduction\r\n```bash\r\n$ pip install \"Django==4.1a1\"\r\n```\r\n\r\n## 依存関係の確認\r\n依存関係はDjango3.2の時と差異ありません。（pytzが消えたくらい）\r\n```text\r\nasgiref==3.5.2\r\nDjango==4.1a1\r\nsqlparse==0.4.2\r\n```\r\n\r\n\r\n## Asynchronous handlers for class-based views\r\n1秒後にレスポンスを返却するビュー、特にasyncioを利用する意味はないが公式であったため紹介。\r\n\r\n```python\r\nimport asyncio\r\nfrom django.http import HttpResponse\r\nfrom django.views import View\r\n\r\n\r\nclass AsyncView(View):\r\n    async def get(self, request, *args, **kwargs):\r\n        \"\"\"1秒待機後にレスポンスを返却する\"\"\"\r\n        await asyncio.sleep(1)\r\n        return HttpResponse(\"Hello World\")\r\n```\r\n\r\n## Asynchronous ORM interface\r\n- `django/db/models/query.py` を見ると以下の新規関数が存在している。\r\n- 実装を見るとasgirefの `asgiref/sync/sync_to_async` を利用して同期関数を非同期にしています。\r\n\r\n```text\r\naiterator\r\naaggregate\r\nacount\r\naget\r\nacreate\r\nabulk_create\r\nabulk_update\r\naget_or_create\r\naupdate_or_create\r\naearliest\r\nalatest\r\nafirst\r\nalast\r\nain_bulk\r\nadelete\r\naupdate\r\naexists\r\nacontains\r\naexplain\r\n```\r\n\r\n## 非同期動作の確認\r\n通常の同期処理が行われた場合は以下の手順で処理が進む。\r\n\r\nクエリAをDBに投げる -> クエリAの結果が返ってくる -> クエリBをDBに投げる -> クエリBの結果が返ってくる\r\n\r\n非同期動作が実現されている場合、以下のような動作が期待される。\r\n\r\nクエリAをDBに投げる -> クエリBをDBに投げる -> クエリAの結果が返ってくる -> クエリBの結果が返ってくる\r\n\r\n\r\n```py\r\nimport asyncio\r\nimport time\r\n\r\nfrom django.contrib.auth.models import User\r\nfrom django.contrib.sessions.models import Session\r\nfrom django.http import HttpResponse\r\nfrom django.views import View\r\nfrom model_bakery import baker\r\n\r\ndef bulk_create(process: str, model, instances):\r\n    start = time.time()\r\n    print(f\"sync start_create {process}\")\r\n    model.objects.bulk_create(instances)\r\n    print(f\"sync   end_agg {process} {time.time() - start}\")\r\n\r\n\r\nclass SyncGetView(View):\r\n    def get(self, request, *args, **kwargs):\r\n        users = baker.prepare(User, _quantity=3000)\r\n        sessions = baker.prepare(Session, _quantity=3000)\r\n        start = time.time()\r\n        bulk_create(\"user\", User, users)\r\n        bulk_create(\"session\", Session, sessions)\r\n        end = time.time()\r\n        return HttpResponse(f\"{end - start}\")\r\n\r\n\r\nasync def abulk_create(process: str, model, instances):\r\n    start = time.time()\r\n    print(f\"async start_create {process}\")\r\n    await model.objects.abulk_create(instances)\r\n    print(f\"async   end_agg {process} {time.time() - start}\")\r\n\r\n\r\nclass AsyncGetView(View):\r\n    async def get(self, request, *args, **kwargs):\r\n        users = baker.prepare(User, _quantity=3000)\r\n        sessions = baker.prepare(Session, _quantity=3000)\r\n        start = time.time()\r\n        await asyncio.gather(abulk_create(\"user\", User, users), abulk_create(\"session\", Session, sessions))\r\n        end = time.time()\r\n        return HttpResponse(f\"{end - start}\")\r\n```\r\nこのコードで `bulk_create` 、もしくは `abulk_create` の呼び出されたタイミングとかかった時間を計測する。\r\n\r\n### 出力結果\r\n\r\n#### 同期処理\r\n```text\r\ndjango_4_1_sample-web-1  | sync start_create user\r\ndjango_4_1_sample-web-1  | sync   end_create user 1.0495100021362305\r\ndjango_4_1_sample-web-1  | sync start_create session\r\ndjango_4_1_sample-web-1  | sync   end_create session 0.22738051414489746\r\n```\r\n\r\n#### 非同期処理\r\n```text\r\ndjango_4_1_sample-web-1  | async start_create user\r\ndjango_4_1_sample-web-1  | async start_create session\r\ndjango_4_1_sample-web-1  | async   end_create user 0.8275012969970703\r\ndjango_4_1_sample-web-1  | async   end_create session 1.0836100578308105\r\n```\r\n\r\n`start_create` のタイミングから非同期処理が行われていることがわかる。\r\n\r\n計算時間に関しては測ったものの今回利用しているmodel_bakeryで用意されたインスタンスがランダム生成であること、DBを分けていないため後にテストした側はレコード数が異なった状況下であったことからあまり意味がないので無視する。\r\n\r\n\r\n## 今回利用したコード\r\n\r\n[django_4_1_sample](https://github.com/kemu3007/django_4_1_sample)\r\n", "reactions": {"url": "https://api.github.com/repos/kemu3007/portal/issues/45/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/45/timeline", "performed_via_github_app": null}