{"url": "https://api.github.com/repos/kemu3007/portal/issues/18", "repository_url": "https://api.github.com/repos/kemu3007/portal", "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/18/labels{/name}", "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/18/comments", "events_url": "https://api.github.com/repos/kemu3007/portal/issues/18/events", "html_url": "https://github.com/kemu3007/portal/issues/18", "id": 1170873471, "node_id": "I_kwDOG7qoq85Fyhx_", "number": 18, "title": "Angular よく書くコード/ライブラリ置き場", "user": {"login": "kemu3007", "id": 29157528, "node_id": "MDQ6VXNlcjI5MTU3NTI4", "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kemu3007", "html_url": "https://github.com/kemu3007", "followers_url": "https://api.github.com/users/kemu3007/followers", "following_url": "https://api.github.com/users/kemu3007/following{/other_user}", "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}", "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions", "organizations_url": "https://api.github.com/users/kemu3007/orgs", "repos_url": "https://api.github.com/users/kemu3007/repos", "events_url": "https://api.github.com/users/kemu3007/events{/privacy}", "received_events_url": "https://api.github.com/users/kemu3007/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3898939400, "node_id": "LA_kwDOG7qoq87oZRgI", "url": "https://api.github.com/repos/kemu3007/portal/labels/article", "name": "article", "color": "C200E5", "default": false, "description": ""}, {"id": 3900074882, "node_id": "LA_kwDOG7qoq87odmuC", "url": "https://api.github.com/repos/kemu3007/portal/labels/Angular", "name": "Angular", "color": "D93F0B", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-03-16T11:09:50Z", "updated_at": "2022-04-03T10:02:58Z", "closed_at": null, "author_association": "OWNER", "active_lock_reason": null, "body": "### ライブラリ\r\n- [@ngneat/reactive-forms](https://github.com/ngneat/reactive-forms)\r\n  - 型安全にformGroupを記載\r\n  - フォームの入力内容をsession storageに保存しリロードされたタイミング等で保存/ロード\r\n\r\n- [@datorama/akita](https://github.com/datorama/akita)\r\n  - 状態管理ライブラリ、リクエストの結果を非同期で処理する際にsubscribeのネストが深くなりにくいためコードが読みやすくなる\r\n  - ngOnInitでhttpRequest().subscribe()と記載し、ストアから非同期的に値を取得する処理を楽にかける\r\n  - 現在いるページ情報などリロード時に保持してほしい情報をストアに保存し、ロード処理の記載を楽に記載可能\r\n  - ※今サイトを見ると[@ngneat/elf](https://github.com/ngneat/elf)について記載されていたので今度試す\r\n\r\n- [ng2-adsense](https://github.com/scttcper/ng2-adsense)\r\n  - scriptタグをAngularがエスケープするため自前実装するのであればdom操作する必要があるところをやってくれる\r\n\r\n- [ng-recaptcha](https://github.com/DethAriel/ng-recaptcha)\r\n  - botには見てほしくない情報、アクセスを防ぎたい場合に使えるreCAPTCHAを設置可能（サイトキーについてはGCPで作成する必要あり）\r\n\r\n- [@ng-bootstrap/ng-bootstrap](https://github.com/ng-bootstrap/ng-bootstrap)\r\n  - Angular向けbootstrapライブラリ\r\n\r\n- [@compodoc/compodoc](https://github.com/compodoc/compodoc)\r\n  - Angularアプリケーションのドキュメントを自動生成してくれる。\r\n  - 利用する際は以下のような設定ファイルを追加し、`npx @compodoc/compodoc -p ./tsconfig.doc.json -d src/doc`\r\n  - 作成されるドキュメント -> [サンプル](https://portal.kemu.site/doc/)\r\n\r\n`tsconfig.doc.json`\r\n\r\n```json\r\n{\r\n  \"include\": [\"src/**/*.ts\"],\r\n  \"exclude\": [\"src/test.ts\", \"src/**/*.spec.ts\"]\r\n}\r\n```\r\n\r\n### コード\r\n#### メッセージを表示 -> 5秒後に削除\r\n\r\n```ts\r\nimport { Injectable } from '@angular/core';\r\nimport { interval } from 'rxjs';\r\n\r\nexport interface AlertMessage {\r\n  type: string;\r\n  body: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MessageService {\r\n  constructor() {}\r\n  private _messages: AlertMessage[] = [];\r\n\r\n  get messages() {\r\n    return this._messages;\r\n  }\r\n\r\n  pushMessage(message: AlertMessage) {\r\n    this._messages.push(message);\r\n    interval(5000).pipe(take(1)).subscribe((_) => this._messages.shift());\r\n  }\r\n}\r\n```\r\n\r\n#### 画面遷移時にローディングを表示させる\r\n\r\n```ts\r\nthis.router.events.subscribe((event) => {\r\n  if (event instanceof NavigationStart) {\r\n    this.loading = true;\r\n  } else if (\r\n    event instanceof NavigationEnd ||\r\n    event instanceof NavigationCancel ||\r\n    event instanceof NavigationError\r\n  ) {\r\n    this.loading = false;\r\n  }\r\n});\r\n```\r\n\r\n#### インクリメンタルサーチ\r\n  - doc: https://ng-bootstrap.github.io/#/components/typeahead/examples\r\n\r\n\r\n```ts\r\n{\r\n  search: OperatorFunction<string, readonly string[]> = (text$: Observable<string>) => {\r\n    return text$\r\n      .pipe(debounceTime(200), distinctUntilChanged())\r\n      .pipe(\r\n        map((text) => Object.keys(this.searchData).filter((title) => title.toLowerCase().includes(text.toLowerCase())))\r\n      );\r\n  };\r\n}\r\n```\r\n\r\n```html\r\n<input\r\n  class=\"form-control\"\r\n  placeholder=\"search\"\r\n  NgbTypeahead\r\n  [ngbTypeahead]=\"search\"\r\n  (selectItem)=\"selectArticle($event)\"\r\n  #instance=\"ngbTypeahead\"\r\n  (blur)=\"instance.dismissPopup()\"\r\n/>\r\n```\r\n\r\n#### リロード前に処理を挟み込む\r\n\r\n```ts\r\nconstoractor() {\r\n  window.onbeforeunload = () => this.ngOnDestroy();\r\n}\r\n\r\n```\r\n\r\n#### bootstrap-icons導入\r\n\r\n```zsh\r\n$ npm i bootstrap-icons\r\n```\r\n\r\n`src/style.scss`\r\n\r\n```\r\n...\r\n@import '~bootstrap-icons/font/bootstrap-icons.css';\r\n...\r\n```\r\n\r\n他思い出し次第追記", "reactions": {"url": "https://api.github.com/repos/kemu3007/portal/issues/18/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/18/timeline", "performed_via_github_app": null, "state_reason": null}