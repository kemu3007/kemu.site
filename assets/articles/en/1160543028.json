{"url": "https://api.github.com/repos/kemu3007/portal/issues/6", "repository_url": "https://api.github.com/repos/kemu3007/portal", "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/6/comments", "events_url": "https://api.github.com/repos/kemu3007/portal/issues/6/events", "html_url": "https://github.com/kemu3007/portal/issues/6", "id": 1160543028, "node_id": "I_kwDOG7qoq85FLHs0", "number": 6, "title": "Automatically generate Django Admin", "user": {"login": "kemu3007", "id": 29157528, "node_id": "MDQ6VXNlcjI5MTU3NTI4", "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kemu3007", "html_url": "https://github.com/kemu3007", "followers_url": "https://api.github.com/users/kemu3007/followers", "following_url": "https://api.github.com/users/kemu3007/following{/other_user}", "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}", "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions", "organizations_url": "https://api.github.com/users/kemu3007/orgs", "repos_url": "https://api.github.com/users/kemu3007/repos", "events_url": "https://api.github.com/users/kemu3007/events{/privacy}", "received_events_url": "https://api.github.com/users/kemu3007/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3898939400, "node_id": "LA_kwDOG7qoq87oZRgI", "url": "https://api.github.com/repos/kemu3007/portal/labels/article", "name": "article", "color": "C200E5", "default": false, "description": ""}, {"id": 3900075763, "node_id": "LA_kwDOG7qoq87odm7z", "url": "https://api.github.com/repos/kemu3007/portal/labels/Django", "name": "Django", "color": "5FC353", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-03-06T07:45:18Z", "updated_at": "2022-03-06T15:21:16Z", "closed_at": null, "author_association": "OWNER", "active_lock_reason": null, "body": "I forgot to register Admin and it was troublesome, so leave it as a note.\r\n\r\n#### Convenient timing\r\n-Django Admin I don't want to focus so much, but I want the minimum function\r\n-I'm forgetting `Admin.site.Register` when adding a model, so I want to do something\r\n\r\n#### Actual code\r\n-urls.py\r\n\r\n`` `python\r\nURLPATTERNS = [\r\n    PATH (\"Admin/Native/\", AutogenerateAdminsite (). URLS)\r\n]\r\n`` `\r\n\r\n-Admin.py\r\n\r\n`` `python\r\nFrom Typing Import Type\r\nFrom django.contrib.admin.options Import Modeladmin\r\nFrom django.contrib.admin.sites Import Adminsite\r\nFrom Django.apps Import Apps\r\nFrom Django.db Import Models\r\nFrom colorfield.fields Import Colorfield\r\n\r\n\r\nDef Get_admin_model (Model: Type [Models.model]) -> Type [Modeladmin]:\r\n    List_display_fields = [Models.charfield, Models.integerfield, Models.positiveIntegerfield, Models.Foreignkey, Models.booleanField, Colorfield, Colorfield.\r\n    List_editable_field = [Models.integerField, Models.positalStiveintegerfield, Models.booleanField, Colorfield]\r\n    List_display = [\"PK\"]\r\n    List_editable = []\r\n    for Field in Model._meta.fields:\r\n        IF Type (Field) in List_display_fields:\r\n            list_display.append (Field.name)\r\n        IF Type (Field) in List_editable_field and Field.editable:\r\n            list_editable.append (Field.name)\r\n    return type(f\"{model._meta.model_name}ModelAdmin\", (ModelAdmin, ), {\"list_display\": list_display, \"list_editable\": list_editable, \"ordering\": model._meta.ordering or [\"pk\"]})\r\n\r\n\r\nClass AutogenerateAdminsite (Adminsite):\r\n    Display_app_list = ['Sites', 'Shared', 'Article', 'Contact']\r\n\r\n    Def __init __ (self, *args, ** kwargs) -> None:\r\n        SUPER () .__ INIT__ (*Args, ** kwargs)\r\n        Self._registic = {model: get_admin_model (Model) (Model) (Model, Admin_site = Self) for Model in Apps.get_models\r\n\r\n    Def _Build_app_dict (Self, Request):\r\n        App_dict = Super () ._ Build_app_dict (Request)\r\n        Return Dict (Filter (Lambda App: App [0] in Self.display_app_list, App_dict.items ()))\r\n`` `\r\n\r\nCreate `autogenerateAdminsite` that inherits` django.contrib.admin.sites.adminsite` and add any model to `autogenerateAdminsite._registry`.\r\n\r\nSince `django.apps.get_models` is used, data that you do not want to see much in ADMIN such as sessions is also displayed.\r\n\r\nIn order to exclude such data in App, we narrow down the app displayed in `_build_app_dict`.\r\n\r\nThe code used for the operation verification this time is [here] (https://github.com/kemu3007/blog/blob/master/src/apps/admin.py)", "reactions": {"url": "https://api.github.com/repos/kemu3007/portal/issues/6/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/6/timeline", "performed_via_github_app": null, "state_reason": null}