{
  "url": "https://api.github.com/repos/kemu3007/portal/issues/7",
  "repository_url": "https://api.github.com/repos/kemu3007/portal",
  "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/7/labels{/name}",
  "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/7/comments",
  "events_url": "https://api.github.com/repos/kemu3007/portal/issues/7/events",
  "html_url": "https://github.com/kemu3007/portal/issues/7",
  "id": 1160543074,
  "node_id": "I_kwDOG7qoq85FLHti",
  "number": 7,
  "title": "Handling Angular forms in Type safe",
  "user": {
    "login": "kemu3007",
    "id": 29157528,
    "node_id": "MDQ6VXNlcjI5MTU3NTI4",
    "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kemu3007",
    "html_url": "https://github.com/kemu3007",
    "followers_url": "https://api.github.com/users/kemu3007/followers",
    "following_url": "https://api.github.com/users/kemu3007/following{/other_user}",
    "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions",
    "organizations_url": "https://api.github.com/users/kemu3007/orgs",
    "repos_url": "https://api.github.com/users/kemu3007/repos",
    "events_url": "https://api.github.com/users/kemu3007/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kemu3007/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3898939400,
      "node_id": "LA_kwDOG7qoq87oZRgI",
      "url": "https://api.github.com/repos/kemu3007/portal/labels/article",
      "name": "article",
      "color": "C200E5",
      "default": false,
      "description": ""
    },
    {
      "id": 3900074882,
      "node_id": "LA_kwDOG7qoq87odmuC",
      "url": "https://api.github.com/repos/kemu3007/portal/labels/Angular",
      "name": "Angular",
      "color": "D93F0B",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [],
  "milestone": null,
  "comments": 0,
  "created_at": "2022-03-06T07:45:35Z",
  "updated_at": "2022-03-26T09:31:18Z",
  "closed_at": null,
  "author_association": "OWNER",
  "active_lock_reason": null,
  "body": "You can use @ngneat/reactive- forms to write forms in type safe.\n\n- - - \n#### Normal Angular form\n\n```ts\nimport { FormBuilder } from '@angular/forms';\n\nconstructor(private fb: FormBuilder){}\n\nform = this.fb.group({\n    firstName: '',\n    lastName: ''\n})\n```\nIn normal Angular form, when you reference `form.controls`, the type is `{[key: string]: AbstractControl;}`. Therefore, if you refer to `form.controls.firstName`, the type system will not know if `firstName` exists.\n\nAlso, the type of value is `any` when `form.valueChanges.subscribe(value => )`.\n\n- - - \n#### @ngneat/reactive- forms\n```ts\nimport { FormBuilder, FormGroup, ControlsOf } from '@ngneat/reactive-forms';\n\nconstructor(private nfb: FormBuilder){}\n\ninterface sampleForm {\n  firstName: string;\n  lastName: string;\n}\n\nneatForm = this.nfb.group<sampleForm>({\n  firstName: \"\",\n  lastName: \"\"\n})\n\nneatForm = new FormGroup<ControlsOf<sampleForm>>({\n  firstName: new FormControl(\"\"),\n  lastName: new FormControl(\"\")\n})\n```\nIf @ngneat/reactive- forms is used, the code will look like the above.\nDefining form items as interfaces in `sampleForm` allows intellisense to work when writing code in `group({})` and prevents human error.\n\nIn this case, the type of `neatForm.controls` is `GroupResolverFormBuilder<sampleForm>` and direct reference to `neatForm.controls.firstName` will not cause an error.\n\nWhen `form.valueChanges.subscribe(value => )`, the type of value is `ValuesOf<GroupResolverFormBuilder<sampleForm>>`, which can be referenced to type safe.\n\nAlso, intellisense works for `formControlName` when you write the following on the template side. :sugoine:\n\n```html\n<form [formGroup]=\"form\">\n  <input formControlName=\"firstName\" />\n  <input formControlName=\"lastName\" />\n</form>\n```\n\nNote that FormBuilder does not seem to be fully supported. Also, be aware that although the initial value can be null, type inferences such as `non null' are not possible if the form is valid because of `Validators.required`.\n\n- - - \n\n#### @ngneat/reactive- forms Useful Features\n\n-  `value$`.\n\nWhen using `valueChanges` of `formGroup`, disabled controls and values at the time of form generation are not streamed.\nWhen you subscribe to `value$`, the rawValue, i.e., the value of the disable control, will also flow, as well as the value at the time of generation.\n\n-  `persistControl`.\n\n```ts\n{ persistControl } from '@ngneat/reactive-forms'\n\npersistControl(this.neatForm, \"neatForm\", {}).subscribe()\n```\n\nIt automatically saves the form values to storage, and places the values into the form when it is redrawn.\nIt is very easy to avoid having to implement your own sessionStorage, etc.\n\n- - - \n\n[@ngneat/reactive- forms](https://github.com/ngneat/reactive- forms)\n\nThe code for this time is [here](https://github.com/kemu3007/ngneat- reactive_forms- test/blob/master/test/src/app/app.component.ts)",
  "reactions": {
    "url": "https://api.github.com/repos/kemu3007/portal/issues/7/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/7/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
