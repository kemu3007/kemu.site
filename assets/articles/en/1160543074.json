{
    "url": "https://api.github.com/repos/kemu3007/portal/issues/7",
    "repository_url": "https://api.github.com/repos/kemu3007/portal",
    "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/7/labels{/name}",
    "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/7/comments",
    "events_url": "https://api.github.com/repos/kemu3007/portal/issues/7/events",
    "html_url": "https://github.com/kemu3007/portal/issues/7",
    "id": 1160543074,
    "node_id": "I_kwDOG7qoq85FLHti",
    "number": 7,
    "title": "Handlingformular form to Type safe",
    "user": {
        "login": "kemu3007",
        "id": 29157528,
        "node_id": "MDQ6VXNlcjI5MTU3NTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kemu3007",
        "html_url": "https://github.com/kemu3007",
        "followers_url": "https://api.github.com/users/kemu3007/followers",
        "following_url": "https://api.github.com/users/kemu3007/following{/other_user}",
        "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions",
        "organizations_url": "https://api.github.com/users/kemu3007/orgs",
        "repos_url": "https://api.github.com/users/kemu3007/repos",
        "events_url": "https://api.github.com/users/kemu3007/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kemu3007/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 3898939400,
            "node_id": "LA_kwDOG7qoq87oZRgI",
            "url": "https://api.github.com/repos/kemu3007/portal/labels/article",
            "name": "article",
            "color": "C200E5",
            "default": false,
            "description": ""
        },
        {
            "id": 3900074882,
            "node_id": "LA_kwDOG7qoq87odmuC",
            "url": "https://api.github.com/repos/kemu3007/portal/labels/Angular",
            "name": "Angular",
            "color": "D93F0B",
            "default": false,
            "description": ""
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-03-06T07:45:35Z",
    "updated_at": "2022-03-26T09:31:18Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "body": "Use @ngneat/reactive- forms to write form to type safe.\n\n - - - \n### Normalformular form\n\n```ts\nimport { FormBuilder } from '@angular/forms';\n\nconstructor(private fb: FormBuilder){}\n\nform = this.fb.group({\n    firstName: '',\n    lastName: ''\n})\n```\n`form.controls` is `{[key: string]:  Control;}`. Therefore, if you refer to `form.controls.firstName`, you will not know if `firstName` exists on the type system.\n\n`form.valueChanges.subscribe(value => )`\n\n - - - \n### @ngneat/reactive- forms\n```ts\nimport { FormBuilder, FormGroup, ControlsOf } from '@ngneat/reactive-forms';\n\nconstructor(private nfb: FormBuilder){}\n\ninterface sampleForm {\n  firstName: string;\n  lastName: string;\n}\n\nneatForm = this.nfb.group<sampleForm>({\n  firstName: \"\",\n  lastName: \"\"\n})\n\nneatForm = new FormGroup<ControlsOf<sampleForm>>({\n  firstName: new FormControl(\"\"),\n  lastName: new FormControl(\"\")\n})\n```\n@ngneat/reactive- forms\nBy defining the form item as an interface in `sampleForm`, intellisエラー also works when writing code in `group({})` and prevent human errors.\n\nThe type of `neatForm.controls` in this case becomes `GroupResolverFormBuilder<sampleForm>`, and no error occurs even if referenced directly with `neatForm.controls.firstName`.\n\nWhen `form.valueChanges.subscribe(value => )`, the value type is `ValuesOf<GroupResolverFormBuilder<sampleForm>>` and can be referenced to type safe.\n\nAlso, intellis働き works for `formControlName` when writing in the template side. :sugoine:\n\n```html\n<form [formGroup]=\"form\">\n  <input formControlName=\"firstName\" />\n  <input formControlName=\"lastName\" />\n</form>\n```\n\nNote that FormBuilder is not fully supported. In addition, since the initial value is null, but there is `Validators.required`, if form is valid, it is not possible to type inference such as non null.\n\n - - - \n\n### @ngneat/reactive- forms\n\nvalue$\n\nWhen using `formGroup```valueChanges`, there is a feature that does not flow to stream when using disabled control and form generation.\nIf `value$` is subscribed, the rawValue, i.e., the variable control value flows, and the value of the generated value flows.\n\n-  Persist Control\n\n```ts\n{ persistControl } from '@ngneat/reactive-forms'\n\npersistControl(this.neatForm, \"neatForm\", {}).subscribe()\n```\n\nAutomatically saves the form value to the storage and values the form when re描画ed.\nIt is very easy to implement your own sessionStorage.\n\n - - - \n\n[@ngneat/reactive- forms]\n\n(https://github.com/kemu3007/ngneat- reactive_forms- test/blob/master/test/src/app. .ts)",
    "reactions": {
        "url": "https://api.github.com/repos/kemu3007/portal/issues/7/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/7/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}