{"url": "https://api.github.com/repos/kemu3007/portal/issues/7", "repository_url": "https://api.github.com/repos/kemu3007/portal", "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/7/labels{/name}", "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/7/comments", "events_url": "https://api.github.com/repos/kemu3007/portal/issues/7/events", "html_url": "https://github.com/kemu3007/portal/issues/7", "id": 1160543074, "node_id": "I_kwDOG7qoq85FLHti", "number": 7, "title": "Handling Angular Form for Type Safe", "user": {"login": "kemu3007", "id": 29157528, "node_id": "MDQ6VXNlcjI5MTU3NTI4", "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kemu3007", "html_url": "https://github.com/kemu3007", "followers_url": "https://api.github.com/users/kemu3007/followers", "following_url": "https://api.github.com/users/kemu3007/following{/other_user}", "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}", "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions", "organizations_url": "https://api.github.com/users/kemu3007/orgs", "repos_url": "https://api.github.com/users/kemu3007/repos", "events_url": "https://api.github.com/users/kemu3007/events{/privacy}", "received_events_url": "https://api.github.com/users/kemu3007/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3898939400, "node_id": "LA_kwDOG7qoq87oZRgI", "url": "https://api.github.com/repos/kemu3007/portal/labels/article", "name": "article", "color": "C200E5", "default": false, "description": ""}, {"id": 3900074882, "node_id": "LA_kwDOG7qoq87odmuC", "url": "https://api.github.com/repos/kemu3007/portal/labels/Angular", "name": "Angular", "color": "D93F0B", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-03-06T07:45:35Z", "updated_at": "2022-03-26T09:31:18Z", "closed_at": null, "author_association": "OWNER", "active_lock_reason": null, "body": "Use @ngneat/Reactive-forms to write Form in Type Safe.\r\n\r\n---\r\n#### normal Angular form\r\n\r\n`` `TS\r\nImport {Formbuilder} from '@Angular/Forms';\r\n\r\nConstructor (Private FB: Formbuilder) {}\r\n\r\nform = this.fb.group ({\r\n    FirstName: '',\r\n    Lastname: ''\r\n})\r\n`` `\r\nIn the normal Angular form, the type when referring to `form.controls` is` {[key: string]: AbstractControl;} `. Therefore, if you refer to `form.controls.FirstName`, you will not know if the type system` firstName` exists on the type system.\r\n\r\nAlso, the Value type when `form.ValueChanges.subscripe (value =>)` is `Any`.\r\n\r\n---\r\n#### @ngneat/Reactive-forms\r\n`` `TS\r\nImport {Formbuilder, Formgroup, ControlSof} from '@ngneat/Reactive-forms';\r\n\r\nConstructor (Private NFB: Formbuilder) {}\r\n\r\nInterface SampleForm {\r\n  FirstName: String;\r\n  Lastname: String;\r\n}\r\n\r\nNeatform = this.nfb.group <sampleForm> ({\r\n  FirstName: \"\",\r\n  Lastname: \"\"\r\n})\r\n\r\nNeatForm = New Formgroup <ControlSof <sampleForm >> ({\r\n  FirstName: New FormControl (\"\"),\r\n  Lastname: New FormControl (\"\")\r\n})\r\n`` `\r\nIf you use @ngneat/Reactive-forms, the above code will be.\r\nBy defining the form item as interface with `sampleForm`, Intellisense works when writing the code in` group ({}) `to prevent human errors.\r\n\r\nIn this case, the type of `NeatForm.controls` is` groupresolverFormbuilder <sampleform> `and does not cause an error even if directly referring to` NeatForm.controls.FirstName`.\r\n\r\nWhen `form.ValueChanges.subscript (value =>)`, the Value type is `ValueSof <GroupresolverFormbuilder <mpleform >>` and can be referred to Type Safe.\r\n\r\nIntellisense works for `formControlname` when describing as follows on the template side. : Sugoine:\r\n\r\n`` `HTML\r\n<FormGroup] = \"Form\">\r\n  <Input FormControlname = \"FirstName\" />\r\n  <Input formControlname = \"Lastname\" />\r\n</form>\r\n`` `\r\n\r\nIt should be noted that Formbuilder is not completely supported. In addition, the initial value is NULL, but there is `Validators.Required`, so if the form is valid, it is not possible to infer the type such as non Null, so it is necessary to be careful.\r\n\r\n---\r\n\r\n#### @ngneat/Reactive-forms Convenient function\r\n\r\n- `Value $`\r\n\r\nWhen using `ValueChanges` of` formgroup`, the value when the form is generated and the value when the form generation does not flow to Stream.\r\nSubscribe `Value $` also flows RawValue, that is, Disable Control, and the value at the time of generation will flow.\r\n\r\n-`PersistControl`\r\n\r\n`` `TS\r\n{PersistControl} from '@ngneat/Reactive-forms'\r\n\r\nPERSISTCONTROL (this.neatForm, \"NeatForm\", {}). subScribe ()\r\n`` `\r\n\r\nIt automatically saves the form value in the storage and puts the value in the form at the redrawn timing.\r\nIt is very easy to not have to implement your own in SessionStorage.\r\n\r\n---\r\n\r\n[@ngneat/Reactive-forms] (https://github.com/ngneat/reactive-forms)\r\n\r\nThis code is [here] (https://github.com/kemu3007/ngneat-reactive_forms-test/blob/master/test/src/app.component.ts)", "reactions": {"url": "https://api.github.com/repos/kemu3007/portal/issues/7/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/7/timeline", "performed_via_github_app": null, "state_reason": null}