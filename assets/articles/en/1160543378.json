{"url": "https://api.github.com/repos/kemu3007/portal/issues/10", "repository_url": "https://api.github.com/repos/kemu3007/portal", "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/10/labels{/name}", "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/10/comments", "events_url": "https://api.github.com/repos/kemu3007/portal/issues/10/events", "html_url": "https://github.com/kemu3007/portal/issues/10", "id": 1160543378, "node_id": "I_kwDOG7qoq85FLHyS", "number": 10, "title": "Use Gmail API Push Notification", "user": {"login": "kemu3007", "id": 29157528, "node_id": "MDQ6VXNlcjI5MTU3NTI4", "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kemu3007", "html_url": "https://github.com/kemu3007", "followers_url": "https://api.github.com/users/kemu3007/followers", "following_url": "https://api.github.com/users/kemu3007/following{/other_user}", "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}", "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions", "organizations_url": "https://api.github.com/users/kemu3007/orgs", "repos_url": "https://api.github.com/users/kemu3007/repos", "events_url": "https://api.github.com/users/kemu3007/events{/privacy}", "received_events_url": "https://api.github.com/users/kemu3007/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3898939400, "node_id": "LA_kwDOG7qoq87oZRgI", "url": "https://api.github.com/repos/kemu3007/portal/labels/article", "name": "article", "color": "C200E5", "default": false, "description": ""}, {"id": 3900073969, "node_id": "LA_kwDOG7qoq87odmfx", "url": "https://api.github.com/repos/kemu3007/portal/labels/GCP", "name": "GCP", "color": "FBCA04", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-03-06T07:47:32Z", "updated_at": "2022-03-06T15:19:57Z", "closed_at": null, "author_association": "OWNER", "active_lock_reason": null, "body": "You will be able to hook the email and put the processing.\r\n\r\n### environment\r\n-Python 3.10\r\n-Google-API-Python-Client == 2.36.0\r\n-Google_auth_oauthlib == 0.4.6\r\n-Google-Cloud-Pubsub == 2.9.0\r\n\r\n\r\n### procedure\r\n① Create a project from the GCP console and enable [gmail API] (https://console.cloud.google.com/apis/api/gmail.googleapis.com/)\r\n\r\n② Gmail API-> authentication information-> Create authentication information and create an OAuth client ID (if you only need to play at hand, you do not need to think about redirect URI, so it is convenient to select a desktop app.)\r\n\r\n③ After creating the OAuth client ID, click to access and download JSON\r\n\r\n④ Because the downloaded JSON has not given token, execute the following code, click the URL displayed on the console, paste the generated code to the console, and paste the authentication information. Save in Pickle format. (In the explanation, it is based on DJNAGO, but there is no need to be particularly conscious.)\r\n\r\n---\r\n\r\n`` `py\r\nImport JSON\r\nImport Pickle\r\nFrom Pathlib IMPORT PATH\r\n\r\nFrom Django.conf Import Settings\r\nFrom django.coRe.manageMent.base Import Bas Basecommand\r\nFrom Google_auth_oauthlib.flow Import INSTALLEDAPPFLOW\r\n\r\n\r\nClass Command (Basecommand):\r\n    Def Handle (Self, *Args, ** Options):\r\n        Credential_path: Path = Settings.base_dir.parent / \"Auth.json\"\r\n        Credential_scopes = [\"https://mail.google.com/\"]\r\n        raw_credentials = json.loads (credential_path.Read_text ())\r\n        Flow = INSTALLEDAPPFLOW.FROM_CLIENT_CONFIG (Raw_credentials, Credential_scopes)\r\n        CREDENTIALS = Flow.run_console ()\r\n        with Open (\"TokyoN.pickle\", \"WB\") as Token:\r\n            Pickle.dump (CREDENTIALS, TOKEN)\r\n`` `\r\n\r\n---\r\n\r\nCreate [PUB/SUB] (https://console.cloud.google.com/cloudpubsub/) required for Gmail's Push Notification from the GCP console. Create a topic first, you do not need to check the check box at this time.\r\n\r\n⑥ Set Publisher for the topic. Click on the `principal from the information panel permission column on the right side of the screen, and add` gmail-api-push@system.gserviceaccount.com` as a roll `Pub/Sub publisher`.\r\n\r\n⑦ Create a subscription. Please select `pull` for distribution type. The topic is created by step 5.\r\n\r\n⑧ Run `users.watch` based on the authentication information created in step 4. At this time, the notification controls the event fire by specifying Labelids as Inbox.\r\n\r\n---\r\n\r\n`` `py\r\nFrom GoogleApiclient.Discovery Import Build\r\n\r\nwith open (settings.base_dir / \"mail / Tokyo\", \"rb\") as Token:\r\n    CREDENTIALS = Pickle.load (token)\r\nService = Build (\"Gmail\", \"v1\", Credentials = Self.credentials)\r\n# Settings.pubsub_topic has a value such as Projects/{Project_name}-{Project_id}/Topics/{Topic_name}.\r\nService.users (). Watch (userid = \"me\", body = {\"labelids\": [\"inbox\"], \"topicName\": settings.pubsub_topic}). EXECUTE ()\r\n`` `\r\n\r\n---\r\n\r\n⑨ Set the CALLBACK function and subScribe\r\n\r\n---\r\n\r\n`` `py\r\nFrom Google.cloud.pubsub_v1 Import SubscriperClient\r\n\r\n# Settings.pubsub_subscription contains values ​​such as Projects/{Project_name}-{Project_id}/Subscriptions/{Topic_name}.\r\nSubscriperClient (CREDENTIALS = CREDENTIALS) .subscript (Settings.pubsub_subscription, Callback = Callback)\r\n`` `\r\n\r\n---\r\n\r\n⑩ The data obtained by Subscribe is the following format.\r\nhttps://developers.google.com/gmail/api/guides/push#receiving_notifications\r\n\r\nIt is important to note that \"Messageid\" has nothing to do with the Gmail ID.\r\n\r\n⑪ Get a message based on Historyid\r\n\r\nIf you use Historyid obtained in step 10, you may not be able to get it due to the convenience of using Starthistoryid queries. Therefore, if the previous value does not exist, it is necessary to use Historyid when using `user.watch`.\r\n\r\n---\r\n\r\n`` `py\r\nhistories = service.users().history().list(userId=\"me\", historyTypes=[\"messageAdded\"], labelId=\"INBOX\", startHistoryId=past_history_id).execute(num_retries=5)\r\nMessage_id = Histories [\"History\"] [0] [MessageSadded \"] [0] [Message] [ID\"]\r\nMessage = Self.service.users (). Messages (). Get (userid = \"me\", id = message_id) .Execute (num_retrees = 5)\r\n`` `\r\n\r\n---\r\n\r\n⑫ Since the message has been obtained in step 12, we will notify Slack and preserve it to DB.\r\n\r\nSince the text is encoded in Base64, please handle it by `Base64.urlsafe_b64decode`.\r\n\r\n### Note\r\n\r\n-As not uploading authentication information to GitHub etc. to handle GCP access rights.\r\n`` user.watch` must be executed regularly. I think it would be better to make a command and perform regular execution with OFERIA or CRON.\r\n\r\n### General commentary\r\n\r\nThere are many easier ways to pour emails into Slack, but I think it's useful if you want to insert other processes and accumulate email information in easy -to -use DB. rice field.\r\n\r\nI had a hard time because the Japanese materials were hardly rolled, but I was glad that I managed to bring it to SlackBot that moved in one day.", "reactions": {"url": "https://api.github.com/repos/kemu3007/portal/issues/10/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/10/timeline", "performed_via_github_app": null, "state_reason": null}