{
    "url": "https://api.github.com/repos/kemu3007/portal/issues/10",
    "repository_url": "https://api.github.com/repos/kemu3007/portal",
    "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/10/labels{/name}",
    "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/10/comments",
    "events_url": "https://api.github.com/repos/kemu3007/portal/issues/10/events",
    "html_url": "https://github.com/kemu3007/portal/issues/10",
    "id": 1160543378,
    "node_id": "I_kwDOG7qoq85FLHyS",
    "number": 10,
    "title": "Gmail API push notification",
    "user": {
        "login": "kemu3007",
        "id": 29157528,
        "node_id": "MDQ6VXNlcjI5MTU3NTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kemu3007",
        "html_url": "https://github.com/kemu3007",
        "followers_url": "https://api.github.com/users/kemu3007/followers",
        "following_url": "https://api.github.com/users/kemu3007/following{/other_user}",
        "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions",
        "organizations_url": "https://api.github.com/users/kemu3007/orgs",
        "repos_url": "https://api.github.com/users/kemu3007/repos",
        "events_url": "https://api.github.com/users/kemu3007/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kemu3007/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 3898939400,
            "node_id": "LA_kwDOG7qoq87oZRgI",
            "url": "https://api.github.com/repos/kemu3007/portal/labels/article",
            "name": "article",
            "color": "C200E5",
            "default": false,
            "description": ""
        },
        {
            "id": 3900073969,
            "node_id": "LA_kwDOG7qoq87odmfx",
            "url": "https://api.github.com/repos/kemu3007/portal/labels/GCP",
            "name": "GCP",
            "color": "FBCA04",
            "default": false,
            "description": ""
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-03-06T07:47:32Z",
    "updated_at": "2022-03-06T15:19:57Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "body": "It is possible to ック the processing byック the mail.\n\n### Environment\n-  Python 3.10\n-  google- api- python- client==2.36.0\n-  google_auth_oauthlib==0.4.6\n-  google- cloud- pubsub==2.9.0\n\n\n### Procedure\n1 Create a project from the GCP console and enable the Gmail API (https://con].cloud.google.com/apis/api/gmail.googleapis.com/)\n\n2 Click on Gmail API - >情報 Info - > Create認証 Information, and create an OAuth client ID (if you are just playing at hand, you don’t have to think about the redirect URI, so it’s convenient to select a desktop app. )\n\n3 After creating an OAuth client ID, click to access and download JSON\n\n4 Since the JSON downloaded has not been givenken, execute the following code and click the URL displayed in the console and paste the generated code into the console and save the authentication information in pickle format. (The explanation is based on djnago, but there is no need to be conscious.) )\n\n - - - \n\n```py\nimport json\nimport pickle\nfrom pathlib import Path\n\nfrom django.conf import settings\nfrom django.core.management.base import BaseCommand\nfrom google_auth_oauthlib.flow import InstalledAppFlow\n\n\nclass Command(BaseCommand):\n    def handle(self, *args, **options):\n        credential_path: Path = settings.BASE_DIR.parent / \"auth.json\"\n        credential_scopes = [\"https://mail.google.com/\"]\n        raw_credentials = json.loads(credential_path.read_text())\n        flow = InstalledAppFlow.from_client_config(raw_credentials, credential_scopes)\n        credentials = flow.run_console()\n        with open(\"token.pickle\", \"wb\") as token:\n            pickle.dump(credentials, token)\n```\n\n - - - \n\n5 Create [pub/sub] (https://con。.cloud.google.com/cloudpubsub/) required for Gmail push notification from GCP console. Create a topic first, you don’t need to check the checkbox.\n\n6. Set the publisher for the topic. Click `Add principal` from the right information panel authority field and add `gmail- api- push@system.gserviceaccount.com` as `Pub/Sub publisher`.\n\n7 Create a subscription Please select `pull` for the delivery type. The topic is created in Step 5.\n\n8 Run `users.watch` based on the authentication information created in step 4. In this case, the notification controls the event inflammation by specifying labelIds as INBOX.\n\n - - - \n\n```py\nfrom googleapiclient.discovery import build\n\nwith open(settings.BASE_DIR / \"mail/token.pickle\", \"rb\") as token:\n    credentials = pickle.load(token)\nservice = build(\"gmail\", \"v1\", credentials=self.credentials)\n# settings.PUBSUB_TOPICには  projects/{project_name}-{project_id}/topics/{topic_name} のような値が入ります。\nservice.users().watch(userId=\"me\", body={\"labelIds\": [\"INBOX\"], \"topicName\": settings.PUBSUB_TOPIC}).execute()\n```\n\n - - - \n\n9 Set the callback function and subscribe\n\n - - - \n\n```py\nfrom google.cloud.pubsub_v1 import SubscriberClient\n\n# settings.PUBSUB_SUBSCRIPTIONにはprojects/{project_name}-{project_id}/subscriptions/{topic_name} のような値が入ります\nSubscriberClient(credentials=credentials).subscribe(settings.PUBSUB_SUBSCRIPTION, callback=callback)\n```\n\n - - - \n\n10 The data obtained by subscribe is as follows:\nhttps://developers.google.com/gmail/api/guides/push#vingeiving_notifications\n\n\"messageId\" at this time is not related to gmail ID.\n\n11 Get messages based on historyId\n\nIf you use historyId acquired in step 10, you may not be able to obtain it for the convenience of using startHistoryId query. Therefore, if there is no previous value, it is necessary to use historyId when using `user.watch`.\n\n - - - \n\n```py\nhistories = service.users().history().list(userId=\"me\", historyTypes=[\"messageAdded\"], labelId=\"INBOX\", startHistoryId=past_history_id).execute(num_retries=5)\nmessage_id = histories[\"history\"][0][\"messagesAdded\"][0][\"message\"][\"id\"]\nmessage = self.service.users().messages().get(userId=\"me\", id=message_id).execute(num_retries=5)\n```\n\n - - - \n\n12 You can get a message in step 12, so notify slack and save it to DB.\n\nPlease use `base64.urlsafe_b64decode` because the body is encoded in base64.\n\n## Note\n\n-  Do not uploadアップロードdentials to github for GCP access.\n-  `user.watch` must be executed regularly. I think that it is good to make regular execution by commands such as oferia and cron.\n\n### Total Reviews\n\nThere are a few simpler ways to send an email to slack, but I thought it would be useful if I want toメールumulate mail information in an easy- to- use DB that wants to処理 other processing.\n\nI had a hard time to move Japanese materials, but I was glad I had to move to slackbot.",
    "reactions": {
        "url": "https://api.github.com/repos/kemu3007/portal/issues/10/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/10/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}