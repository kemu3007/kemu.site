{
    "url": "https://api.github.com/repos/kemu3007/portal/issues/45",
    "repository_url": "https://api.github.com/repos/kemu3007/portal",
    "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/45/labels{/name}",
    "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/45/comments",
    "events_url": "https://api.github.com/repos/kemu3007/portal/issues/45/events",
    "html_url": "https://github.com/kemu3007/portal/issues/45",
    "id": 1239705698,
    "node_id": "I_kwDOG7qoq85J5Ghi",
    "number": 45,
    "title": "Try Django 4.1 Async View, Async ORM",
    "user": {
        "login": "kemu3007",
        "id": 29157528,
        "node_id": "MDQ6VXNlcjI5MTU3NTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kemu3007",
        "html_url": "https://github.com/kemu3007",
        "followers_url": "https://api.github.com/users/kemu3007/followers",
        "following_url": "https://api.github.com/users/kemu3007/following{/other_user}",
        "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions",
        "organizations_url": "https://api.github.com/users/kemu3007/orgs",
        "repos_url": "https://api.github.com/users/kemu3007/repos",
        "events_url": "https://api.github.com/users/kemu3007/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kemu3007/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 3898939400,
            "node_id": "LA_kwDOG7qoq87oZRgI",
            "url": "https://api.github.com/repos/kemu3007/portal/labels/article",
            "name": "article",
            "color": "C200E5",
            "default": false,
            "description": ""
        },
        {
            "id": 3900075763,
            "node_id": "LA_kwDOG7qoq87odm7z",
            "url": "https://api.github.com/repos/kemu3007/portal/labels/Django",
            "name": "Django",
            "color": "5FC353",
            "default": false,
            "description": ""
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-05-18T09:48:28Z",
    "updated_at": "2022-05-18T13:36:03Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "body": "\nDjango 4.1alpha1 was released and we checked the new features & operation.\n\n[Django 4.1 alpha 1 released](https://www.djangoproject.com/weblog/2022/may/18/django- 41- alpha- 1- released/)\n[Django 4.1 release note](https://docs.djangoproject.com/en/dev/releases/4.1/)\n\nTwo points of interest in Django 4.1 are as follows\n\n-  Asynchronous handlers for class- based views\n-  Asynchronous ORM interface\n\n\n## introduction\n```bash\n$ pip install \"Django==4.1a1\"\n```\n\n## Check dependencies\nDependencies are the same as in Django 3.2. (pytz is gone).\n```text\nasgiref==3.5.2\nDjango==4.1a1\nsqlparse==0.4.2\n```\n\n\n## Asynchronous handlers for class- based views\nA view that returns a response after 1 second, especially since it was official although there is no point in using asyncio.\n\n```python\nimport asyncio\nfrom django.http import HttpResponse\nfrom django.views import View\n\n\nclass AsyncView(View):\n    async def get(self, request, *args, **kwargs):\n        \"\"\"1秒待機後にレスポンスを返却する\"\"\"\n        await asyncio.sleep(1)\n        return HttpResponse(\"Hello World\")\n```\n\n## Asynchronous ORM interface\n-  Looking at `django/db/models/query.py`, the following new functions exist.\n-  Looking at the implementation, we use asgiref's `asgiref/sync/sync_to_async` to make synchronous functions asynchronous.\n\n```text\naiterator\naaggregate\nacount\naget\nacreate\nabulk_create\nabulk_update\naget_or_create\naupdate_or_create\naearliest\nalatest\nafirst\nalast\nain_bulk\nadelete\naupdate\naexists\nacontains\naexplain\n```\n\n## Verify asynchronous operation\nIf normal synchronization processing is performed, the process proceeds as follows.\n\nThrow query A to DB - > result of query A is returned - > Throw query B to DB - > result of query B is returned\n\nIf asynchronous operation is achieved, the following behavior is expected\n\nThrow query A to DB - > Throw query B to DB - > Query A results returned - > Query B results returned\n\n\n```py\nimport asyncio\nimport time\n\nfrom django.contrib.auth.models import User\nfrom django.contrib.sessions.models import Session\nfrom django.http import HttpResponse\nfrom django.views import View\nfrom model_bakery import baker\n\ndef bulk_create(process: str, model, instances):\n    start = time.time()\n    print(f\"sync start_create {process}\")\n    model.objects.bulk_create(instances)\n    print(f\"sync   end_agg {process} {time.time() - start}\")\n\n\nclass SyncGetView(View):\n    def get(self, request, *args, **kwargs):\n        users = baker.prepare(User, _quantity=3000)\n        sessions = baker.prepare(Session, _quantity=3000)\n        start = time.time()\n        bulk_create(\"user\", User, users)\n        bulk_create(\"session\", Session, sessions)\n        end = time.time()\n        return HttpResponse(f\"{end - start}\")\n\n\nasync def abulk_create(process: str, model, instances):\n    start = time.time()\n    print(f\"async start_create {process}\")\n    await model.objects.abulk_create(instances)\n    print(f\"async   end_agg {process} {time.time() - start}\")\n\n\nclass AsyncGetView(View):\n    async def get(self, request, *args, **kwargs):\n        users = baker.prepare(User, _quantity=3000)\n        sessions = baker.prepare(Session, _quantity=3000)\n        start = time.time()\n        await asyncio.gather(abulk_create(\"user\", User, users), abulk_create(\"session\", Session, sessions))\n        end = time.time()\n        return HttpResponse(f\"{end - start}\")\n```\nThis code measures when `bulk_create` or `abulk_create` is called and how long it takes.\n\n### Output Results\n\n#### Synchronous processing\n```text\ndjango_4_1_sample-web-1  | sync start_create user\ndjango_4_1_sample-web-1  | sync   end_create user 1.0495100021362305\ndjango_4_1_sample-web-1  | sync start_create session\ndjango_4_1_sample-web-1  | sync   end_create session 0.22738051414489746\n```\n\n#### Asynchronous Processing\n```text\ndjango_4_1_sample-web-1  | async start_create user\ndjango_4_1_sample-web-1  | async start_create session\ndjango_4_1_sample-web-1  | async   end_create user 0.8275012969970703\ndjango_4_1_sample-web-1  | async   end_create session 1.0836100578308105\n```\n\nThe timing of `start_create` indicates that asynchronous processing is taking place.\n\nAlthough the calculation time was measured, it is not very meaningful because the instance prepared by model_bakery used this time is randomly generated, and because the DB is not separated, the side tested later was under a different situation with a different number of records, so it is ignored.\n\n\n## Code used in this project\n\n[django_4_1_sample](https://github.com/kemu3007/django_4_1_sample)",
    "reactions": {
        "url": "https://api.github.com/repos/kemu3007/portal/issues/45/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/45/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}