{
  "url": "https://api.github.com/repos/kemu3007/portal/issues/52",
  "repository_url": "https://api.github.com/repos/kemu3007/portal",
  "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/52/labels{/name}",
  "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/52/comments",
  "events_url": "https://api.github.com/repos/kemu3007/portal/issues/52/events",
  "html_url": "https://github.com/kemu3007/portal/issues/52",
  "id": 1260904707,
  "node_id": "I_kwDOG7qoq85LJ-ED",
  "number": 52,
  "title": "GraphQL graphene-django n+1问题有待解决。",
  "user": {
    "login": "kemu3007",
    "id": 29157528,
    "node_id": "MDQ6VXNlcjI5MTU3NTI4",
    "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kemu3007",
    "html_url": "https://github.com/kemu3007",
    "followers_url": "https://api.github.com/users/kemu3007/followers",
    "following_url": "https://api.github.com/users/kemu3007/following{/other_user}",
    "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions",
    "organizations_url": "https://api.github.com/users/kemu3007/orgs",
    "repos_url": "https://api.github.com/users/kemu3007/repos",
    "events_url": "https://api.github.com/users/kemu3007/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kemu3007/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3898939400,
      "node_id": "LA_kwDOG7qoq87oZRgI",
      "url": "https://api.github.com/repos/kemu3007/portal/labels/article",
      "name": "article",
      "color": "C200E5",
      "default": false,
      "description": ""
    },
    {
      "id": 3900075763,
      "node_id": "LA_kwDOG7qoq87odm7z",
      "url": "https://api.github.com/repos/kemu3007/portal/labels/Django",
      "name": "Django",
      "color": "5FC353",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [],
  "milestone": null,
  "comments": 0,
  "created_at": "2022-06-04T22:26:18Z",
  "updated_at": "2022-06-04T22:29:44Z",
  "closed_at": null,
  "author_association": "OWNER",
  "active_lock_reason": null,
  "body": "\n# n+1 Problem\n\nThe n+1 problem arises because graphQL allows the related model to be specified and retrieved from the front side.\nAssume a query that retrieves the User model from the Article model as follows\n\n```graphql\nquery {\n  articles {\n    id\n    user {\n      id\n    }\n    text\n  }\n}\n```\nIn this case, the n+1 problem occurs if the back- end implementation is as follows\n\n```python3\nimport graphene\nfrom graphene_django import DjangoObjectType\n\nfrom apps.models import Article\n\n\nclass Query(graphene.ObjectType):\n    articles = graphene.List(ArticleType, description=\"記事一覧取得API\")\n\n    def resolve_articles(self, info):\n        return Article.objects.all()\n```\n\nThe query to be issued is as follows\n\n```sql\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\" FROM \"apps_article\"\n\nSELECT \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"auth_user\" WHERE \"auth_user\".\"id\" = '1' LIMIT 21\n\nSELECT \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"auth_user\" WHERE \"auth_user\".\"id\" = '2' LIMIT 21\n\nSELECT \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"auth_user\" WHERE \"auth_user\".\"id\" = '3' LIMIT 21\n\n...\n```\n\nThis is the query when a typical n+1 occurs.\n\nIf you use select_related() as follows, it will not occur.\n\n```python3\nimport graphene\nfrom graphene_django import DjangoObjectType\n\nfrom apps.models import Article\n\n\nclass Query(graphene.ObjectType):\n    articles = graphene.List(ArticleType, description=\"記事一覧取得API\")\n\n    def resolve_articles(self, info):\n        return Article.objects.all().select_related()\n```\n\n\n```sql\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\", \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"apps_article\" INNER JOIN \"auth_user\" ON (\"apps_article\".\"user_id\" = \"auth_user\".\"id\")\n```\n\nHowever, if this is implemented, a reference to the User record will be JOINed and retrieved even when it is not necessary.\n\n\nTherefore, the SQL to be thrown should be changed depending on the Graphql query, as this may cause problems when the number of records increases.\n\n```python3\nfrom typing import Dict, List, Union\n\nimport graphene\nfrom django.contrib.auth.models import User\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.db import models\nfrom django.db.models import Model, Prefetch, QuerySet\nfrom graphene.utils.str_converters import to_snake_case\nfrom graphene_django.debug import DjangoDebug\nfrom graphene_django.utils import get_model_fields\nfrom graphql.execution.base import ResolveInfo\nfrom graphql.language import ast as graphql_ast\n\nfrom apps.models import Article\n\n\nclass QueryOptimizer:\n    \"\"\"紐付きのあるモデルをクエリの内容によって自動的にselect_related/prefetch_relatedを行う\"\"\"\n\n    def __init__(self) -> None:\n        self.select_related_fields: List[str] = []\n        self.prefetch_objects: List[Prefetch] = []\n\n    def optimize_query(self, info: Union[ResolveInfo, graphql_ast.Field], queryset: QuerySet) -> QuerySet:\n        \"\"\"クエリの最適化処理\"\"\"\n        field: graphql_ast.Field = info.field_asts[0] if isinstance(info, ResolveInfo) else info\n        self._extract_related_fields(queryset.model, field)\n        return queryset.select_related(*self.select_related_fields).prefetch_related(*self.prefetch_objects)\n\n    def _extract_related_fields(self, model: type[Model], field: graphql_ast.Field, prefix: str = \"\"):\n        \"\"\"リクエストフィールド内の関連モデルを参照/逆参照に応じて再起的に分類\"\"\"\n\n        fields: graphql_ast.SelectionSet = field.selection_set\n        model_fields: Dict[str, models.Field] = {key: field for (key, field) in get_model_fields(model)}\n        for field in filter(lambda x: x.selection_set is not None, fields.selections):\n            related_name = to_snake_case(f\"{prefix}__{field.name.value}\" if prefix else field.name.value)\n            field_name = to_snake_case(field.name.value)\n            model_field = model_fields[field_name]\n            if model_field.many_to_many or model_field.one_to_many:\n                self.prefetch_objects.append(\n                    Prefetch(related_name, QueryOptimizer().optimize_query(field, model_field.related_model.objects.all()))\n                )\n                continue\n            self.select_related_fields.append(related_name)\n            self._extract_related_fields(model_field.related_model, field, related_name)\n\nclass Query(graphene.ObjectType):\n    articles = graphene.List(ArticleType, description=\"記事一覧取得API\")\n\n```\n\nThis will result in fewer SQLs being issued.\n\nFor example, when you write a query like this.\n\n```graphql\nquery {\n  articles {\n    id\n    text\n    user {\n      articleSet {\n        user {\n          id\n          articleSet {\n            user {\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\nIf the n+1 problem has not been addressed, the following will occur.\n\n```sql\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\" FROM \"apps_article\"\nSELECT \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"auth_user\" WHERE \"auth_user\".\"id\" = '1' LIMIT 21\nSELECT \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"auth_user\" WHERE \"auth_user\".\"id\" = '2' LIMIT 21\nSELECT \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"auth_user\" WHERE \"auth_user\".\"id\" = '3' LIMIT 21\nSELECT \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"auth_user\" WHERE \"auth_user\".\"id\" = '4' LIMIT 21\nSELECT \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"auth_user\" WHERE \"auth_user\".\"id\" = '5' LIMIT 21\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\" FROM \"apps_article\" WHERE \"apps_article\".\"user_id\" = '1'\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\" FROM \"apps_article\" WHERE \"apps_article\".\"user_id\" = '2'\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\" FROM \"apps_article\" WHERE \"apps_article\".\"user_id\" = '3'\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\" FROM \"apps_article\" WHERE \"apps_article\".\"user_id\" = '4'\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\" FROM \"apps_article\" WHERE \"apps_article\".\"user_id\" = '5'\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\" FROM \"apps_article\" WHERE \"apps_article\".\"user_id\" = '1'\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\" FROM \"apps_article\" WHERE \"apps_article\".\"user_id\" = '2'\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\" FROM \"apps_article\" WHERE \"apps_article\".\"user_id\" = '3'\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\" FROM \"apps_article\" WHERE \"apps_article\".\"user_id\" = '4'\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\" FROM \"apps_article\" WHERE \"apps_article\".\"user_id\" = '5'\n```\n\nWhen using QueryOptimizer\n\n```sql\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\", \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"apps_article\" INNER JOIN \"auth_user\" ON (\"apps_article\".\"user_id\" = \"auth_user\".\"id\")\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\", \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"apps_article\" INNER JOIN \"auth_user\" ON (\"apps_article\".\"user_id\" = \"auth_user\".\"id\") WHERE \"apps_article\".\"user_id\" IN ('1', '2', '3', '4', '5')\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\", \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"apps_article\" INNER JOIN \"auth_user\" ON (\"apps_article\".\"user_id\" = \"auth_user\".\"id\") WHERE \"apps_article\".\"user_id\" IN ('1', '2', '3', '4', '5')\n```\n\nThis allowed us to address the n+1 problem.",
  "reactions": {
    "url": "https://api.github.com/repos/kemu3007/portal/issues/52/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/52/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
