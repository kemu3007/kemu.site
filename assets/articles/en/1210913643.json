{
  "url": "https://api.github.com/repos/kemu3007/portal/issues/34",
  "repository_url": "https://api.github.com/repos/kemu3007/portal",
  "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/34/labels{/name}",
  "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/34/comments",
  "events_url": "https://api.github.com/repos/kemu3007/portal/issues/34/events",
  "html_url": "https://github.com/kemu3007/portal/issues/34",
  "id": 1210913643,
  "node_id": "I_kwDOG7qoq85ILRNr",
  "number": 34,
  "title": "Using Django JWT Authentication",
  "user": {
    "login": "kemu3007",
    "id": 29157528,
    "node_id": "MDQ6VXNlcjI5MTU3NTI4",
    "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kemu3007",
    "html_url": "https://github.com/kemu3007",
    "followers_url": "https://api.github.com/users/kemu3007/followers",
    "following_url": "https://api.github.com/users/kemu3007/following{/other_user}",
    "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions",
    "organizations_url": "https://api.github.com/users/kemu3007/orgs",
    "repos_url": "https://api.github.com/users/kemu3007/repos",
    "events_url": "https://api.github.com/users/kemu3007/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kemu3007/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3898939400,
      "node_id": "LA_kwDOG7qoq87oZRgI",
      "url": "https://api.github.com/repos/kemu3007/portal/labels/article",
      "name": "article",
      "color": "C200E5",
      "default": false,
      "description": ""
    },
    {
      "id": 3900075763,
      "node_id": "LA_kwDOG7qoq87odm7z",
      "url": "https://api.github.com/repos/kemu3007/portal/labels/Django",
      "name": "Django",
      "color": "5FC353",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [],
  "milestone": null,
  "comments": 0,
  "created_at": "2022-04-21T11:40:05Z",
  "updated_at": "2022-04-22T09:48:26Z",
  "closed_at": null,
  "author_association": "OWNER",
  "active_lock_reason": null,
  "body": "\n## Introduction\n\n-  Installation\n\n```zsh\n$ pip install djangorestframework djangorestframework-simplejwt\n```\n\n-  settings.py\n\n```python\nINSTALLED_APPS = [\n    ...\n    \"rest_framework\",\n    \"rest_framework_simplejwt\",\n]\nREST_FRAMEWORK = {\n    ...\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\n        ...\n        \"rest_framework_simplejwt.authentication.JWTAuthentication\",\n    )\n}\n```\n\n-  urls.py\n\n-  Basic API View is provided, so it is introduced for the time being.\n-  `TokenObtainPairView` : Generate a token.\n-  `TokenRefreshView` : Refresh the token.\n-  `TokenVerifyView ` : Verify token validity.\n-  Other services are also available, such as blacklist.\n\n```python\nfrom django.urls import include, path\nfrom rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView, TokenVerifyView\n\njwt_urls = [\n    path(\"\", TokenObtainPairView.as_view()),\n    path(\"refresh/\", TokenRefreshView.as_view()),\n    path(\"verify/\", TokenVerifyView.as_view()),\n]\n\nurlpatterns = [\n    path(\"token/\", include(jwt_urls)),\n]\n```\n\n## Check operation\n\n### Issuing Tokens\n\nCreate a user as appropriate and POST username and password to `token/`.\n\n-  response\n-  `access` is a token used as `Authorization: Bearer {accesskey}` in the header when using the API.\n-  `refresh` is a token to reissue an access token\n\n```json\n{\n    \"refresh\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY1MDYyNTc2MiwiaWF0IjoxNjUwNTM5MzYyLCJqdGkiOiJmYjg3M2QzY2RjZTc0YTYzYmQ3ZTQ1OTQ5YjdiN2MxOSIsInVzZXJfaWQiOjJ9.8djfRV1zYHUyVFp5gelG2pTWWmT_QE1gqlLQLb1A2rw\",\n    \"access\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjUwNTM5NjYyLCJpYXQiOjE2NTA1MzkzNjIsImp0aSI6ImI4NDU0YTdiMDM3YzRhOWRiMmRjYWRmNTMwMjkwNDMxIiwidXNlcl9pZCI6Mn0.TwIRKSO-Pi6ZZMrJ10DOHTrdVoZtLRasB9vjvdBANIQ\"\n}\n```\n\n### Refresh Token\n\nPOST the `refresh` token obtained in the previous step to `token/refresh/`.\n\n-  response\n\n```json\n{\n    \"access\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjUwNTM5OTMwLCJpYXQiOjE2NTA1MzkzNjIsImp0aSI6IjQ2YzI2OThmOTFmYjQ0ZjY5OWVkNzk4NTY1MmY5MGNmIiwidXNlcl9pZCI6Mn0.IsNvx4DFhZoeW48fShWpwNRoO7_JZ69ws-1XhGuDx3I\"\n}\n```\n\n### Check token validity\n\nPOST a token to `token/verify/`.\n\n-  response\n  -  200 OK only returned\n  -  Validity can be checked for both access and refresh tokens\n  -  By default, tokens can be used even if they are refreshed, as long as the tokens before the refresh are still valid\n    -  `BLACKLIST_AFTER_ROTATION` must be set to True\n  -  Security aspects may need to be adjusted as multiple tokens can be created that are tied to a single user by default.\n    -  How to do this needs to be confirmed (I think it might be in the settings).\n\n```json\n{}\n```\n\n### Grant a token to access pages that require login\n-  `curl`.\n\n```bash\n$ curl localhost:8080/api/v1/user/ -H \"Authorization: Bearer{accesskey}\"\n```\n\n-  `rest_framework.test.APIClient`.\n\n```python\nclient = APIClient().credentials(HTTP_AUTHORIZATION=f\"Bearer {accesskey}\")\nclient.get(\"localhost:8080/api/v1/user/\")\n```\n\nIf the token is valid, 200 is returned; if invalid, 401 is returned.\n\n## End\n\nToken authentication is easy to use without worrying about CORS, but at the same time, it is a bit scary from a security standpoint.\nWhere should we have tokens on the front side, HTTP Only Cookie? LocalStorage/SessionStorage?\n\nIt is necessary to set a function to invalidate existing tokens and set a short expiration date on the assumption that the tokens may be stolen.\n\nThis time code: https://github.com/kemu3007/django- jwt- sample",
  "reactions": {
    "url": "https://api.github.com/repos/kemu3007/portal/issues/34/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/34/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
