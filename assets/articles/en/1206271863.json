{
    "url": "https://api.github.com/repos/kemu3007/portal/issues/31",
    "repository_url": "https://api.github.com/repos/kemu3007/portal",
    "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/31/labels{/name}",
    "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/31/comments",
    "events_url": "https://api.github.com/repos/kemu3007/portal/issues/31/events",
    "html_url": "https://github.com/kemu3007/portal/issues/31",
    "id": 1206271863,
    "node_id": "I_kwDOG7qoq85H5j93",
    "number": 31,
    "title": "Create health management apps with GitHub Actions and GitHub Pages",
    "user": {
        "login": "kemu3007",
        "id": 29157528,
        "node_id": "MDQ6VXNlcjI5MTU3NTI4",
        "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kemu3007",
        "html_url": "https://github.com/kemu3007",
        "followers_url": "https://api.github.com/users/kemu3007/followers",
        "following_url": "https://api.github.com/users/kemu3007/following{/other_user}",
        "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions",
        "organizations_url": "https://api.github.com/users/kemu3007/orgs",
        "repos_url": "https://api.github.com/users/kemu3007/repos",
        "events_url": "https://api.github.com/users/kemu3007/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kemu3007/received_events",
        "type": "User",
        "site_admin": false
    },
    "labels": [
        {
            "id": 3898939400,
            "node_id": "LA_kwDOG7qoq87oZRgI",
            "url": "https://api.github.com/repos/kemu3007/portal/labels/article",
            "name": "article",
            "color": "C200E5",
            "default": false,
            "description": ""
        },
        {
            "id": 3972772995,
            "node_id": "LA_kwDOG7qoq87sy7SD",
            "url": "https://api.github.com/repos/kemu3007/portal/labels/GitHub",
            "name": "GitHub",
            "color": "5866BF",
            "default": false,
            "description": ""
        }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-04-17T03:44:20Z",
    "updated_at": "2022-04-26T15:33:27Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "body": "\n## Original Concept\n\n-  I want to make it possible to check on any device online, but I don't want to make EC2 and so on.\n-  Data input once a day.\n-  The data to be registered is minimal, max blood pressure, pulse, pulse pressure, weight.\n-  Daily data is displayed in a chart.\n\n## Application Specifications\n\n-  Use GitHub Actions once a day.\n-  Save data in JSON format on GitHub Actions and push it to repository.\n-  Use GitHub Pages to visualize data with Chart.js.\n\n## Application Configuration\n<img width=\"752\" alt=\"Screenshot 2022- 04- 17 12 17 04\" src=\"https://user- images.githubusercontent.com/29157528/163698719- 2141b3d6- b45f- 435a- bab0- 8e92e5bc6cc2.png\">\n\n## Enter data in GitHub Actions\n\nYou can add any value to GitHub Actions in the following yml format:\n\n```yml\nname: write-data\n\non:\n  workflow_dispatch:\n    inputs:\n      blood_min:\n        default: 0\n        required: true\n      blood_max:\n        default: 0\n        required: true\n      heart_rate:\n        default: 0\n        required: true\n      heart_pulse:\n        default: 0\n        required: true\n      weight:\n        default: 0\n        required: true\n```\nThe actual UI is as follows:\n\n<img width=\"257\" alt=\"Screenshot 2022- 04- 17 12 25 14\" src=\"https://user- images.githubusercontent.com/29157528/16369 7- 6fc1b74e- f799- 4823- ad85- 68f96edc211d.png\">\n\nThe input value can be used as `{{ github.event.inputs.blood_min }}`.\n\n## Save data in JSON format\n\nIn order to make it easier to read data in JavaScript, the value passed to GitHub Actions is processed with a Python script. (The sample code uses ZoneInfo, so you need to use Python 3.9 or later.) )\n\n```python\nimport argparse\nfrom datetime import datetime\nimport json\nfrom pathlib import Path\nfrom zoneinfo import ZoneInfo\n\n\nparser = argparse.ArgumentParser()\n\nparser.add_argument(\"blood_min\", type=int)\nparser.add_argument(\"blood_max\", type=int)\nparser.add_argument(\"heart_rate\", type=int)\nparser.add_argument(\"heart_pulse\", type=int)\nparser.add_argument(\"weight\", type=float)\n\n\nblood_json = Path(\"docs/blood.json\")\nweight_json = Path(\"docs/weight.json\")\n\n\nif __name__ == \"__main__\":\n    today = datetime.now(ZoneInfo(\"Asia/Tokyo\")).date()\n    arguments = parser.parse_args()\n    blood = json.loads(blood_json.read_text())\n    blood[str(today)] = {\n        \"min\": arguments.blood_min,\n        \"max\": arguments.blood_max,\n        \"heart_rate\": arguments.heart_rate,\n        \"heart_pulse\": arguments.heart_pulse,\n    }\n    blood_json.write_text(json.dumps(blood))\n    weight = json.loads(weight_json.read_text())\n    weight[str(today)] = {\"weight\": arguments.weight}\n    weight_json.write_text(json.dumps(weight))\n``` \n\nIn order to deliver `docs/` of the repository main branch, prepare `docs/blood.json` and `docs/weight.json` and save JSON data.\n\nWe are ready to deliver JSON files with date and body data.\n\n## Visualize JSON data\n\nIn the form of JSON as it is, it is inconvenient for humans to read, so it is visualized in the graph format.\n\n[Chart.js](https://www.chartjs.org/)\n\n##index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"ja\">\n  <head>\n    <title>Health Logger</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\">\n  </head>\n  <body>\n    <div class=\"container mt-5\">\n      <h2>Blood</h2>\n      <canvas id=\"blood\" height=\"80px\"></canvas>\n      <h2>Weight</h2>\n      <canvas id=\"weight\" height=\"80px\"></canvas>\n    </div>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM\" crossorigin=\"anonymous\"></script>\n    <script>\n      const bloodCtx = document.getElementById(\"blood\").getContext('2d');\n      fetch(\"blood.json\").then(response => {\n        response.json().then(blood => {\n          console.log(blood)\n          const bloodChart = new Chart(bloodCtx, {\n            type: 'line',\n            data: {\n              datasets: [\n                {\n                  label: \"最高血圧\",\n                  data: Object.values(blood).map(item => item.max),\n                  borderColor: 'rgb(255, 0, 0)'\n                },\n                {\n                  label: \"最低血圧\",\n                  data: Object.values(blood).map(item => item.min),\n                  borderColor: 'rgb(0, 0, 255)'\n                },\n                {\n                  label: \"脈拍\",\n                  data: Object.values(blood).map(item => item.heart_rate),\n                  borderColor: 'rgb(255, 0, 255)'\n                },\n                {\n                  label: \"脈圧\",\n                  data: Object.values(blood).map(item => item.heart_pulse),\n                  borderColor: 'rgb(128, 128, 128)'\n                },\n              ],\n              labels: Object.keys(blood)\n            }\n          })\n        })\n      })\n      const weightCtx = document.getElementById(\"weight\").getContext('2d');\n      fetch(\"weight.json\").then(response => {\n        response.json().then(weight => {\n          const weightChart = new Chart(weightCtx, {\n            type: 'line',\n            data: {\n              datasets: [{\n                label: \"体重\",\n                data: Object.values(weight).map(item => item.weight),\n                borderColor: 'rgb(0, 0, 0)'\n              }],\n              labels: Object.keys(weight)\n            }\n          })\n        })\n      })\n    </script>\n  </body>\n</html>\n```\n\n`e the JSON file in the same hierarchy with `fetch`. In this case, the following command- line arguments should be given because the CORS fails when running locally.\n\n`- - file- file- access- from- files`\n\nIn the case of mac OS, please close Chrome and start it. (This argument is not checked on Windows.) )\n\nChrome version: 100.0.4896.127\n\n```zsh\n$ open \"/Applications/Google Chrome.app\" --args --allow-file-access-from-files\n```\n\n## Result\n\nYou can visualize data like this.\n\n<img width=\"841\" alt=\"Screenshot 2022- 04- 17 12 40 16\" src=\"https://user- images.githubusercontent.com/29157528/163 318- 74b 2b 51f- 4efd- ace8- 57bcc1228745.png\">\n\n## Problems\n\nIf you use GitHub Pages, you will not be able to GitHub Pages without GitHub Enterprise.\n\nFor this reason, it is necessary to respond to issues such as URLing URLs, uploading elementsURL with individuals other than al values, adding noindex meta so that Google does not index.\n\nI think that you can start Actions from the mobile app version. Sorry, this entry is only available in 日本語. Because the UI is not optimized for the web version ...UI management is troublesome for API tapping, so I can not do it.)\n\n## Last\n\ntemplate Select `Use this template` at the top right of the screen.\n\n- > https://github.com/kemu3007/health- logger- .",
    "reactions": {
        "url": "https://api.github.com/repos/kemu3007/portal/issues/31/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/31/timeline",
    "performed_via_github_app": null,
    "state_reason": null
}