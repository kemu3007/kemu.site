{"url": "https://api.github.com/repos/kemu3007/portal/issues/59", "repository_url": "https://api.github.com/repos/kemu3007/portal", "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/59/labels{/name}", "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/59/comments", "events_url": "https://api.github.com/repos/kemu3007/portal/issues/59/events", "html_url": "https://github.com/kemu3007/portal/issues/59", "id": 1288798647, "node_id": "I_kwDOG7qoq85M0YG3", "number": 59, "title": "Graphene-Django JWT認証を併用する", "user": {"login": "kemu3007", "id": 29157528, "node_id": "MDQ6VXNlcjI5MTU3NTI4", "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kemu3007", "html_url": "https://github.com/kemu3007", "followers_url": "https://api.github.com/users/kemu3007/followers", "following_url": "https://api.github.com/users/kemu3007/following{/other_user}", "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}", "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions", "organizations_url": "https://api.github.com/users/kemu3007/orgs", "repos_url": "https://api.github.com/users/kemu3007/repos", "events_url": "https://api.github.com/users/kemu3007/events{/privacy}", "received_events_url": "https://api.github.com/users/kemu3007/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3898939400, "node_id": "LA_kwDOG7qoq87oZRgI", "url": "https://api.github.com/repos/kemu3007/portal/labels/article", "name": "article", "color": "C200E5", "default": false, "description": ""}, {"id": 3900075763, "node_id": "LA_kwDOG7qoq87odm7z", "url": "https://api.github.com/repos/kemu3007/portal/labels/Django", "name": "Django", "color": "5FC353", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-06-29T14:16:11Z", "updated_at": "2022-07-01T23:20:57Z", "closed_at": null, "author_association": "OWNER", "active_lock_reason": null, "body": "\r\nJWT認証を利用したGraphQLの実装を行ったので実装を紹介します。\r\n\r\n※ 2022/07/02 middlewareによる実装からview decoratorによる実装に移行しました。\r\n\r\n## 利用ライブラリ\r\n\r\n- graphene-django\r\n- djangorestframework-simplejwt\r\n\r\n## 実装\r\n\r\n- apps.urls\r\n\r\n```python3\r\nfrom django.contrib import admin\r\nfrom django.urls import path\r\nfrom django.views.decorators.csrf import csrf_exempt\r\nfrom graphene_django.views import GraphQLView\r\nfrom rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView\r\n\r\nfrom .decorators import jwt_required\r\n\r\nurlpatterns = [\r\n    path(\"admin/\", admin.site.urls),\r\n    path(\"graphql/\", jwt_required(csrf_exempt(GraphQLView.as_view(graphiql=True)))),\r\n    path(\"api/token/\", TokenObtainPairView.as_view(), name=\"token_obtain_pair\"),\r\n    path(\"api/token/refresh/\", TokenRefreshView.as_view(), name=\"token_refresh\"),\r\n]\r\n\r\n```\r\n\r\n\r\n- apps.decorator\r\n\r\n```python3\r\nimport functools\r\n\r\nfrom django.core.exceptions import PermissionDenied\r\nfrom django.core.handlers.wsgi import WSGIRequest\r\nfrom rest_framework_simplejwt.authentication import JWTAuthentication\r\n\r\n\r\ndef jwt_decorator():\r\n    def decorator(view_func):\r\n        @functools.wraps(view_func)\r\n        def _wrapped_view(request: WSGIRequest, *args, **kwargs):\r\n            if JWTAuthentication().authenticate(request) or request.user.is_authenticated:\r\n                return view_func(request, *args, **kwargs)\r\n            raise PermissionDenied\r\n\r\n        return _wrapped_view\r\n\r\n    return decorator\r\n\r\n\r\ndef jwt_required(function):\r\n    return jwt_decorator()(function)\r\n```\r\n\r\n## 動作確認\r\n\r\n### トークンを含めない場合\r\n\r\n```bash\r\n$ curl localhost:8000/graphql/\r\n<!doctype html>\r\n<html lang=\"en\">\r\n<head>\r\n  <title>403 Forbidden</title>\r\n</head>\r\n<body>\r\n  <h1>403 Forbidden</h1><p></p>\r\n</body>\r\n</html>\r\n```\r\n\r\n### トークンを含めて送信した場合\r\n\r\n1 . トークンの取得\r\n\r\n```bash\r\n$ curl -H \"Content-Type: application/json\" -d '{\"username\":\"kemu\", \"password\":\"SafeP@ssword\"}' localhost:8000/api/token/\r\n\r\n{\"refresh\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY1NjU5ODIyOCwiaWF0IjoxNjU2NTExODI4LCJqdGkiOiJjNmNmNzBhZGM2ODY0NzIwOTZkNjA5YjM2YWE0YjIxNCIsInVzZXJfaWQiOjF9.MEBw8br-anMq01f2QhsJwFsIWr4e-S920vn5lPqGeKA\",\"access\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjU2NTEyMTI4LCJpYXQiOjE2NTY1MTE4MjgsImp0aSI6ImY3OWMyYzM5OTczNzQ0NjdhMWUxZGQyNGMyN2Q3NzhmIiwidXNlcl9pZCI6MX0.Ox8t2OCSuchBeuIbSfmuqRae0sY4HTts_JlqdnrfMmI\"}                                                               \r\n```\r\n\r\naccessトークンのみ今回は利用します。\r\n\r\n2 . トークンの動作確認\r\n\r\n```bash\r\n$ curl -H \"Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjU2NTEyMTI4LCJpYXQiOjE2NTY1MTE4MjgsImp0aSI6ImY3OWMyYzM5OTczNzQ0NjdhMWUxZGQyNGMyN2Q3NzhmIiwidXNlcl9pZCI6MX0.Ox8t2OCSuchBeuIbSfmuqRae0sY4HTts_JlqdnrfMmI\" localhost:8000/graphql/\r\n\r\n{\"errors\":[{\"message\":\"Must provide query string.\"}]}                                                                                                                             \r\n```\r\n\r\nOK、レスポンスがきちんと取得されています。\r\n\r\n", "reactions": {"url": "https://api.github.com/repos/kemu3007/portal/issues/59/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/59/timeline", "performed_via_github_app": null, "state_reason": null}