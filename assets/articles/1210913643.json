{"url": "https://api.github.com/repos/kemu3007/portal/issues/34", "repository_url": "https://api.github.com/repos/kemu3007/portal", "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/34/labels{/name}", "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/34/comments", "events_url": "https://api.github.com/repos/kemu3007/portal/issues/34/events", "html_url": "https://github.com/kemu3007/portal/issues/34", "id": 1210913643, "node_id": "I_kwDOG7qoq85ILRNr", "number": 34, "title": "Django JWT認証を利用する", "user": {"login": "kemu3007", "id": 29157528, "node_id": "MDQ6VXNlcjI5MTU3NTI4", "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kemu3007", "html_url": "https://github.com/kemu3007", "followers_url": "https://api.github.com/users/kemu3007/followers", "following_url": "https://api.github.com/users/kemu3007/following{/other_user}", "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}", "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions", "organizations_url": "https://api.github.com/users/kemu3007/orgs", "repos_url": "https://api.github.com/users/kemu3007/repos", "events_url": "https://api.github.com/users/kemu3007/events{/privacy}", "received_events_url": "https://api.github.com/users/kemu3007/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3898939400, "node_id": "LA_kwDOG7qoq87oZRgI", "url": "https://api.github.com/repos/kemu3007/portal/labels/article", "name": "article", "color": "C200E5", "default": false, "description": ""}, {"id": 3900075763, "node_id": "LA_kwDOG7qoq87odm7z", "url": "https://api.github.com/repos/kemu3007/portal/labels/Django", "name": "Django", "color": "5FC353", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2022-04-21T11:40:05Z", "updated_at": "2022-04-22T09:48:26Z", "closed_at": null, "author_association": "OWNER", "active_lock_reason": null, "body": "\r\n## 導入\r\n\r\n- インストール\r\n\r\n```zsh\r\n$ pip install djangorestframework djangorestframework-simplejwt\r\n```\r\n\r\n- settings.py\r\n\r\n```python\r\nINSTALLED_APPS = [\r\n    ...\r\n    \"rest_framework\",\r\n    \"rest_framework_simplejwt\",\r\n]\r\nREST_FRAMEWORK = {\r\n    ...\r\n    \"DEFAULT_AUTHENTICATION_CLASSES\": (\r\n        ...\r\n        \"rest_framework_simplejwt.authentication.JWTAuthentication\",\r\n    )\r\n}\r\n```\r\n\r\n- urls.py\r\n\r\n\t- 基本的なAPI Viewに関しては提供されているためとりあえず導入\r\n\t- `TokenObtainPairView` : トークンの生成\r\n\t- `TokenRefreshView` : トークンの再発行\r\n\t- `TokenVerifyView ` : トークンの有効性確認\r\n\t- 他にもblacklistなど用意されています。\r\n\r\n```python\r\nfrom django.urls import include, path\r\nfrom rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView, TokenVerifyView\r\n\r\njwt_urls = [\r\n    path(\"\", TokenObtainPairView.as_view()),\r\n    path(\"refresh/\", TokenRefreshView.as_view()),\r\n    path(\"verify/\", TokenVerifyView.as_view()),\r\n]\r\n\r\nurlpatterns = [\r\n    path(\"token/\", include(jwt_urls)),\r\n]\r\n```\r\n\r\n## 動作確認\r\n\r\n### トークンの発行\r\n\r\n適当にユーザを作成し、`token/` にユーザ名とパスワードをPOST\r\n\r\n- レスポンス\r\n\t- `access` はAPIの利用時にヘッダに `Authorization: Bearer {accesskey}` として利用するトークン\r\n\t- `refresh` はアクセストークンを再発行するためのトークン\r\n\r\n```json\r\n{\r\n    \"refresh\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY1MDYyNTc2MiwiaWF0IjoxNjUwNTM5MzYyLCJqdGkiOiJmYjg3M2QzY2RjZTc0YTYzYmQ3ZTQ1OTQ5YjdiN2MxOSIsInVzZXJfaWQiOjJ9.8djfRV1zYHUyVFp5gelG2pTWWmT_QE1gqlLQLb1A2rw\",\r\n    \"access\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjUwNTM5NjYyLCJpYXQiOjE2NTA1MzkzNjIsImp0aSI6ImI4NDU0YTdiMDM3YzRhOWRiMmRjYWRmNTMwMjkwNDMxIiwidXNlcl9pZCI6Mn0.TwIRKSO-Pi6ZZMrJ10DOHTrdVoZtLRasB9vjvdBANIQ\"\r\n}\r\n```\r\n\r\n### トークンのリフレッシュ\r\n\r\n先の工程で取得した `refresh`トークンを `token/refresh/` にPOST\r\n\r\n- レスポンス\r\n\r\n```json\r\n{\r\n    \"access\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjUwNTM5OTMwLCJpYXQiOjE2NTA1MzkzNjIsImp0aSI6IjQ2YzI2OThmOTFmYjQ0ZjY5OWVkNzk4NTY1MmY5MGNmIiwidXNlcl9pZCI6Mn0.IsNvx4DFhZoeW48fShWpwNRoO7_JZ69ws-1XhGuDx3I\"\r\n}\r\n```\r\n\r\n### トークンの有効性確認\r\n\r\nトークンを `token/verify/` にPOST\r\n\r\n- レスポンス\r\n  - 200 OKのみ返却される\r\n  - アクセストークン、リフレッシュトークンどちらも有効性確認可能\r\n  - デフォルトではトークンがリフレッシュされた場合でもリフレッシュ前のトークンが有効期限内であれば利用可能\r\n    - `BLACKLIST_AFTER_ROTATION` をTrueにする必要がある\r\n  - デフォルトでは一つのユーザに紐づくトークンを複数作成できるためセキュリティ的な面で調整が必要そう\r\n    - やり方は要確認 ( 設定でありそうな気がする )\r\n\r\n```json\r\n{}\r\n```\r\n\r\n### トークンを付与してログインが必要なページにアクセスする\r\n- `curl`\r\n\r\n```bash\r\n$ curl localhost:8080/api/v1/user/ -H \"Authorization: Bearer{accesskey}\"\r\n```\r\n\r\n- `rest_framework.test.APIClient`\r\n\r\n```python\r\nclient = APIClient().credentials(HTTP_AUTHORIZATION=f\"Bearer {accesskey}\")\r\nclient.get(\"localhost:8080/api/v1/user/\")\r\n```\r\n\r\nトークンが有効であれば200、不正であれば401が返却されます。\r\n\r\n## 終わりに\r\n\r\nトークン認証はCORSを気にしなくて良く使いやすい反面ちょっとセキュリティ的に怖いなと感じた。\r\nフロント側でどこにトークンを持つべきなんだろうかHTTP Only Cookie? LocalStorage/SessionStorage?\r\n\r\nトークンが盗まれるケースを前提において既存のトークン無効化する機能/有効期限を短く設定しておくといった対応が必要になる。\r\n\r\n今回のコード: https://github.com/kemu3007/django-jwt-sample\r\n", "reactions": {"url": "https://api.github.com/repos/kemu3007/portal/issues/34/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/34/timeline", "performed_via_github_app": null, "state_reason": null}