{"version":3,"mappings":"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","names":["RECAPTCHA_LANGUAGE","InjectionToken","RECAPTCHA_BASE_URL","RECAPTCHA_NONCE","RECAPTCHA_SETTINGS","RECAPTCHA_V3_SITE_KEY","loader","renderMode","onLoaded","urlParams","url","nonce","window","ng2recaptchaloaded","grecaptcha","script","document","createElement","innerHTML","src","async","defer","head","appendChild","RecaptchaLoaderService","constructor","platformId","language","baseUrl","v3SiteKey","this","init","ready","isPlatformBrowser","asObservable","of","subject","BehaviorSubject","next","ɵfac","i0","PLATFORM_ID","ɵprov","factory","nextId","RecaptchaComponent","elementRef","zone","settings","id","errorMode","resolved","EventEmitter","error","siteKey","theme","type","size","badge","ngAfterViewInit","subscription","subscribe","render","Function","renderRecaptcha","ngOnDestroy","grecaptchaReset","unsubscribe","execute","widget","executeRequested","reset","getResponse","emit","__unsafe_widgetValue","expired","errored","args","captchaResponseCallback","response","runOutsideAngular","renderOptions","callback","run","sitekey","tabindex","tabIndex","nativeElement","ɵcmp","selectors","RecaptchaCommonModule","ɵmod","ɵinj","RecaptchaModule","imports","ctx_r5","ContactComponent","modalService","open","content","centered","resolveReCaptcha","isShowed","ctx","ctx_r4","oxw","NewsComponent","keyValuePipe","articlesService","router","ngOnInit","getList","articles","logs","news","transform","Object","assign","sort","a","b","Number","key","navigateArticles","keys","includes","navigate","ToolsListComponent","toolsService","get","tools","_tools","filter","tool","external","routes","path","component","IndexComponent","HomeRoutingModule","RouterModule","HomeModule","KeyValuePipe","CommonModule","NgbModule","SharedModule"],"sources":["./node_modules/ng-recaptcha/fesm2015/ng-recaptcha.mjs","./src/app/home/contact/contact.component.html","./src/app/home/contact/contact.component.ts","./src/app/home/news/news.component.html","./src/app/home/news/news.component.ts","./src/app/home/tools-list/tools-list.component.html","./src/app/home/tools-list/tools-list.component.ts","./src/app/home/home-routing.module.ts","./src/app/home/index/index.component.ts","./src/app/home/index/index.component.html","./src/app/home/home.module.ts"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, EventEmitter, Component, Input, HostBinding, Output, NgModule, forwardRef, Directive, HostListener } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { of, BehaviorSubject, Subject } from 'rxjs';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\n\nconst RECAPTCHA_LANGUAGE = new InjectionToken(\"recaptcha-language\");\nconst RECAPTCHA_BASE_URL = new InjectionToken(\"recaptcha-base-url\");\nconst RECAPTCHA_NONCE = new InjectionToken(\"recaptcha-nonce-tag\");\nconst RECAPTCHA_SETTINGS = new InjectionToken(\"recaptcha-settings\");\nconst RECAPTCHA_V3_SITE_KEY = new InjectionToken(\"recaptcha-v3-site-key\");\n\nfunction loadScript(renderMode, onLoaded, urlParams, url, nonce) {\n    window.ng2recaptchaloaded = () => {\n        onLoaded(grecaptcha);\n    };\n    const script = document.createElement(\"script\");\n    script.innerHTML = \"\";\n    const baseUrl = url || \"https://www.google.com/recaptcha/api.js\";\n    script.src = `${baseUrl}?render=${renderMode}&onload=ng2recaptchaloaded${urlParams}`;\n    if (nonce) {\n        script.nonce = nonce;\n    }\n    script.async = true;\n    script.defer = true;\n    document.head.appendChild(script);\n}\nconst loader = { loadScript };\n\nclass RecaptchaLoaderService {\n    constructor(\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    platformId, language, baseUrl, nonce, v3SiteKey) {\n        this.platformId = platformId;\n        this.language = language;\n        this.baseUrl = baseUrl;\n        this.nonce = nonce;\n        this.v3SiteKey = v3SiteKey;\n        this.init();\n        this.ready = isPlatformBrowser(this.platformId)\n            ? RecaptchaLoaderService.ready.asObservable()\n            : of();\n    }\n    /** @internal */\n    init() {\n        if (RecaptchaLoaderService.ready) {\n            return;\n        }\n        if (isPlatformBrowser(this.platformId)) {\n            const subject = new BehaviorSubject(null);\n            RecaptchaLoaderService.ready = subject;\n            const langParam = this.language ? \"&hl=\" + this.language : \"\";\n            const renderMode = this.v3SiteKey || \"explicit\";\n            loader.loadScript(renderMode, (grecaptcha) => subject.next(grecaptcha), langParam, this.baseUrl, this.nonce);\n        }\n    }\n}\n/**\n * @internal\n * @nocollapse\n */\nRecaptchaLoaderService.ready = null;\nRecaptchaLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaLoaderService, deps: [{ token: PLATFORM_ID }, { token: RECAPTCHA_LANGUAGE, optional: true }, { token: RECAPTCHA_BASE_URL, optional: true }, { token: RECAPTCHA_NONCE, optional: true }, { token: RECAPTCHA_V3_SITE_KEY, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nRecaptchaLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaLoaderService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaLoaderService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: Object, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [RECAPTCHA_LANGUAGE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [RECAPTCHA_BASE_URL]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [RECAPTCHA_NONCE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [RECAPTCHA_V3_SITE_KEY]\n                    }] }];\n    } });\n\nlet nextId = 0;\nclass RecaptchaComponent {\n    constructor(elementRef, loader, zone, settings) {\n        this.elementRef = elementRef;\n        this.loader = loader;\n        this.zone = zone;\n        this.id = `ngrecaptcha-${nextId++}`;\n        this.errorMode = \"default\";\n        this.resolved = new EventEmitter();\n        // The rename will happen a bit later\n        // eslint-disable-next-line @angular-eslint/no-output-native\n        this.error = new EventEmitter();\n        if (settings) {\n            this.siteKey = settings.siteKey;\n            this.theme = settings.theme;\n            this.type = settings.type;\n            this.size = settings.size;\n            this.badge = settings.badge;\n        }\n    }\n    ngAfterViewInit() {\n        this.subscription = this.loader.ready.subscribe((grecaptcha) => {\n            if (grecaptcha != null && grecaptcha.render instanceof Function) {\n                this.grecaptcha = grecaptcha;\n                this.renderRecaptcha();\n            }\n        });\n    }\n    ngOnDestroy() {\n        // reset the captcha to ensure it does not leave anything behind\n        // after the component is no longer needed\n        this.grecaptchaReset();\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    /**\n     * Executes the invisible recaptcha.\n     * Does nothing if component's size is not set to \"invisible\".\n     */\n    execute() {\n        if (this.size !== \"invisible\") {\n            return;\n        }\n        if (this.widget != null) {\n            this.grecaptcha.execute(this.widget);\n        }\n        else {\n            // delay execution of recaptcha until it actually renders\n            this.executeRequested = true;\n        }\n    }\n    reset() {\n        if (this.widget != null) {\n            if (this.grecaptcha.getResponse(this.widget)) {\n                // Only emit an event in case if something would actually change.\n                // That way we do not trigger \"touching\" of the control if someone does a \"reset\"\n                // on a non-resolved captcha.\n                this.resolved.emit(null);\n            }\n            this.grecaptchaReset();\n        }\n    }\n    /**\n     * ⚠️ Warning! Use this property at your own risk!\n     *\n     * While this member is `public`, it is not a part of the component's public API.\n     * The semantic versioning guarantees _will not be honored_! Thus, you might find that this property behavior changes in incompatible ways in minor or even patch releases.\n     * You are **strongly advised** against using this property.\n     * Instead, use more idiomatic ways to get reCAPTCHA value, such as `resolved` EventEmitter, or form-bound methods (ngModel, formControl, and the likes).å\n     */\n    get __unsafe_widgetValue() {\n        return this.widget != null\n            ? this.grecaptcha.getResponse(this.widget)\n            : null;\n    }\n    /** @internal */\n    expired() {\n        this.resolved.emit(null);\n    }\n    /** @internal */\n    errored(args) {\n        this.error.emit(args);\n    }\n    /** @internal */\n    captchaResponseCallback(response) {\n        this.resolved.emit(response);\n    }\n    /** @internal */\n    grecaptchaReset() {\n        if (this.widget != null) {\n            this.zone.runOutsideAngular(() => this.grecaptcha.reset(this.widget));\n        }\n    }\n    /** @internal */\n    renderRecaptcha() {\n        // This `any` can be removed after @types/grecaptcha get updated\n        const renderOptions = {\n            badge: this.badge,\n            callback: (response) => {\n                this.zone.run(() => this.captchaResponseCallback(response));\n            },\n            \"expired-callback\": () => {\n                this.zone.run(() => this.expired());\n            },\n            sitekey: this.siteKey,\n            size: this.size,\n            tabindex: this.tabIndex,\n            theme: this.theme,\n            type: this.type,\n        };\n        if (this.errorMode === \"handled\") {\n            renderOptions[\"error-callback\"] = (...args) => {\n                this.zone.run(() => this.errored(args));\n            };\n        }\n        this.widget = this.grecaptcha.render(this.elementRef.nativeElement, renderOptions);\n        if (this.executeRequested === true) {\n            this.executeRequested = false;\n            this.execute();\n        }\n    }\n}\nRecaptchaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaComponent, deps: [{ token: i0.ElementRef }, { token: RecaptchaLoaderService }, { token: i0.NgZone }, { token: RECAPTCHA_SETTINGS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nRecaptchaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.0\", type: RecaptchaComponent, selector: \"re-captcha\", inputs: { id: \"id\", siteKey: \"siteKey\", theme: \"theme\", type: \"type\", size: \"size\", tabIndex: \"tabIndex\", badge: \"badge\", errorMode: \"errorMode\" }, outputs: { resolved: \"resolved\", error: \"error\" }, host: { properties: { \"attr.id\": \"this.id\" } }, exportAs: [\"reCaptcha\"], ngImport: i0, template: ``, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaComponent, decorators: [{\n            type: Component,\n            args: [{\n                    exportAs: \"reCaptcha\",\n                    selector: \"re-captcha\",\n                    template: ``,\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: RecaptchaLoaderService }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [RECAPTCHA_SETTINGS]\n                    }] }];\n    }, propDecorators: { id: [{\n                type: Input\n            }, {\n                type: HostBinding,\n                args: [\"attr.id\"]\n            }], siteKey: [{\n                type: Input\n            }], theme: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], tabIndex: [{\n                type: Input\n            }], badge: [{\n                type: Input\n            }], errorMode: [{\n                type: Input\n            }], resolved: [{\n                type: Output\n            }], error: [{\n                type: Output\n            }] } });\n\nclass RecaptchaCommonModule {\n}\nRecaptchaCommonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaCommonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRecaptchaCommonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaCommonModule, declarations: [RecaptchaComponent], exports: [RecaptchaComponent] });\nRecaptchaCommonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaCommonModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaCommonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [RecaptchaComponent],\n                    exports: [RecaptchaComponent],\n                }]\n        }] });\n\nclass RecaptchaModule {\n}\nRecaptchaModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRecaptchaModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaModule, imports: [RecaptchaCommonModule], exports: [RecaptchaComponent] });\nRecaptchaModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaModule, providers: [RecaptchaLoaderService], imports: [[RecaptchaCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [RecaptchaComponent],\n                    imports: [RecaptchaCommonModule],\n                    providers: [RecaptchaLoaderService],\n                }]\n        }] });\n\n/**\n * The main service for working with reCAPTCHA v3 APIs.\n *\n * Use the `execute` method for executing a single action, and\n * `onExecute` observable for listening to all actions at once.\n */\nclass ReCaptchaV3Service {\n    constructor(zone, siteKey, \n    // eslint-disable-next-line @typescript-eslint/ban-types\n    platformId, baseUrl, nonce, language) {\n        /** @internal */\n        this.onLoadComplete = (grecaptcha) => {\n            this.grecaptcha = grecaptcha;\n            if (this.actionBacklog && this.actionBacklog.length > 0) {\n                this.actionBacklog.forEach(([action, subject]) => this.executeActionWithSubject(action, subject));\n                this.actionBacklog = undefined;\n            }\n        };\n        this.zone = zone;\n        this.isBrowser = isPlatformBrowser(platformId);\n        this.siteKey = siteKey;\n        this.nonce = nonce;\n        this.language = language;\n        this.baseUrl = baseUrl;\n        this.init();\n    }\n    get onExecute() {\n        if (!this.onExecuteSubject) {\n            this.onExecuteSubject = new Subject();\n            this.onExecuteObservable = this.onExecuteSubject.asObservable();\n        }\n        return this.onExecuteObservable;\n    }\n    get onExecuteError() {\n        if (!this.onExecuteErrorSubject) {\n            this.onExecuteErrorSubject = new Subject();\n            this.onExecuteErrorObservable = this.onExecuteErrorSubject.asObservable();\n        }\n        return this.onExecuteErrorObservable;\n    }\n    /**\n     * Executes the provided `action` with reCAPTCHA v3 API.\n     * Use the emitted token value for verification purposes on the backend.\n     *\n     * For more information about reCAPTCHA v3 actions and tokens refer to the official documentation at\n     * https://developers.google.com/recaptcha/docs/v3.\n     *\n     * @param {string} action the action to execute\n     * @returns {Observable<string>} an `Observable` that will emit the reCAPTCHA v3 string `token` value whenever ready.\n     * The returned `Observable` completes immediately after emitting a value.\n     */\n    execute(action) {\n        const subject = new Subject();\n        if (this.isBrowser) {\n            if (!this.grecaptcha) {\n                // todo: add to array of later executions\n                if (!this.actionBacklog) {\n                    this.actionBacklog = [];\n                }\n                this.actionBacklog.push([action, subject]);\n            }\n            else {\n                this.executeActionWithSubject(action, subject);\n            }\n        }\n        return subject.asObservable();\n    }\n    /** @internal */\n    executeActionWithSubject(action, subject) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const onError = (error) => {\n            this.zone.run(() => {\n                subject.error(error);\n                if (this.onExecuteErrorSubject) {\n                    // We don't know any better at this point, unfortunately, so have to resort to `any`\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                    this.onExecuteErrorSubject.next({ action, error });\n                }\n            });\n        };\n        this.zone.runOutsideAngular(() => {\n            try {\n                this.grecaptcha\n                    .execute(this.siteKey, { action })\n                    .then((token) => {\n                    this.zone.run(() => {\n                        subject.next(token);\n                        subject.complete();\n                        if (this.onExecuteSubject) {\n                            this.onExecuteSubject.next({ action, token });\n                        }\n                    });\n                }, onError);\n            }\n            catch (e) {\n                onError(e);\n            }\n        });\n    }\n    /** @internal */\n    init() {\n        if (this.isBrowser) {\n            if (\"grecaptcha\" in window) {\n                this.grecaptcha = grecaptcha;\n            }\n            else {\n                const langParam = this.language ? \"&hl=\" + this.language : \"\";\n                loader.loadScript(this.siteKey, this.onLoadComplete, langParam, this.baseUrl, this.nonce);\n            }\n        }\n    }\n}\nReCaptchaV3Service.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: ReCaptchaV3Service, deps: [{ token: i0.NgZone }, { token: RECAPTCHA_V3_SITE_KEY }, { token: PLATFORM_ID }, { token: RECAPTCHA_BASE_URL, optional: true }, { token: RECAPTCHA_NONCE, optional: true }, { token: RECAPTCHA_LANGUAGE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nReCaptchaV3Service.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: ReCaptchaV3Service });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: ReCaptchaV3Service, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [RECAPTCHA_V3_SITE_KEY]\n                    }] }, { type: Object, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [RECAPTCHA_BASE_URL]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [RECAPTCHA_NONCE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [RECAPTCHA_LANGUAGE]\n                    }] }];\n    } });\n\nclass RecaptchaV3Module {\n}\nRecaptchaV3Module.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaV3Module, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRecaptchaV3Module.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaV3Module });\nRecaptchaV3Module.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaV3Module, providers: [ReCaptchaV3Service] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaV3Module, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [ReCaptchaV3Service],\n                }]\n        }] });\n\nclass RecaptchaValueAccessorDirective {\n    constructor(host) {\n        this.host = host;\n        this.requiresControllerReset = false;\n    }\n    writeValue(value) {\n        if (!value) {\n            this.host.reset();\n        }\n        else {\n            // In this case, it is most likely that a form controller has requested to write a specific value into the component.\n            // This isn't really a supported case - reCAPTCHA values are single-use, and, in a sense, readonly.\n            // What this means is that the form controller has recaptcha control state of X, while reCAPTCHA itself can't \"restore\"\n            // to that state. In order to make form controller aware of this discrepancy, and to fix the said misalignment,\n            // we'll be telling the controller to \"reset\" the value back to null.\n            if (this.host.__unsafe_widgetValue !== value &&\n                Boolean(this.host.__unsafe_widgetValue) === false) {\n                this.requiresControllerReset = true;\n            }\n        }\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n        if (this.requiresControllerReset) {\n            this.requiresControllerReset = false;\n            this.onChange(null);\n        }\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    onResolve($event) {\n        if (this.onChange) {\n            this.onChange($event);\n        }\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n}\nRecaptchaValueAccessorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaValueAccessorDirective, deps: [{ token: RecaptchaComponent }], target: i0.ɵɵFactoryTarget.Directive });\nRecaptchaValueAccessorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0\", type: RecaptchaValueAccessorDirective, selector: \"re-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]\", host: { listeners: { \"resolved\": \"onResolve($event)\" } }, providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => RecaptchaValueAccessorDirective),\n        },\n    ], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaValueAccessorDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    providers: [\n                        {\n                            multi: true,\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => RecaptchaValueAccessorDirective),\n                        },\n                    ],\n                    selector: \"re-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]\",\n                }]\n        }], ctorParameters: function () { return [{ type: RecaptchaComponent }]; }, propDecorators: { onResolve: [{\n                type: HostListener,\n                args: [\"resolved\", [\"$event\"]]\n            }] } });\n\nclass RecaptchaFormsModule {\n}\nRecaptchaFormsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaFormsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRecaptchaFormsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaFormsModule, declarations: [RecaptchaValueAccessorDirective], imports: [FormsModule, RecaptchaCommonModule], exports: [RecaptchaValueAccessorDirective] });\nRecaptchaFormsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaFormsModule, imports: [[FormsModule, RecaptchaCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: RecaptchaFormsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [RecaptchaValueAccessorDirective],\n                    exports: [RecaptchaValueAccessorDirective],\n                    imports: [FormsModule, RecaptchaCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RECAPTCHA_BASE_URL, RECAPTCHA_LANGUAGE, RECAPTCHA_NONCE, RECAPTCHA_SETTINGS, RECAPTCHA_V3_SITE_KEY, ReCaptchaV3Service, RecaptchaComponent, RecaptchaFormsModule, RecaptchaLoaderService, RecaptchaModule, RecaptchaV3Module, RecaptchaValueAccessorDirective };\n","<div class=\"container mt-3\">\n  <h2>Contact</h2>\n  <hr />\n  <div>仕事の依頼などは以下のフォームよりお願いします。<br />セールスメールはお控えください。</div>\n  <div>Please use the following form for work requests.<br />Please refrain from sales emails.</div>\n  <div class=\"mt-3 d-flex justify-content-center\">\n    <button matRipple class=\"btn btn-secondary mt-3\" (click)=\"open(content)\">\n      フォームに入力する / Fill out the form\n    </button>\n  </div>\n</div>\n\n<ng-template #content let-modal>\n  <div class=\"modal-body\">\n    <div class=\"d-flex justify-content-center\">\n      <re-captcha\n        *ngIf=\"!isShowed\"\n        (resolved)=\"resolveReCaptcha()\"\n        siteKey=\"6LeCx-4eAAAAAM4bOC4sVLZB0uYrfBNE59Rlvz52\"\n      ></re-captcha>\n      <ng-container *ngIf=\"isShowed\">\n        <iframe\n          src=\"https://docs.google.com/forms/d/e/1FAIpQLSeEw2fPgmvruDNQC3UK62PUOZbCXGzoKgtvYL4CIP1DO7wAag/viewform?embedded=true\"\n          width=\"640\"\n          height=\"677\"\n          frameborder=\"0\"\n          marginheight=\"0\"\n          marginwidth=\"0\"\n          >読み込んでいます…</iframe\n        >\n      </ng-container>\n    </div>\n  </div>\n</ng-template>\n","import { Component, TemplateRef } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n  selector: 'app-contact',\n  templateUrl: './contact.component.html',\n})\nexport class ContactComponent {\n  constructor(private modalService: NgbModal) {}\n\n  isShowed = false;\n\n  open(content: TemplateRef<any>) {\n    this.modalService.open(content, { centered: true, size: 'lg' });\n  }\n\n  resolveReCaptcha() {\n    this.isShowed = true;\n  }\n}\n","<div class=\"list-group border\" id=\"news\">\n  <div *ngFor=\"let item of news; index as i\" class=\"text-start mt-1 ms-1\">\n    <span class=\"text-muted\">{{ item.value.created_at | date: 'yyyy.MM.dd' }}</span>\n    <div style=\"cursor: pointer\" matRipple class=\"list-group-item border-0\" (click)=\"navigateArticles(item.key)\">\n      <span *ngIf=\"i === 0\" class=\"badge bg-danger me-1\">New</span>{{ item.value.title }}\n    </div>\n  </div>\n</div>\n","import { KeyValuePipe } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Article } from '@app/shared/articles/articles';\nimport { ArticlesService } from '@app/shared/articles/articles.service';\n\n@Component({\n  selector: 'app-news',\n  templateUrl: './news.component.html',\n  styleUrls: ['./news.component.scss'],\n})\nexport class NewsComponent implements OnInit {\n  constructor(private keyValuePipe: KeyValuePipe, private articlesService: ArticlesService, private router: Router) {}\n\n  articles: Record<string, Article> = {};\n  logs: Record<string, Article> = {};\n\n  ngOnInit(): void {\n    this.articlesService.getList('/assets/articles/list.json').subscribe((articles) => (this.articles = articles));\n    this.articlesService.getList('/assets/logs/list.json').subscribe((logs) => (this.logs = logs));\n  }\n\n  get news() {\n    return this.keyValuePipe\n      .transform(Object.assign({}, this.articles, this.logs))\n      .sort((a, b) => Number(b.key) - Number(a.key));\n  }\n\n  navigateArticles(id: string) {\n    if (Object.keys(this.articles).includes(id)) {\n      this.router.navigate(['/blog/', id]);\n    } else {\n      this.router.navigate(['/log/', id]);\n    }\n  }\n}\n","<div id=\"tools\" class=\"list-group\">\n  <a class=\"list-group-item d-flex\" style=\"cursor: pointer\" *ngFor=\"let tool of tools\" [href]=\"tool.link\">\n    <div matRipple class=\"text-start\">\n      <div class=\"fw-bold\">{{ tool.label }}</div>\n      {{ tool.description }}\n    </div>\n  </a>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Tool } from '@app/shared/tools/tools';\nimport { ToolsService } from '@app/shared/tools/tools.service';\n\n@Component({\n  selector: 'app-tools-list',\n  templateUrl: './tools-list.component.html',\n  styleUrls: ['./tools-list.component.scss'],\n})\nexport class ToolsListComponent implements OnInit {\n  _tools: Tool[] = [];\n\n  constructor(private router: Router, private toolsService: ToolsService) {}\n\n  ngOnInit() {\n    this.toolsService.get().subscribe((tools) => (this._tools = tools));\n  }\n\n  get tools() {\n    return this._tools.filter((tool) => !tool.external);\n  }\n}\n","import { ContactComponent } from './contact/contact.component';\nimport { IndexComponent } from './index/index.component';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  { path: '', component: IndexComponent },\n  { path: 'contact', component: ContactComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class HomeRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Tool } from '@app/shared/tools/tools';\nimport { ToolsService } from '@app/shared/tools/tools.service';\n\n@Component({\n  selector: 'app-index',\n  templateUrl: './index.component.html',\n})\nexport class IndexComponent implements OnInit {\n  tools: Tool[] = [];\n\n  constructor(private toolsService: ToolsService) {}\n\n  ngOnInit(): void {\n    this.toolsService.get().subscribe((tools) => (this.tools = tools));\n  }\n}\n","<ngb-alert type=\"warning\" class=\"my-0 py-1\" [dismissible]=\"false\"\n  >このサイトは広告収益で成り立っています。広告ブロックツールは停止してください。\n</ngb-alert>\n<div class=\"container text-center mt-3\">\n  <div>\n    <h2>Contributions</h2>\n    <div class=\"overflow-auto\">\n      <mat-tab-group>\n        <mat-tab label=\"2022\">\n          <iframe width=\"100%\" src=\"/assets/iframes/weed_2022.html\"></iframe>\n        </mat-tab>\n        <mat-tab label=\"2021\">\n          <iframe width=\"100%\" src=\"/assets/iframes/weed_2021.html\"></iframe>\n        </mat-tab>\n        <mat-tab label=\"2020\">\n          <iframe width=\"100%\" src=\"/assets/iframes/weed_2020.html\"></iframe>\n        </mat-tab>\n        <mat-tab label=\"2019\">\n          <iframe width=\"100%\" src=\"/assets/iframes/weed_2019.html\"></iframe>\n        </mat-tab>\n        <mat-tab label=\"2018\">\n          <iframe width=\"100%\" src=\"/assets/iframes/weed_2018.html\"></iframe>\n        </mat-tab>\n        <mat-tab label=\"2017\">\n          <iframe width=\"100%\" src=\"/assets/iframes/weed_2017.html\"></iframe>\n        </mat-tab>\n      </mat-tab-group>\n    </div>\n    <hr />\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-6\">\n      <h2>\n        News <a href=\"/rss.xml\" class=\"btn btn-sm btn-light border text-muted\"><i class=\"bi bi-rss\"></i></a>\n      </h2>\n      <div class=\"border border-light rounded shadow\">\n        <app-news></app-news>\n      </div>\n    </div>\n    <div class=\"col-md-6\">\n      <h2>Tools</h2>\n      <div class=\"border border-light rounded shadow\">\n        <app-tools-list></app-tools-list>\n      </div>\n      <h2 class=\"mt-2\">Links</h2>\n      <ol class=\"list-group shadow\">\n        <a class=\"list-group-item d-flex\" href=\"https://kemu.site\">\n          <div class=\"text-start\">\n            <div class=\"fw-bold\">旧ブログ</div>\n            2022-03以前に管理していたブログ、頃合いを見て停止予定です。\n          </div>\n        </a>\n      </ol>\n    </div>\n  </div>\n</div>\n\n<div class=\"mt-5 d-flex justify-content-center\">\n  <app-ads type=\"auto\"></app-ads>\n</div>\n","import { ContactComponent } from './contact/contact.component';\nimport { HomeRoutingModule } from './home-routing.module';\nimport { IndexComponent } from './index/index.component';\nimport { NewsComponent } from './news/news.component';\nimport { ToolsListComponent } from './tools-list/tools-list.component';\nimport { CommonModule, KeyValuePipe } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SharedModule } from '@app/shared/shared.module';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { RecaptchaModule } from 'ng-recaptcha';\n\n@NgModule({\n  declarations: [IndexComponent, ContactComponent, NewsComponent, ToolsListComponent],\n  imports: [CommonModule, HomeRoutingModule, NgbModule, RecaptchaModule, SharedModule],\n  providers: [KeyValuePipe],\n})\nexport class HomeModule {}\n"],"sourceRoot":"webpack:///","file":"742.9144b0f66387c943.js"}