{
  "url": "https://api.github.com/repos/kemu3007/portal/issues/52",
  "repository_url": "https://api.github.com/repos/kemu3007/portal",
  "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/52/labels{/name}",
  "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/52/comments",
  "events_url": "https://api.github.com/repos/kemu3007/portal/issues/52/events",
  "html_url": "https://github.com/kemu3007/portal/issues/52",
  "id": 1260904707,
  "node_id": "I_kwDOG7qoq85LJ-ED",
  "number": 52,
  "title": "GraphQL graphene-django n+1問題の対策を行う",
  "user": {
    "login": "kemu3007",
    "id": 29157528,
    "node_id": "MDQ6VXNlcjI5MTU3NTI4",
    "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kemu3007",
    "html_url": "https://github.com/kemu3007",
    "followers_url": "https://api.github.com/users/kemu3007/followers",
    "following_url": "https://api.github.com/users/kemu3007/following{/other_user}",
    "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions",
    "organizations_url": "https://api.github.com/users/kemu3007/orgs",
    "repos_url": "https://api.github.com/users/kemu3007/repos",
    "events_url": "https://api.github.com/users/kemu3007/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kemu3007/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3898939400,
      "node_id": "LA_kwDOG7qoq87oZRgI",
      "url": "https://api.github.com/repos/kemu3007/portal/labels/article",
      "name": "article",
      "color": "C200E5",
      "default": false,
      "description": ""
    },
    {
      "id": 3900075763,
      "node_id": "LA_kwDOG7qoq87odm7z",
      "url": "https://api.github.com/repos/kemu3007/portal/labels/Django",
      "name": "Django",
      "color": "5FC353",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [],
  "milestone": null,
  "comments": 0,
  "created_at": "2022-06-04T22:26:18Z",
  "updated_at": "2022-06-04T22:29:44Z",
  "closed_at": null,
  "author_association": "OWNER",
  "active_lock_reason": null,
  "body": "\r\n# n+1 問題\r\n\r\ngraphQLはフロント側から関連モデルを指定して取得することが可能なため、n+1問題が発生します。\r\n以下のようにArticleモデルからUserモデルを取得するようなクエリを想定します。\r\n\r\n```graphql\r\nquery {\r\n  articles {\r\n    id\r\n    user {\r\n      id\r\n    }\r\n    text\r\n  }\r\n}\r\n```\r\nこの場合、バックエンドの実装が以下のようになっている場合、n+1問題が発生します。\r\n\r\n```python3\r\nimport graphene\r\nfrom graphene_django import DjangoObjectType\r\n\r\nfrom apps.models import Article\r\n\r\n\r\nclass Query(graphene.ObjectType):\r\n    articles = graphene.List(ArticleType, description=\"記事一覧取得API\")\r\n\r\n    def resolve_articles(self, info):\r\n        return Article.objects.all()\r\n```\r\n\r\n発行されるクエリは以下の通りです。\r\n\r\n```sql\r\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\" FROM \"apps_article\"\r\n\r\nSELECT \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"auth_user\" WHERE \"auth_user\".\"id\" = '1' LIMIT 21\r\n\r\nSELECT \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"auth_user\" WHERE \"auth_user\".\"id\" = '2' LIMIT 21\r\n\r\nSELECT \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"auth_user\" WHERE \"auth_user\".\"id\" = '3' LIMIT 21\r\n\r\n...\r\n```\r\n\r\n典型的なn+1が発生した際のクエリです。\r\n\r\n以下のようにselect_related()を利用すると発生しなくなります。\r\n\r\n```python3\r\nimport graphene\r\nfrom graphene_django import DjangoObjectType\r\n\r\nfrom apps.models import Article\r\n\r\n\r\nclass Query(graphene.ObjectType):\r\n    articles = graphene.List(ArticleType, description=\"記事一覧取得API\")\r\n\r\n    def resolve_articles(self, info):\r\n        return Article.objects.all().select_related()\r\n```\r\n\r\n\r\n```sql\r\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\", \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"apps_article\" INNER JOIN \"auth_user\" ON (\"apps_article\".\"user_id\" = \"auth_user\".\"id\")\r\n```\r\n\r\nただ、この実装をしてしまうとUserレコードへの参照が必要ないタイミングでもJOINして取得してしまいます。\r\n\r\n\r\nそのため、レコード数が増えたタイミングで不具合が発生する可能性があるためGraphql クエリによって投げるSQLを変えるようにします。\r\n\r\n```python3\r\nfrom typing import Dict, List, Union\r\n\r\nimport graphene\r\nfrom django.contrib.auth.models import User\r\nfrom django.contrib.contenttypes.models import ContentType\r\nfrom django.db import models\r\nfrom django.db.models import Model, Prefetch, QuerySet\r\nfrom graphene.utils.str_converters import to_snake_case\r\nfrom graphene_django.debug import DjangoDebug\r\nfrom graphene_django.utils import get_model_fields\r\nfrom graphql.execution.base import ResolveInfo\r\nfrom graphql.language import ast as graphql_ast\r\n\r\nfrom apps.models import Article\r\n\r\n\r\nclass QueryOptimizer:\r\n    \"\"\"紐付きのあるモデルをクエリの内容によって自動的にselect_related/prefetch_relatedを行う\"\"\"\r\n\r\n    def __init__(self) -> None:\r\n        self.select_related_fields: List[str] = []\r\n        self.prefetch_objects: List[Prefetch] = []\r\n\r\n    def optimize_query(self, info: Union[ResolveInfo, graphql_ast.Field], queryset: QuerySet) -> QuerySet:\r\n        \"\"\"クエリの最適化処理\"\"\"\r\n        field: graphql_ast.Field = info.field_asts[0] if isinstance(info, ResolveInfo) else info\r\n        self._extract_related_fields(queryset.model, field)\r\n        return queryset.select_related(*self.select_related_fields).prefetch_related(*self.prefetch_objects)\r\n\r\n    def _extract_related_fields(self, model: type[Model], field: graphql_ast.Field, prefix: str = \"\"):\r\n        \"\"\"リクエストフィールド内の関連モデルを参照/逆参照に応じて再起的に分類\"\"\"\r\n\r\n        fields: graphql_ast.SelectionSet = field.selection_set\r\n        model_fields: Dict[str, models.Field] = {key: field for (key, field) in get_model_fields(model)}\r\n        for field in filter(lambda x: x.selection_set is not None, fields.selections):\r\n            related_name = to_snake_case(f\"{prefix}__{field.name.value}\" if prefix else field.name.value)\r\n            field_name = to_snake_case(field.name.value)\r\n            model_field = model_fields[field_name]\r\n            if model_field.many_to_many or model_field.one_to_many:\r\n                self.prefetch_objects.append(\r\n                    Prefetch(related_name, QueryOptimizer().optimize_query(field, model_field.related_model.objects.all()))\r\n                )\r\n                continue\r\n            self.select_related_fields.append(related_name)\r\n            self._extract_related_fields(model_field.related_model, field, related_name)\r\n\r\nclass Query(graphene.ObjectType):\r\n    articles = graphene.List(ArticleType, description=\"記事一覧取得API\")\r\n\r\n```\r\n\r\nこれにより、発行されるSQLが少なくなります。\r\n\r\n例えばこういったクエリを書いた際。\r\n\r\n```graphql\r\nquery {\r\n  articles {\r\n    id\r\n    text\r\n    user {\r\n      articleSet {\r\n        user {\r\n          id\r\n          articleSet {\r\n            user {\r\n              id\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nn+1問題の対策をおこなっていない際以下のようになります。\r\n\r\n```sql\r\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\" FROM \"apps_article\"\r\nSELECT \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"auth_user\" WHERE \"auth_user\".\"id\" = '1' LIMIT 21\r\nSELECT \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"auth_user\" WHERE \"auth_user\".\"id\" = '2' LIMIT 21\r\nSELECT \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"auth_user\" WHERE \"auth_user\".\"id\" = '3' LIMIT 21\r\nSELECT \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"auth_user\" WHERE \"auth_user\".\"id\" = '4' LIMIT 21\r\nSELECT \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"auth_user\" WHERE \"auth_user\".\"id\" = '5' LIMIT 21\r\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\" FROM \"apps_article\" WHERE \"apps_article\".\"user_id\" = '1'\r\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\" FROM \"apps_article\" WHERE \"apps_article\".\"user_id\" = '2'\r\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\" FROM \"apps_article\" WHERE \"apps_article\".\"user_id\" = '3'\r\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\" FROM \"apps_article\" WHERE \"apps_article\".\"user_id\" = '4'\r\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\" FROM \"apps_article\" WHERE \"apps_article\".\"user_id\" = '5'\r\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\" FROM \"apps_article\" WHERE \"apps_article\".\"user_id\" = '1'\r\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\" FROM \"apps_article\" WHERE \"apps_article\".\"user_id\" = '2'\r\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\" FROM \"apps_article\" WHERE \"apps_article\".\"user_id\" = '3'\r\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\" FROM \"apps_article\" WHERE \"apps_article\".\"user_id\" = '4'\r\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\" FROM \"apps_article\" WHERE \"apps_article\".\"user_id\" = '5'\r\n```\r\n\r\nQueryOptimizerを利用した場合\r\n\r\n```sql\r\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\", \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"apps_article\" INNER JOIN \"auth_user\" ON (\"apps_article\".\"user_id\" = \"auth_user\".\"id\")\r\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\", \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"apps_article\" INNER JOIN \"auth_user\" ON (\"apps_article\".\"user_id\" = \"auth_user\".\"id\") WHERE \"apps_article\".\"user_id\" IN ('1', '2', '3', '4', '5')\r\nSELECT \"apps_article\".\"id\", \"apps_article\".\"user_id\", \"apps_article\".\"text\", \"auth_user\".\"id\", \"auth_user\".\"password\", \"auth_user\".\"last_login\", \"auth_user\".\"is_superuser\", \"auth_user\".\"username\", \"auth_user\".\"first_name\", \"auth_user\".\"last_name\", \"auth_user\".\"email\", \"auth_user\".\"is_staff\", \"auth_user\".\"is_active\", \"auth_user\".\"date_joined\" FROM \"apps_article\" INNER JOIN \"auth_user\" ON (\"apps_article\".\"user_id\" = \"auth_user\".\"id\") WHERE \"apps_article\".\"user_id\" IN ('1', '2', '3', '4', '5')\r\n```\r\n\r\nこれによりn+1問題の対策を行うことができました。\r\n",
  "reactions": {
    "url": "https://api.github.com/repos/kemu3007/portal/issues/52/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/52/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
