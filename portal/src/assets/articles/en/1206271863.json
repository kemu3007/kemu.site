{
  "url": "https://api.github.com/repos/kemu3007/portal/issues/31",
  "repository_url": "https://api.github.com/repos/kemu3007/portal",
  "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/31/labels{/name}",
  "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/31/comments",
  "events_url": "https://api.github.com/repos/kemu3007/portal/issues/31/events",
  "html_url": "https://github.com/kemu3007/portal/issues/31",
  "id": 1206271863,
  "node_id": "I_kwDOG7qoq85H5j93",
  "number": 31,
  "title": "Create a health care application with GitHub Actions and GitHub Pages",
  "user": {
    "login": "kemu3007",
    "id": 29157528,
    "node_id": "MDQ6VXNlcjI5MTU3NTI4",
    "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kemu3007",
    "html_url": "https://github.com/kemu3007",
    "followers_url": "https://api.github.com/users/kemu3007/followers",
    "following_url": "https://api.github.com/users/kemu3007/following{/other_user}",
    "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions",
    "organizations_url": "https://api.github.com/users/kemu3007/orgs",
    "repos_url": "https://api.github.com/users/kemu3007/repos",
    "events_url": "https://api.github.com/users/kemu3007/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kemu3007/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3898939400,
      "node_id": "LA_kwDOG7qoq87oZRgI",
      "url": "https://api.github.com/repos/kemu3007/portal/labels/article",
      "name": "article",
      "color": "C200E5",
      "default": false,
      "description": ""
    },
    {
      "id": 3972772995,
      "node_id": "LA_kwDOG7qoq87sy7SD",
      "url": "https://api.github.com/repos/kemu3007/portal/labels/GitHub",
      "name": "GitHub",
      "color": "5866BF",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [],
  "milestone": null,
  "comments": 0,
  "created_at": "2022-04-17T03:44:20Z",
  "updated_at": "2022-04-26T15:33:27Z",
  "closed_at": null,
  "author_association": "OWNER",
  "active_lock_reason": null,
  "body": "\n## Original concept\n\n-  I want to be able to check it online on any device, but I don't want to set up an EC2 or something and deploy it.\n-  Data is entered once a day.\n-  The data to be registered are minimum blood pressure, maximum blood pressure, pulse rate, pulse pressure, and body weight.\n-  Daily data is displayed in easy- to- understand charts.\n\n## Application Specification\n\n-  Data is entered once a day using GitHub Actions.\n-  Save the data in JSON format on GitHub Actions and push to the repository.\n-  Distribution will be via GitHub Pages and data will be visualized in Chart.js.\n\n## Application Configuration\n<img width=\"752\" alt=\"screenshot 2022- 04- 17 12 17 04\" src=\"https://user- images.githubusercontent.com/29157528/163698719- 2141b3d6- b45f- 435a- bab0- 8e92e5bc6cc2.png\">\n\n## Enter data in GitHub Actions\n\nYou can put any value into GitHub Actions in the following yml format.\n\n```yml\nname: write-data\n\non:\n  workflow_dispatch:\n    inputs:\n      blood_min:\n        default: 0\n        required: true\n      blood_max:\n        default: 0\n        required: true\n      heart_rate:\n        default: 0\n        required: true\n      heart_pulse:\n        default: 0\n        required: true\n      weight:\n        default: 0\n        required: true\n```\nThe actual UI is as follows\n\n<img width=\"257\" alt=\"screenshot 2022- 04- 17 12 25 14\" src=\"https://user- images.githubusercontent.com/29157528/163698957- 6fc1b74e- f799- 4823- ad85- 68f96edc211d.png\">\n\nInput values are available in the form `{{ github.event.inputs.blood_min }}`.\n\n## Save data in JSON format\n\nTo make the data easier to read in JavaScript, the values passed to GitHub Actions are processed in a Python script. (The sample code uses ZoneInfo, so Python 3.9 or later must be used.)\n\n```python\nimport argparse\nfrom datetime import datetime\nimport json\nfrom pathlib import Path\nfrom zoneinfo import ZoneInfo\n\n\nparser = argparse.ArgumentParser()\n\nparser.add_argument(\"blood_min\", type=int)\nparser.add_argument(\"blood_max\", type=int)\nparser.add_argument(\"heart_rate\", type=int)\nparser.add_argument(\"heart_pulse\", type=int)\nparser.add_argument(\"weight\", type=float)\n\n\nblood_json = Path(\"docs/blood.json\")\nweight_json = Path(\"docs/weight.json\")\n\n\nif __name__ == \"__main__\":\n    today = datetime.now(ZoneInfo(\"Asia/Tokyo\")).date()\n    arguments = parser.parse_args()\n    blood = json.loads(blood_json.read_text())\n    blood[str(today)] = {\n        \"min\": arguments.blood_min,\n        \"max\": arguments.blood_max,\n        \"heart_rate\": arguments.heart_rate,\n        \"heart_pulse\": arguments.heart_pulse,\n    }\n    blood_json.write_text(json.dumps(blood))\n    weight = json.loads(weight_json.read_text())\n    weight[str(today)] = {\"weight\": arguments.weight}\n    weight_json.write_text(json.dumps(weight))\n``` \n\nThis time, to distribute `docs/` in the repository main branch, prepare `docs/blood.json` and `docs/weight.json` and store the JSON data.\n\nNow you are ready to deliver a JSON file with date and body data.\n\n## Visualize JSON data\n\nSince JSON as it is is inconvenient for humans to read, it is visualized in a graph format.\n\nThe library used is [Chart.js](https://www.chartjs.org/).\n\n### index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"ja\">\n  <head>\n    <title>Health Logger</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\">\n  </head>\n  <body>\n    <div class=\"container mt-5\">\n      <h2>Blood</h2>\n      <canvas id=\"blood\" height=\"80px\"></canvas>\n      <h2>Weight</h2>\n      <canvas id=\"weight\" height=\"80px\"></canvas>\n    </div>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM\" crossorigin=\"anonymous\"></script>\n    <script>\n      const bloodCtx = document.getElementById(\"blood\").getContext('2d');\n      fetch(\"blood.json\").then(response => {\n        response.json().then(blood => {\n          console.log(blood)\n          const bloodChart = new Chart(bloodCtx, {\n            type: 'line',\n            data: {\n              datasets: [\n                {\n                  label: \"最高血圧\",\n                  data: Object.values(blood).map(item => item.max),\n                  borderColor: 'rgb(255, 0, 0)'\n                },\n                {\n                  label: \"最低血圧\",\n                  data: Object.values(blood).map(item => item.min),\n                  borderColor: 'rgb(0, 0, 255)'\n                },\n                {\n                  label: \"脈拍\",\n                  data: Object.values(blood).map(item => item.heart_rate),\n                  borderColor: 'rgb(255, 0, 255)'\n                },\n                {\n                  label: \"脈圧\",\n                  data: Object.values(blood).map(item => item.heart_pulse),\n                  borderColor: 'rgb(128, 128, 128)'\n                },\n              ],\n              labels: Object.keys(blood)\n            }\n          })\n        })\n      })\n      const weightCtx = document.getElementById(\"weight\").getContext('2d');\n      fetch(\"weight.json\").then(response => {\n        response.json().then(weight => {\n          const weightChart = new Chart(weightCtx, {\n            type: 'line',\n            data: {\n              datasets: [{\n                label: \"体重\",\n                data: Object.values(weight).map(item => item.weight),\n                borderColor: 'rgb(0, 0, 0)'\n              }],\n              labels: Object.keys(weight)\n            }\n          })\n        })\n      })\n    </script>\n  </body>\n</html>\n```\n\nFetch JSON files that exist in the same hierarchy with `fetch`. In this case, you need to give the following command line argument because it will fail with CORS if you run it locally.\n\n`- - allow- file- access- from- files`.\n\nFor mac OS, please use the following command to quit Chrome and then start it. (We have not tested this argument on Windows.)\n\nChrome version: 100.0.4896.127\n\n```zsh\n$ open \"/Applications/Google Chrome.app\" --args --allow-file-access-from-files\n```\n\n## Result\n\nData can be visualized in this way.\n\n<img width=\"841\" alt=\"screenshot 2022- 04- 17 12 40 16\" src=\"https://user- images.githubusercontent.com/29157528/163699318- 74bcb2b4- 951f- 4efd- ace8- 57bcc1228745.png\">\n\n## Problem\n\nIf you use GitHub Pages, you must be a GitHub Enterprise user to grant view restrictions on GitHub Pages.\n\nTherefore, since the information will be made public to the entire world, it is necessary to take measures such as complicating URLs, not uploading elements that are tied to individuals other than numbers, and adding a noindex meta to prevent Google from indexing the information.\n\nAlso, I would like to be able to launch Actions from the mobile app version. (Currently, the app version cannot launch Actions & the web version is not optimized for the UI...) (Currently, the app version can't launch Actions & the web version is not optimized for the UI, so I wonder if you could do something about that.)\n\n## Finally.\n\ntemplate repository is now available. Please select `Use this template` in the upper right corner of the screen to use it.\n\n- > https://github.com/kemu3007/health- logger- template",
  "reactions": {
    "url": "https://api.github.com/repos/kemu3007/portal/issues/31/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/31/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
