{
  "url": "https://api.github.com/repos/kemu3007/portal/issues/57",
  "repository_url": "https://api.github.com/repos/kemu3007/portal",
  "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/57/labels{/name}",
  "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/57/comments",
  "events_url": "https://api.github.com/repos/kemu3007/portal/issues/57/events",
  "html_url": "https://github.com/kemu3007/portal/issues/57",
  "id": 1276252097,
  "node_id": "I_kwDOG7qoq85MEg_B",
  "number": 57,
  "title": "Python Typehint new / deprecated",
  "user": {
    "login": "kemu3007",
    "id": 29157528,
    "node_id": "MDQ6VXNlcjI5MTU3NTI4",
    "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kemu3007",
    "html_url": "https://github.com/kemu3007",
    "followers_url": "https://api.github.com/users/kemu3007/followers",
    "following_url": "https://api.github.com/users/kemu3007/following{/other_user}",
    "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions",
    "organizations_url": "https://api.github.com/users/kemu3007/orgs",
    "repos_url": "https://api.github.com/users/kemu3007/repos",
    "events_url": "https://api.github.com/users/kemu3007/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kemu3007/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3898939400,
      "node_id": "LA_kwDOG7qoq87oZRgI",
      "url": "https://api.github.com/repos/kemu3007/portal/labels/article",
      "name": "article",
      "color": "C200E5",
      "default": false,
      "description": ""
    },
    {
      "id": 3900078597,
      "node_id": "LA_kwDOG7qoq87odnoF",
      "url": "https://api.github.com/repos/kemu3007/portal/labels/Python",
      "name": "Python",
      "color": "1D76DB",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [],
  "milestone": null,
  "comments": 0,
  "created_at": "2022-06-20T01:47:30Z",
  "updated_at": "2022-06-20T01:47:30Z",
  "closed_at": null,
  "author_association": "OWNER",
  "active_lock_reason": null,
  "body": ":\nSome items have been added or deprecated without being noticed. Since there are many deprecated items, only the most frequently used items are listed.\n\nFor more information, please refer to the official documentation.\n\ndocument: https://docs.python.org/ja/3/library/typing.html\n\n## Added Typehint\n\nOnly those that are likely to be used and useful are listed. Please refer to the official documentation if you would like to know more details.\n\n### typing.Literal\n\nPython3.8~ available\n\nIt is possible to specify specific values that can be held.\n\n```python3\ndef test_function(value: Literal[1, 2, 3])\n\t...\n\n\ntest_function(0) <-- raise Error\n```\n\n### typing.TypedDict\n\nPython3.8~ available\n\n```python3\nfrom typing import TypedDict\n\ndict_type = TypedDict(\"DictType\", { \"key\": str, \"value\": str })\n\nclass DictType(TypedDict):\n\tkey: str\n\tvalue: str\n```\n\nPython3.11~ adds Required and NotRequired types.\n\n```python3\nclass DictType(TypedDict):\n\tkey: str\n\tvalue: str\n\toptional_key: NotRequired[str]\n```\n\nNotRequired can be used when it is not known whether the key exists or not.\n\nRequired can also be used for required keys to assign a type for cases where total=False.\n\nIn 3.10~, `is_typeddict()` is also added and can be used to make a judgment. (I'm not sure how to use this, though...)\n\n### typing.TypeGuard\n\nPython3.10~ available\n\n```python3\ndef is_str(val: str | float) -> TypeGuard[str]:\n\treturn isinstance(val, str)\n```\nIt is possible to specify the type of the argument when True is returned in the judgment expression.\n\n\n### typing.overload\n\nThis can be used when the argument and return types are linked.\n\n```python3\n@overload\ndef test_function(value: int) -> int\n\t...\n\n@overload\ndef test_function(value: List[int]) -> List[int]\n\t...\n\ndef test_function(value: int | List[int]) -> int | List[int]\n\t...\n\n\ntest_function(1) --> int\ntest_function([1, 2, 3]) -> list[int]\n```\n\n### typing.final\n\nPython3.8~ available\n\nThis can be used in cases where you do not want to inherit or overwrite.\n\n```python3\nclass BaseClass:\n\t@final\n\tdef test_function(self):\n\t\t...\n\nclass ExtendClass(BaseClass):\n\tdef test_function <-- raise ERROR\n\n@final\nclass NotBaseClass:\n\t...\n\nclass ExtendClass2(NotBaseClass) <-- raise ERROR\n```\n\n## Deprecated Typehint\nThere are other deprecated items, but since these are the three most commonly used, we will omit them. Please refer to the official documentation for details.\n\n\n### typing.Dict\n\nDeprecated from Python3.9~.\n\nBuilt- in dict now supports types such as dict[str, str].\n\n\n\n### typing.List\n\nDeprecated from Python3.9~.\n\nBuilt- in lists now support type specifications such as list[str].\n\n\n### typing.Callable\n\nDeprecated from Python3.9~.\n\nCollections.abc.Callable now supports type specifications such as Callable[[str], str].",
  "reactions": {
    "url": "https://api.github.com/repos/kemu3007/portal/issues/57/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/57/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
