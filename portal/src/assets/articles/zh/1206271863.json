{
  "url": "https://api.github.com/repos/kemu3007/portal/issues/31",
  "repository_url": "https://api.github.com/repos/kemu3007/portal",
  "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/31/labels{/name}",
  "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/31/comments",
  "events_url": "https://api.github.com/repos/kemu3007/portal/issues/31/events",
  "html_url": "https://github.com/kemu3007/portal/issues/31",
  "id": 1206271863,
  "node_id": "I_kwDOG7qoq85H5j93",
  "number": 31,
  "title": "用GitHub Actions和GitHub Pages创建健康管理应用程序。",
  "user": {
    "login": "kemu3007",
    "id": 29157528,
    "node_id": "MDQ6VXNlcjI5MTU3NTI4",
    "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kemu3007",
    "html_url": "https://github.com/kemu3007",
    "followers_url": "https://api.github.com/users/kemu3007/followers",
    "following_url": "https://api.github.com/users/kemu3007/following{/other_user}",
    "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions",
    "organizations_url": "https://api.github.com/users/kemu3007/orgs",
    "repos_url": "https://api.github.com/users/kemu3007/repos",
    "events_url": "https://api.github.com/users/kemu3007/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kemu3007/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3898939400,
      "node_id": "LA_kwDOG7qoq87oZRgI",
      "url": "https://api.github.com/repos/kemu3007/portal/labels/article",
      "name": "article",
      "color": "C200E5",
      "default": false,
      "description": ""
    },
    {
      "id": 3972772995,
      "node_id": "LA_kwDOG7qoq87sy7SD",
      "url": "https://api.github.com/repos/kemu3007/portal/labels/GitHub",
      "name": "GitHub",
      "color": "5866BF",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [],
  "milestone": null,
  "comments": 0,
  "created_at": "2022-04-17T03:44:20Z",
  "updated_at": "2022-04-26T15:33:27Z",
  "closed_at": null,
  "author_association": "OWNER",
  "active_lock_reason": null,
  "body": "\n## ＃＃＃原始概念。\n\n-  我想把它做成可以在任何设备上在线观看的格式，但我不想建立一个EC2等并部署它。\n-  数据每天输入一次。\n-  需要登记的数据是最低血压、最高血压、脉搏、脉压和体重。\n-  每日数据以易于理解的图表显示。\n\n##应用规格\n\n-  数据每天使用GitHub Actions输入一次。\n-  将数据以JSON格式保存在GitHub Actions上并推送到仓库。\n-  分发使用GitHub Pages，数据在Chart.js中进行了可视化。\n\n##应用配置\n<img width=\"752\" alt=\"屏幕截图 2022- 04- 17 12 17 04\"src=\"https://user- images.githubusercontent.com/29157528/163698719- 2141b3d6- b45f- 435a- bab0- 8e92e5bc6cc2.png\">\n\n## 在GitHub行动中输入数据\n\n你可以在GitHub Actions中放入任何值，格式如下yml。\n\n```yml\nname: write-data\n\non:\n  workflow_dispatch:\n    inputs:\n      blood_min:\n        default: 0\n        required: true\n      blood_max:\n        default: 0\n        required: true\n      heart_rate:\n        default: 0\n        required: true\n      heart_pulse:\n        default: 0\n        required: true\n      weight:\n        default: 0\n        required: true\n```\n实际的用户界面如下\n\n<img width=\"257\" alt=\"屏幕截图 2022- 04- 17 12 25 14\"src=\"https://user- images.githubusercontent.com/29157528/163698957- 6fc1b74e- f799- 4823- ad85- 68f96edc211d.png\">\n\n输入值以`{{ github.event.inputs.blood_min }}`的形式提供。\n\n##以JSON格式保存数据。\n\n为了使数据更容易在JavaScript中读取，传递给GitHub Actions的值在一个Python脚本中进行处理。(示例代码使用ZoneInfo，所以必须使用Python 3.9或更高版本)。\n\n```python\nimport argparse\nfrom datetime import datetime\nimport json\nfrom pathlib import Path\nfrom zoneinfo import ZoneInfo\n\n\nparser = argparse.ArgumentParser()\n\nparser.add_argument(\"blood_min\", type=int)\nparser.add_argument(\"blood_max\", type=int)\nparser.add_argument(\"heart_rate\", type=int)\nparser.add_argument(\"heart_pulse\", type=int)\nparser.add_argument(\"weight\", type=float)\n\n\nblood_json = Path(\"docs/blood.json\")\nweight_json = Path(\"docs/weight.json\")\n\n\nif __name__ == \"__main__\":\n    today = datetime.now(ZoneInfo(\"Asia/Tokyo\")).date()\n    arguments = parser.parse_args()\n    blood = json.loads(blood_json.read_text())\n    blood[str(today)] = {\n        \"min\": arguments.blood_min,\n        \"max\": arguments.blood_max,\n        \"heart_rate\": arguments.heart_rate,\n        \"heart_pulse\": arguments.heart_pulse,\n    }\n    blood_json.write_text(json.dumps(blood))\n    weight = json.loads(weight_json.read_text())\n    weight[str(today)] = {\"weight\": arguments.weight}\n    weight_json.write_text(json.dumps(weight))\n``` \n\n这一次，要将`docs/`分布在版本库主分支中，准备`docs/blood.json`、`docs/weight.json`并存储JSON数据。\n\n这使得它准备好交付带有日期和正文数据的JSON文件。\n\n## 视觉化的JSON数据。\n\n由于JSON格式对于人类读者来说是不方便的，所以它以图表的形式进行了可视化。\n\n使用的库是[Chart.js]（https://www.chartjs.org/）。\n\n### index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"ja\">\n  <head>\n    <title>Health Logger</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\">\n  </head>\n  <body>\n    <div class=\"container mt-5\">\n      <h2>Blood</h2>\n      <canvas id=\"blood\" height=\"80px\"></canvas>\n      <h2>Weight</h2>\n      <canvas id=\"weight\" height=\"80px\"></canvas>\n    </div>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM\" crossorigin=\"anonymous\"></script>\n    <script>\n      const bloodCtx = document.getElementById(\"blood\").getContext('2d');\n      fetch(\"blood.json\").then(response => {\n        response.json().then(blood => {\n          console.log(blood)\n          const bloodChart = new Chart(bloodCtx, {\n            type: 'line',\n            data: {\n              datasets: [\n                {\n                  label: \"最高血圧\",\n                  data: Object.values(blood).map(item => item.max),\n                  borderColor: 'rgb(255, 0, 0)'\n                },\n                {\n                  label: \"最低血圧\",\n                  data: Object.values(blood).map(item => item.min),\n                  borderColor: 'rgb(0, 0, 255)'\n                },\n                {\n                  label: \"脈拍\",\n                  data: Object.values(blood).map(item => item.heart_rate),\n                  borderColor: 'rgb(255, 0, 255)'\n                },\n                {\n                  label: \"脈圧\",\n                  data: Object.values(blood).map(item => item.heart_pulse),\n                  borderColor: 'rgb(128, 128, 128)'\n                },\n              ],\n              labels: Object.keys(blood)\n            }\n          })\n        })\n      })\n      const weightCtx = document.getElementById(\"weight\").getContext('2d');\n      fetch(\"weight.json\").then(response => {\n        response.json().then(weight => {\n          const weightChart = new Chart(weightCtx, {\n            type: 'line',\n            data: {\n              datasets: [{\n                label: \"体重\",\n                data: Object.values(weight).map(item => item.weight),\n                borderColor: 'rgb(0, 0, 0)'\n              }],\n              labels: Object.keys(weight)\n            }\n          })\n        })\n      })\n    </script>\n  </body>\n</html>\n```\n\nFetch `取一个存在于同一层次的JSON文件。在这种情况下，需要给出以下命令行参数，因为如果在本地运行，它将在CORS下失败。\n\n`- - 允许从文件中获取文件`。\n\n在mac操作系统上，使用以下命令退出Chrome，然后再启动它。(我们没有在Windows上测试这个说法)。\n\n测试的Chrome版本: 100.0.4896.127\n\n```zsh\n$ open \"/Applications/Google Chrome.app\" --args --allow-file-access-from-files\n```\n\n∮∮结果\n\n数据可以通过这种方式进行可视化。\n\n<img width=\"841\" alt=\"屏幕截图 2022- 04- 17 12 40 16\"src=\"https://user- images.githubusercontent.com/29157528/163699318- 74bcb2b4- 951f- 4efd- ace8- 57bcc1228745.png\">\n\n##问题。\n\n如果你使用GitHub页面，你必须是GitHub企业，才能授予GitHub页面的查看限制。\n\n这意味着这些信息将被全世界所了解，因此有必要采取一些措施，例如使URL复杂化，不上传与数字以外的个人相联系的元素，以及添加noindex meta以防止谷歌索引这些信息。\n\n此外，如果能够从移动应用版本开始行动，那就更好了。(目前，应用程序版本不能启动行动，而网络版本的用户界面没有得到优化...)(目前，你不能从应用程序版本启动行动，而网络版本的用户界面没有得到优化...)\n\n∮∮最后。\n\n模板库现在可用。请在屏幕右上方选择 \"使用此模板 \"来使用它。\n\n- > https://github.com/kemu3007/health- logger- template",
  "reactions": {
    "url": "https://api.github.com/repos/kemu3007/portal/issues/31/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/31/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
