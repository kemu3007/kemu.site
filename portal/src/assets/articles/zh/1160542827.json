{
  "url": "https://api.github.com/repos/kemu3007/portal/issues/3",
  "repository_url": "https://api.github.com/repos/kemu3007/portal",
  "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/3/labels{/name}",
  "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/3/comments",
  "events_url": "https://api.github.com/repos/kemu3007/portal/issues/3/events",
  "html_url": "https://github.com/kemu3007/portal/issues/3",
  "id": 1160542827,
  "node_id": "I_kwDOG7qoq85FLHpr",
  "number": 3,
  "title": "Django快捷方式总结",
  "user": {
    "login": "kemu3007",
    "id": 29157528,
    "node_id": "MDQ6VXNlcjI5MTU3NTI4",
    "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kemu3007",
    "html_url": "https://github.com/kemu3007",
    "followers_url": "https://api.github.com/users/kemu3007/followers",
    "following_url": "https://api.github.com/users/kemu3007/following{/other_user}",
    "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions",
    "organizations_url": "https://api.github.com/users/kemu3007/orgs",
    "repos_url": "https://api.github.com/users/kemu3007/repos",
    "events_url": "https://api.github.com/users/kemu3007/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kemu3007/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3898939400,
      "node_id": "LA_kwDOG7qoq87oZRgI",
      "url": "https://api.github.com/repos/kemu3007/portal/labels/article",
      "name": "article",
      "color": "C200E5",
      "default": false,
      "description": ""
    },
    {
      "id": 3900075763,
      "node_id": "LA_kwDOG7qoq87odm7z",
      "url": "https://api.github.com/repos/kemu3007/portal/labels/Django",
      "name": "Django",
      "color": "5FC353",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [],
  "milestone": null,
  "comments": 0,
  "created_at": "2022-03-06T07:44:00Z",
  "updated_at": "2022-03-12T07:59:29Z",
  "closed_at": null,
  "author_association": "OWNER",
  "active_lock_reason": null,
  "body": "# [django shortcuts](https://github.com/django/django/blob/main/django/shortcuts.py)\n\n## 渲染\n\n```py\ndef render(request, template_name, context=None, content_type=None, status=None, using=None):\n    \"\"\"\n    Return a HttpResponse whose content is filled with the result of calling\n    django.template.loader.render_to_string() with the passed arguments.\n    \"\"\"\n    content = loader.render_to_string(template_name, context, request, using=using)\n    return HttpResponse(content, content_type, status)\n```\n上下文被传递并为template_name中指定的模板进行渲染。\n可以指定使用的渲染引擎。\n\n- - - - - \n\n##重定向\n\n```py\ndef redirect(to, *args, permanent=False, **kwargs):\n    \"\"\"\n    Return an HttpResponseRedirect to the appropriate URL for the arguments\n    passed.\n    The arguments could be:\n        * A model: the model's `get_absolute_url()` function will be called.\n        * A view name, possibly with arguments: `urls.reverse()` will be used\n          to reverse-resolve the name.\n        * A URL, which will be used as-is for the redirect location.\n    Issues a temporary redirect by default; pass permanent=True to issue a\n    permanent redirect.\n    \"\"\"\n    redirect_class = HttpResponsePermanentRedirect if permanent else HttpResponseRedirect\n    return redirect_class(resolve_url(to, *args, **kwargs))\n```\n重定向处理。如果`permanent`为真，返回301，如果为假，返回302。\n301: [https://developer.mozilla.org/ja/docs/Web/HTTP/Status/301](https://developer.mozilla.org/ja/docs/Web/HTTP/Status/301)\n302: [https://developer.mozilla.org/ja/docs/Web/HTTP/Status/302](https://developer.mozilla.org/ja/docs/Web/HTTP/Status/302)\n\n- - - - - \n\n## get_object_or_404\n```py\n\ndef get_object_or_404(klass, *args, **kwargs):\n    \"\"\"\n    Use get() to return an object, or raise an Http404 exception if the object\n    does not exist.\n    klass may be a Model, Manager, or QuerySet object. All other passed\n    arguments and keyword arguments are used in the get() query.\n    Like with QuerySet.get(), MultipleObjectsReturned is raised if more than\n    one object is found.\n    \"\"\"\n    queryset = _get_queryset(klass)\n    if not hasattr(queryset, 'get'):\n        klass__name = klass.__name__ if isinstance(klass, type) else klass.__class__.__name__\n        raise ValueError(\n            \"First argument to get_object_or_404() must be a Model, Manager, \"\n            \"or QuerySet, not '%s'.\" % klass__name\n        )\n    try:\n        return queryset.get(*args, **kwargs)\n    except queryset.model.DoesNotExist:\n        raise Http404('No %s matches the given query.' % queryset.model._meta.object_name)\n```\n`_get_queryset`在模型类被指定为`klass`时，指的是`_default_manager`，并返回queryset。当查询集来到`klass'时，它被原样返回。\n\n除`klass'以外的任何参数都是一个搜索查询，如果不存在则引发`Http404'，如果存在两个或更多则引发`MultipleObjectsReturned'异常。\n\n- - - - - \n\n## get_list_or_404\n\n```py\ndef get_list_or_404(klass, *args, **kwargs):\n    \"\"\"\n    Use filter() to return a list of objects, or raise an Http404 exception if\n    the list is empty.\n    klass may be a Model, Manager, or QuerySet object. All other passed\n    arguments and keyword arguments are used in the filter() query.\n    \"\"\"\n    queryset = _get_queryset(klass)\n    if not hasattr(queryset, 'filter'):\n        klass__name = klass.__name__ if isinstance(klass, type) else klass.__class__.__name__\n        raise ValueError(\n            \"First argument to get_list_or_404() must be a Model, Manager, or \"\n            \"QuerySet, not '%s'.\" % klass__name\n        )\n    obj_list = list(queryset.filter(*args, **kwargs))\n    if not obj_list:\n        raise Http404('No %s matches the given query.' % queryset.model._meta.object_name)\n    return obj_list\n```\n至于`klass`和`_get_queryset`，与上面描述的`get_object_or_404`相同，如果用`klass`以外的参数进行搜索，并且命中数为零，会出现`Http404`异常。\n\n- - - - - \n\n## resolve_url\n```py\ndef resolve_url(to, *args, **kwargs):\n    \"\"\"\n    Return a URL appropriate for the arguments passed.\n    The arguments could be:\n        * A model: the model's `get_absolute_url()` function will be called.\n        * A view name, possibly with arguments: `urls.reverse()` will be used\n          to reverse-resolve the name.\n        * A URL, which will be returned as-is.\n    \"\"\"\n    # If it's a model, use get_absolute_url()\n    if hasattr(to, 'get_absolute_url'):\n        return to.get_absolute_url()\n\n    if isinstance(to, Promise):\n        # Expand the lazy instance, as it can cause issues when it is passed\n        # further to some Python functions like urlparse.\n        to = str(to)\n\n    # Handle relative URLs\n    if isinstance(to, str) and to.startswith(('./', '../')):\n        return to\n\n    # Next try a reverse URL resolution.\n    try:\n        return reverse(to, args=args, kwargs=kwargs)\n    except NoReverseMatch:\n        # If this is a callable, re-raise.\n        if callable(to):\n            raise\n        # If this doesn't \"feel\" like a URL, re-raise.\n        if '/' not in to and '.' not in to:\n            raise\n\n    # Finally, fall back and assume it's a URL\n    return to\n```\n\n将一个字符串转换为URL的过程。",
  "reactions": {
    "url": "https://api.github.com/repos/kemu3007/portal/issues/3/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/3/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
