{
  "url": "https://api.github.com/repos/kemu3007/portal/issues/7",
  "repository_url": "https://api.github.com/repos/kemu3007/portal",
  "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/7/labels{/name}",
  "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/7/comments",
  "events_url": "https://api.github.com/repos/kemu3007/portal/issues/7/events",
  "html_url": "https://github.com/kemu3007/portal/issues/7",
  "id": 1160543074,
  "node_id": "I_kwDOG7qoq85FLHti",
  "number": 7,
  "title": "在类型安全中处理Angular表单。",
  "user": {
    "login": "kemu3007",
    "id": 29157528,
    "node_id": "MDQ6VXNlcjI5MTU3NTI4",
    "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kemu3007",
    "html_url": "https://github.com/kemu3007",
    "followers_url": "https://api.github.com/users/kemu3007/followers",
    "following_url": "https://api.github.com/users/kemu3007/following{/other_user}",
    "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions",
    "organizations_url": "https://api.github.com/users/kemu3007/orgs",
    "repos_url": "https://api.github.com/users/kemu3007/repos",
    "events_url": "https://api.github.com/users/kemu3007/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kemu3007/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3898939400,
      "node_id": "LA_kwDOG7qoq87oZRgI",
      "url": "https://api.github.com/repos/kemu3007/portal/labels/article",
      "name": "article",
      "color": "C200E5",
      "default": false,
      "description": ""
    },
    {
      "id": 3900074882,
      "node_id": "LA_kwDOG7qoq87odmuC",
      "url": "https://api.github.com/repos/kemu3007/portal/labels/Angular",
      "name": "Angular",
      "color": "D93F0B",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [],
  "milestone": null,
  "comments": 0,
  "created_at": "2022-03-06T07:45:35Z",
  "updated_at": "2022-03-26T09:31:18Z",
  "closed_at": null,
  "author_association": "OWNER",
  "active_lock_reason": null,
  "body": "你可以使用@ngneat/reactive- forms来编写类型安全的表单。\n\n- - - \n#### 正常角度的形式\n\n```ts\nimport { FormBuilder } from '@angular/forms';\n\nconstructor(private fb: FormBuilder){}\n\nform = this.fb.group({\n    firstName: '',\n    lastName: ''\n})\n```\n在普通的Angular表单中，当你引用`form.controls`时，类型是`{[key: string]: AbstractControl;}`。因此，如果你引用`form.controls.firstName`，你不知道`firstName`在类型系统中是否存在。\n\n另外，当`form.valueChanges.subscribe(value => )`时，值的类型是`any`。\n\n- - - \n#### @ngneat/reactive- forms\n```ts\nimport { FormBuilder, FormGroup, ControlsOf } from '@ngneat/reactive-forms';\n\nconstructor(private nfb: FormBuilder){}\n\ninterface sampleForm {\n  firstName: string;\n  lastName: string;\n}\n\nneatForm = this.nfb.group<sampleForm>({\n  firstName: \"\",\n  lastName: \"\"\n})\n\nneatForm = new FormGroup<ControlsOf<sampleForm>>({\n  firstName: new FormControl(\"\"),\n  lastName: new FormControl(\"\")\n})\n```\n如果使用@ngneat/reactive- forms，代码会像上面那样。\n在`sampleForm`中把表单项定义为接口，可以让intellisense在编写`group({})`中的代码时发挥作用，防止人为错误。\n\n在这种情况下，`neatForm.controls`的类型是`GroupResolverFormBuilder<sampleForm>`，直接引用`neatForm.controls.firstName`将不会导致错误。\n\n`form.valueChanges.subscribe(value => )`，值的类型是`ValuesOf<GroupResolverFormBuilder<sampleForm>>`，可以引用类型安全。\n\n另外，当你在模板侧写下以下内容时，intellisense对`formControlName`起作用。:sugoine:\n\n```html\n<form [formGroup]=\"form\">\n  <input formControlName=\"firstName\" />\n  <input formControlName=\"lastName\" />\n</form>\n```\n\n注意，FormBuilder似乎并不完全支持。另外，要注意的是，虽然初始值可以是null，但如果表单因为`Validators.required'而有效的话，诸如`non null'这样的类型推断是不可能的。\n\n- - - \n\n#### @ngneat/reactive- forms 有用的功能\n\n-  `value$`。\n\n当在`formGroup`中使用`valueChanges`时，禁用的控件和表单生成的值不会流入流。\n当你订阅`value$`时，rawValue，即禁用控件的值，也会流动，以及生成时的值。\n\n-  \"persistControl\"。\n\n```ts\n{ persistControl } from '@ngneat/reactive-forms'\n\npersistControl(this.neatForm, \"neatForm\", {}).subscribe()\n```\n\n它自动将表单值保存到存储器中，并在重新绘制时将其放入表单。\n它非常容易避免实现你自己的sessionStorage等。\n\n- - - \n\n[@ngneat/reactive- forms](https://github.com/ngneat/reactive- forms)\n\n这次的代码是[这里](https://github.com/kemu3007/ngneat- reactive_forms- test/blob/master/test/src/app/app.component.ts)",
  "reactions": {
    "url": "https://api.github.com/repos/kemu3007/portal/issues/7/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/7/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
