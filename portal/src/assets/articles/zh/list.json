{
  "1160526026": {
    "title": "关于被Google Adsense、网站结构等卡住的故事。",
    "created_at": "2022-03-06T05:51:34Z",
    "updated_at": "2022-04-04T05:16:06Z",
    "body": "这个网站的组成形式是：Name.com -> Route 53 -> AWS ALB -> AWS EC2。在实施的时候，它的形式是Name.com -> AWS ALB -> AWS EC2，但它无法在adsense & on the specification of ALB注册。",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Utils",
        "color": "170627"
      }
    ]
  },
  "1160542827": {
    "title": "Django快捷方式总结",
    "created_at": "2022-03-06T07:44:00Z",
    "updated_at": "2022-03-12T07:59:29Z",
    "body": "  [django shortcuts] render py def render(request, template_name, context=None, content_type=None, status=None, using=None): \"\"",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Django",
        "color": "5FC353"
      }
    ]
  },
  "1160542878": {
    "title": "将Markdown转换为HTML/给出css",
    "created_at": "2022-03-06T07:44:22Z",
    "updated_at": "2022-03-06T15:21:56Z",
    "body": "Markdown可以通过使用以下库转换为HTML。  [Python-Markdown] 安装bash > pip install markdown 转换为HTML bash >> markdow",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Python",
        "color": "1D76DB"
      }
    ]
  },
  "1160542944": {
    "title": "Django 4.0已经发布了，我们将边走边试。",
    "created_at": "2022-03-06T07:44:51Z",
    "updated_at": "2022-03-12T07:52:04Z",
    "body": "[发布说明] 依赖的库 - Django 3.2 asgiref==3.4.1 pytz==2021.3 sqlparse=0.4.2 - Django4.0 asgiref==3.4.1 backports.zo",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Django",
        "color": "5FC353"
      }
    ]
  },
  "1160543028": {
    "title": "自动生成Django Admin。",
    "created_at": "2022-03-06T07:45:18Z",
    "updated_at": "2022-03-06T15:21:16Z",
    "body": "我忘了注册管理员，很麻烦，所以我把这个作为一个说明。         有用的时机--我不想在Django Admin上投入太多精力，但我想要最起码的功能--我在添加模型时忘记了admin.site.register，我想对此做点什么。",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Django",
        "color": "5FC353"
      }
    ]
  },
  "1160543074": {
    "title": "在类型安全中处理Angular表单。",
    "created_at": "2022-03-06T07:45:35Z",
    "updated_at": "2022-03-26T09:31:18Z",
    "body": "你可以使用@ngneat/reactive-forms来编写类型安全的表单。    ---正常的Angular表单 ts import { FormBuilder } from '@angular/forms'; construc",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Angular",
        "color": "D93F0B"
      }
    ]
  },
  "1160543248": {
    "title": "DRF 限制显示与DRF绑定的模型数量。",
    "created_at": "2022-03-06T07:46:40Z",
    "updated_at": "2022-03-06T15:20:58Z",
    "body": "Django有一个叫做prefetch_related的功能，可以用来抑制发出的SQL，具体说明如下       python Article.objects.prefetch_related(\"tags\")来抑制ManyT发出的SQL。",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Django",
        "color": "5FC353"
      }
    ]
  },
  "1160543297": {
    "title": "编写前端测试（快照测试部分）。",
    "created_at": "2022-03-06T07:47:02Z",
    "updated_at": "2022-03-06T15:20:21Z",
    "body": "    环境 Angular 13, node 16 移除默认包含的Karma，因为我们将使用jest sh npm run ng add @briebug/jest-schematic 参考资料: https://github.com/brie",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Angular",
        "color": "D93F0B"
      }
    ]
  },
  "1160543378": {
    "title": "使用Gmail API推送通知",
    "created_at": "2022-03-06T07:47:32Z",
    "updated_at": "2022-03-06T15:19:57Z",
    "body": "它允许你钩住电子邮件并交错进行。        环境 - Python 3.10 - google-api-python-client==2.36.0 - google_auth_oauthlib=0.4.6 - google-cloud-pubsub==2.9.0",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "GCP",
        "color": "FBCA04"
      }
    ]
  },
  "1160543419": {
    "title": "在Nuxt中的缓存做得很好。",
    "created_at": "2022-03-06T07:47:51Z",
    "updated_at": "2022-03-06T15:19:29Z",
    "body": "自动检查当前代码是否是最新的，并更新缓存。         验证环境 - Nuxt: 2.15.8 - @nuxtjs/pwa: 3.3.5 Code nuxt.config.js js { plugins: ['plugi",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Nuxt",
        "color": "0E8A16"
      }
    ]
  },
  "1160653032": {
    "title": "用GitHub行动和页面写博客",
    "created_at": "2022-03-06T16:25:06Z",
    "updated_at": "2022-03-06T23:44:03Z",
    "body": "   环境 - npm v8.3.1 - node: v16.14.0 - Angular: v13.2.5 - @ng-bootstrap/ng-bootstrap: 12.0.0 * npm run ng add @ng-bootstrap/ng-bootstrap fails",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Angular",
        "color": "D93F0B"
      }
    ]
  },
  "1167241988": {
    "title": "在用GitHub页面部署的SPA中显示OGPs(spirited)。",
    "created_at": "2022-03-12T09:56:24Z",
    "updated_at": "2022-03-12T14:33:09Z",
    "body": "通常情况下，在部署SPA时，OGP不会在twitter和其他网站上显示。    这是由于获得OGP的机器人并不执行js，而且因为是SPA，所以没有相关链接的静态HTML文件。    因此，通常可以使用lambda等来显示机器人的页面，或显示其他页面的OGP。",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Angular",
        "color": "D93F0B"
      }
    ]
  },
  "1167568913": {
    "title": "在Angular中使用Google Adsense。",
    "created_at": "2022-03-13T12:39:35Z",
    "updated_at": "2022-03-13T15:28:08Z",
    "body": "在正常的SSR中，只需在<head></head>中加入Google Adsense的自动广告脚本，就可以发布广告并实现盈利。    然而，在SPA的情况下，如果只使用自动广告，则不会因为页面转换而发生重载，所以只使用页面底部的固定广告。",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Angular",
        "color": "D93F0B"
      }
    ]
  },
  "1169430844": {
    "title": "唤醒Django Rest Framework OpenAPI文档。",
    "created_at": "2022-03-15T09:53:45Z",
    "updated_at": "2022-03-28T12:45:19Z",
    "body": "注意，有机会从API生成OpenAPI文档，所以只需要运行zsh $ python manage.py generateschema > schema.yml，因为DRF本身有一个叫generateschema的命令。",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Django",
        "color": "5FC353"
      }
    ]
  },
  "1169514542": {
    "title": "在Angular组件中放置脚本标签。",
    "created_at": "2022-03-15T10:57:47Z",
    "updated_at": "2022-03-15T10:57:47Z",
    "body": "如果一个脚本标签被放在src/index.html之外，其行为是自动删除它。    参考：[angular/angular 4903]所以，例如，如果你放置一个可以通过[Twitter Publish]检索的按钮，那么推特按钮的css就不会被打到。",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Angular",
        "color": "D93F0B"
      }
    ]
  },
  "1170873471": {
    "title": "Angular经常编写的代码/库房",
    "created_at": "2022-03-16T11:09:50Z",
    "updated_at": "2022-04-03T10:02:58Z",
    "body": "    库 - [@ngneat/reactive-forms] - 使用formGroup的类型安全 - 在会话存储中存储表单输入，并在重新加载时保存/加载等 - [@datorama/akita] - 状态管理la",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Angular",
        "color": "D93F0B"
      }
    ]
  },
  "1174254849": {
    "title": "Angular状态管理 @ngneat/elf",
    "created_at": "2022-03-19T12:29:12Z",
    "updated_at": "2022-03-21T14:07:38Z",
    "body": "[我们建议你去看看🚀。---",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Angular",
        "color": "D93F0B"
      }
    ]
  },
  "1174435949": {
    "title": "关于网站的结构",
    "created_at": "2022-03-20T04:20:38Z",
    "updated_at": "2022-03-20T13:42:25Z",
    "body": "     旧网站 [kemu.site] <img width=\"834\" alt=\"屏幕截图 2022-03-20 13 11 44\" src=\"https://user-s.githubusercontent.com/29157528/159147797-67a49372-2bf",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Angular",
        "color": "D93F0B"
      },
      {
        "name": "Django",
        "color": "5FC353"
      }
    ]
  },
  "1174533240": {
    "title": "使用Angular reCAPTCHA。",
    "created_at": "2022-03-20T12:34:43Z",
    "updated_at": "2022-03-21T12:36:22Z",
    "body": "你可以使用reCAPTCHA来防止来自机器人的访问。    通常情况下，在使用reCAPTCHA时，必须在HTML中放置一个脚本标签。然而，index.html上的脚本标签会被转义和删除，所以[ng-recaptcha]可以用来防止机器人访问你的网站。",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Angular",
        "color": "D93F0B"
      }
    ]
  },
  "1175617296": {
    "title": "与AWS Apex域相处",
    "created_at": "2022-03-21T16:14:23Z",
    "updated_at": "2022-03-21T16:34:46Z",
    "body": "如果你的网站在AWS上，一个常见的配置是在负载平衡器上放置一个SSL证书，并指定EC2为目标组。    在这种配置中，通常会在域名的DNS记录中添加一个CNAME记录，以及负载均衡器的DNS名称。    <img宽度",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "AWS",
        "color": "EE0471"
      }
    ]
  },
  "1176713310": {
    "title": "IP地址检查器发布。",
    "created_at": "2022-03-22T12:29:14Z",
    "updated_at": "2022-03-24T00:44:53Z",
    "body": "已经发布了一项功能，以检查浏览用户的IP地址和其他信息。    请放心，我们不会收集IP地址，只在本地存储中保留前次访问的记录。    内部结构如下    <img width=\"555\" alt=\"屏幕截图 2022年",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "AWS",
        "color": "EE0471"
      }
    ]
  },
  "1180653910": {
    "title": "JSON Typer已经发布。",
    "created_at": "2022-03-25T11:06:44Z",
    "updated_at": "2022-03-25T11:06:44Z",
    "body": "增加了一个函数，允许通过加载JSON数据自动生成TypeScript类型。    它是通过输入下面例子中所示形式的JSON生成的。    列表类型和JSON键的转义是问题，但我认为在你想轻松生成类型时，它很容易使用。    [U",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "TypeScript",
        "color": "bfdadc"
      }
    ]
  },
  "1182698916": {
    "title": "GitHub行动的常用设置摘要",
    "created_at": "2022-03-27T23:23:38Z",
    "updated_at": "2022-04-03T10:29:02Z",
    "body": "   在任意时间运行测试 如果在所有情况下推送和拉动请求的测试都被触发，那么在拉动请求中，相同内容的测试将被触发两次。因此，当拉动请求被创建时/当拉动请求被更新时/当测试被合并时，测试将启动两次（ma",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "GitHub",
        "color": "5866BF"
      }
    ]
  },
  "1183289291": {
    "title": "从OpenApi文档中自动生成类型。",
    "created_at": "2022-03-28T11:22:17Z",
    "updated_at": "2022-03-28T14:15:49Z",
    "body": "从以前生成的OpenApi文件中生成类型。[上一篇] 使用[@openapitools/openapi-generator-cli]来生成类型。       zsh $ npx @openapitools/openapi-generator-li genera",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "TypeScript",
        "color": "bfdadc"
      }
    ]
  },
  "1189790754": {
    "title": "用marked.js和highlight.js处理GitHub风味的Markdown",
    "created_at": "2022-04-01T13:22:10Z",
    "updated_at": "2022-04-03T05:01:14Z",
    "body": "在GitHub上处理的Markdown的官方名称叫做GitHub Flavored Markdown，这是一个不言而喻的符号，它扩展了默认的Markdown。    这一次，GitHub css的highlight.js被应用于将Markdown文本转换为HTML。",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "TypeScript",
        "color": "bfdadc"
      }
    ]
  },
  "1189843692": {
    "title": "使用 \"枕头 \"日语字体。",
    "created_at": "2022-04-01T14:03:37Z",
    "updated_at": "2022-04-22T10:18:01Z",
    "body": "本节介绍了一种实现Pillow的日文字体的方法，这些字体往往依赖于主机操作系统的字体，其方式不需要在其他环境/运行器中下载字体。\r\n",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Python",
        "color": "1D76DB"
      }
    ]
  },
  "1191408274": {
    "title": "管理textarea标签内的Tab键行为。",
    "created_at": "2022-04-04T08:04:13Z",
    "updated_at": "2022-04-22T10:16:15Z",
    "body": "本节介绍了一种基于类型的写作方法，用于管理文本区域内的Tab键行为，这是创建应用程序时的一个常见用例，因为在其他网站上发现，使用的是抓取任意类型的方法。\r\n",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Angular",
        "color": "D93F0B"
      }
    ]
  },
  "1198885661": {
    "title": "视觉化OpenApi文件。",
    "created_at": "2022-04-10T05:29:52Z",
    "updated_at": "2022-04-22T10:14:03Z",
    "body": "它介绍了Swagger、Redoc之间的区别，以及根据REST API输出的OpenApi文件，用CI自动记录并发布到GitHub页面的方法。它还为从OpenApi文件生成的文档提供了一个查看器。\r\n",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Utils",
        "color": "170627"
      }
    ]
  },
  "1206271863": {
    "title": "用GitHub Actions和GitHub Pages创建健康管理应用程序。",
    "created_at": "2022-04-17T03:44:20Z",
    "updated_at": "2022-04-26T15:33:27Z",
    "body": "我们把GitHub Actions和GitHub Pages结合起来，创建了一个用户输入字段，在图表中显示每天的健康数据，我们向你展示如何做到这一点以及如何实现它。\r\n",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "GitHub",
        "color": "5866BF"
      }
    ]
  },
  "1206344475": {
    "title": "从自定义模板创建一个Django项目",
    "created_at": "2022-04-17T10:58:05Z",
    "updated_at": "2022-04-22T09:47:41Z",
    "body": "我们创建了一个Django配置的模板库，我们一直在使用，这是一个关于我们如何使用它的介绍。它默认配置了flake8、mypy、black和isort，CI被用来进行代码的静态检查和运行测试。\r\n",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Django",
        "color": "5FC353"
      }
    ]
  },
  "1206789196": {
    "title": "Graphene生成Django Graphql文档",
    "created_at": "2022-04-18T07:59:27Z",
    "updated_at": "2022-04-25T13:58:19Z",
    "body": "在一个项目中使用Grapnen-Django输出Graphql模式，检查输出的信息，并从输出模式中自动生成文档。生成的文档会从CI部署到GitHub页面。\r\n",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Django",
        "color": "5FC353"
      }
    ]
  },
  "1210913643": {
    "title": "使用Django JWT认证",
    "created_at": "2022-04-21T11:40:05Z",
    "updated_at": "2022-04-22T09:48:26Z",
    "body": "Django Rest框架，关于SimpleJWT库操作检查的说明。代币创建 -> 代币验证 -> 代币重新发行过程 -> 检查如何使用代币访问所需的登录页面。\r\n",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Django",
        "color": "5FC353"
      }
    ]
  },
  "1215117235": {
    "title": "创建RSS/检查Chrome Web Feeder是否工作",
    "created_at": "2022-04-25T22:32:58Z",
    "updated_at": "2022-04-25T22:41:11Z",
    "body": "不久之后，RSS Feeder功能又回到了Android上的Chrome 94~，因此我们创建并分发了RSS feeds，以测试它们的外观如何。\r\n",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Python",
        "color": "1D76DB"
      }
    ]
  },
  "1217467340": {
    "title": "创建MacOS Windows安装介质",
    "created_at": "2022-04-27T14:46:54Z",
    "updated_at": "2022-04-28T06:23:51Z",
    "body": " 我有机会在我的M1 Mac上创建windows 10启动媒体，所以我将告诉你如何创建它。\r\n",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Utils",
        "color": "170627"
      }
    ]
  },
  "1223579698": {
    "title": "Pyodide 从JavaScript中运行Python脚本。",
    "created_at": "2022-05-03T02:57:37Z",
    "updated_at": "2022-05-05T01:04:38Z",
    "body": "在2022年美国PyCon大会上关于PyScript的演讲后，我随大流，介绍了Pyodide，现在我手头已经摸到了。\r\n",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Python",
        "color": "1D76DB"
      }
    ]
  },
  "1227975608": {
    "title": "Cloudflare Pages 只向已认证的用户显示页面。",
    "created_at": "2022-05-06T14:59:25Z",
    "updated_at": "2022-05-06T15:19:57Z",
    "body": "如果你在GitHub Pages上托管一个静态网站，并且不维护一个后台，你就无法对用户进行认证，因此你在Cloudflare Pages上部署，并使用Cloudflare Access进行认证，只允许通过的用户查看网站。\r\n",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Utils",
        "color": "170627"
      }
    ]
  },
  "1228774700": {
    "title": "MacOS中的病毒扫描 Clamav.",
    "created_at": "2022-05-08T02:31:49Z",
    "updated_at": "2022-05-08T03:19:55Z",
    "body": "我不想让Clamav常驻，但我想通过定期运行全面扫描来确保它的安全，所以我将告诉你如何做。\r\n",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Utils",
        "color": "170627"
      }
    ]
  },
  "1238798339": {
    "title": "将SPA部署到GitHub页面并考虑到SEO。",
    "created_at": "2022-05-17T15:15:57Z",
    "updated_at": "2022-05-17T16:00:18Z",
    "body": "本节还介绍了在GitHub Pages、Cloudflare Pages上部署SPA的服务时，从SEO角度需要注意的事项，以及如何进行Angular部署。\r\n",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Angular",
        "color": "D93F0B"
      }
    ]
  },
  "1239705698": {
    "title": "尝试Django 4.1异步视图，异步ORM",
    "created_at": "2022-05-18T09:48:28Z",
    "updated_at": "2022-05-18T13:36:03Z",
    "body": "Django 4.1alpha1发布了，我们检查了新的功能和行为。\r\n",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Django",
        "color": "5FC353"
      }
    ]
  },
  "1244192476": {
    "title": "实时绘制mermaid.js",
    "created_at": "2022-05-22T08:54:29Z",
    "updated_at": "2022-05-22T11:54:51Z",
    "body": "有好几次，我们想用mermaid.js来使用图形图，所以我们把实时绘制方法放在一起，并创建了一个工具来进行实时绘制。\r\n",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Angular",
        "color": "D93F0B"
      }
    ]
  },
  "1250315076": {
    "title": "尝试Angular + Scully服务器端生成",
    "created_at": "2022-05-27T04:12:36Z",
    "updated_at": "2022-06-02T17:34:23Z",
    "body": "我们已经用Angular + Scully完成了服务器端生成，并将分享如何做到这一点。\r\n",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Angular",
        "color": "D93F0B"
      }
    ]
  },
  "1251755523": {
    "title": "Angular Sentry错误跟踪。",
    "created_at": "2022-05-29T00:46:42Z",
    "updated_at": "2022-06-02T17:33:40Z",
    "body": "我们已经为Angular Application做了错误跟踪，并通过GitHub Actions自动上传源码图和创建发布，我们向你展示如何做到这一点。\r\n",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Angular",
        "color": "D93F0B"
      }
    ]
  },
  "1251907198": {
    "title": "IOS Safari 15.4发布，尝试新的CSS元素svh、lvh、dvh",
    "created_at": "2022-05-29T14:40:47Z",
    "updated_at": "2022-06-02T17:34:04Z",
    "body": "困扰iPhone的URL栏高度问题似乎已经得到解决，请看新的元素。\r\n",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Utils",
        "color": "170627"
      }
    ]
  },
  "1258346492": {
    "title": "Python离线翻译 argostranslate",
    "created_at": "2022-06-02T15:27:08Z",
    "updated_at": "2022-06-02T15:27:08Z",
    "body": "当我们在将我们的博客翻译成许多语言时，我们使用argostranslate进行离线翻译，并分享我们是如何做到这一点。\r\n",
    "labels": [
      {
        "name": "article",
        "color": "C200E5"
      },
      {
        "name": "Python",
        "color": "1D76DB"
      }
    ]
  }
}
