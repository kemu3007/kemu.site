{
  "url": "https://api.github.com/repos/kemu3007/portal/issues/6",
  "repository_url": "https://api.github.com/repos/kemu3007/portal",
  "labels_url": "https://api.github.com/repos/kemu3007/portal/issues/6/labels{/name}",
  "comments_url": "https://api.github.com/repos/kemu3007/portal/issues/6/comments",
  "events_url": "https://api.github.com/repos/kemu3007/portal/issues/6/events",
  "html_url": "https://github.com/kemu3007/portal/issues/6",
  "id": 1160543028,
  "node_id": "I_kwDOG7qoq85FLHs0",
  "number": 6,
  "title": "自动生成Django Admin。",
  "user": {
    "login": "kemu3007",
    "id": 29157528,
    "node_id": "MDQ6VXNlcjI5MTU3NTI4",
    "avatar_url": "https://avatars.githubusercontent.com/u/29157528?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kemu3007",
    "html_url": "https://github.com/kemu3007",
    "followers_url": "https://api.github.com/users/kemu3007/followers",
    "following_url": "https://api.github.com/users/kemu3007/following{/other_user}",
    "gists_url": "https://api.github.com/users/kemu3007/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kemu3007/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kemu3007/subscriptions",
    "organizations_url": "https://api.github.com/users/kemu3007/orgs",
    "repos_url": "https://api.github.com/users/kemu3007/repos",
    "events_url": "https://api.github.com/users/kemu3007/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kemu3007/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 3898939400,
      "node_id": "LA_kwDOG7qoq87oZRgI",
      "url": "https://api.github.com/repos/kemu3007/portal/labels/article",
      "name": "article",
      "color": "C200E5",
      "default": false,
      "description": ""
    },
    {
      "id": 3900075763,
      "node_id": "LA_kwDOG7qoq87odm7z",
      "url": "https://api.github.com/repos/kemu3007/portal/labels/Django",
      "name": "Django",
      "color": "5FC353",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [],
  "milestone": null,
  "comments": 0,
  "created_at": "2022-03-06T07:45:18Z",
  "updated_at": "2022-03-06T15:21:16Z",
  "closed_at": null,
  "author_association": "OWNER",
  "active_lock_reason": null,
  "body": "我忘了注册管理员，很麻烦，所以我就把它作为一个说明。\n\n#### 有用的时间\n-  我不想在Django Admin上投入那么多精力，但我想要最小的功能。\n-  我想对添加模型时忘记`admin.site.register`的情况做一些处理。\n\n#### 实际代码\n-  urls.py。\n\n```python \nurlpatterns = [\n    path(\"admin/native/\", AutoGenerateAdminSite().urls),\n]\n```\n\n-  admin.py.\n\n```python\nfrom typing import Type\nfrom django.contrib.admin.options import ModelAdmin\nfrom django.contrib.admin.sites import AdminSite\nfrom django.apps import apps\nfrom django.db import models\nfrom colorfield.fields import ColorField\n\n\ndef get_admin_model(model: Type[models.Model]) -> Type[ModelAdmin]:\n    list_display_fields = [models.CharField, models.IntegerField, models.PositiveIntegerField, models.ForeignKey, models.BooleanField, ColorField]\n    list_editable_field = [models.IntegerField, models.PositiveIntegerField, models.BooleanField, ColorField]\n    list_display = [\"pk\"]\n    list_editable = []\n    for field in model._meta.fields:\n        if type(field) in list_display_fields:\n            list_display.append(field.name)\n        if type(field) in list_editable_field and field.editable:\n            list_editable.append(field.name)\n    return type(f\"{model._meta.model_name}ModelAdmin\", (ModelAdmin, ), {\"list_display\": list_display, \"list_editable\": list_editable, \"ordering\": model._meta.ordering or [\"pk\"]})\n\n\nclass AutoGenerateAdminSite(AdminSite):\n    display_app_list = ['sites', 'shared', 'article', 'contact']\n\n    def __init__(self, *args, **kwargs) -> None:\n        super().__init__(*args, **kwargs)\n        self._registry = {model: get_admin_model(model)(model=model, admin_site=self) for model in apps.get_models()}\n\n    def _build_app_dict(self, request):\n        app_dict = super()._build_app_dict(request)\n        return dict(filter(lambda app: app[0] in self.display_app_list, app_dict.items()))\n```\n\n创建一个扩展了`django.contrib.admin.sites.AdminSite`的`AutoGenerateAdminSite`，并将任何模型添加到`AutoGenerateAdminSite._registry`。\n\n因为使用了`django.apps.get_models`，即使是管理员也不想看到太多数据，比如会话，也会显示出来。\n\n为了逐个排除这些数据，在\"_build_app_dict \"中缩小了要显示的应用程序的范围。\n\n这次用来验证操作的代码是[这里](https://github.com/kemu3007/blog/blob/master/src/apps/admin.py)",
  "reactions": {
    "url": "https://api.github.com/repos/kemu3007/portal/issues/6/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/kemu3007/portal/issues/6/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
